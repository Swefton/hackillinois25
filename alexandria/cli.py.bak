import os
import json
import click
from libfetch.combined_libs import parse_workspace_for_libraries  # Library detection
from scraping.scrape import scrape_full_documentation  # Scraping function
from clifrontend.clifront import chat as clifront_chat  # Import the new chat command


@click.group()
def cli():
    """Alexandria CLI"""
    pass


@cli.command()
@click.argument("directory", required=False)
def init(directory=None):
    """Initialize Alexandria by creating a .alexandria folder for caching data."""
    
    target_dir = os.path.abspath(directory) if directory else os.getcwd()
    alexandria_path = os.path.join(target_dir, ".alexandria")

    try:
        os.makedirs(alexandria_path, exist_ok=True)
        click.echo(f"‚úÖ Alexandria initialized at: {alexandria_path}")
    except Exception as e:
        click.echo(f"‚ùå Error initializing Alexandria: {e}")


@cli.command()
@click.argument("directory", required=False)
def scan(directory=None):
    """Scans the given workspace directory for libraries and scrapes their documentation."""
    
    target_dir = os.path.abspath(directory) if directory else os.getcwd()
    alexandria_path = os.path.join(target_dir, ".alexandria")

    if not os.path.exists(alexandria_path):
        click.echo(f"‚ùå Error: The .alexandria directory is missing in {target_dir}. Run 'alexandria init' first.")
        return

    # Detect libraries
    click.echo(f"üîç Scanning workspace at {target_dir} for libraries...")
    parse_workspace_for_libraries(alexandria_path, target_dir)
    click.echo("‚úÖ Library scan complete!")

    # Load libraries from combined_libraries.json
    combined_libraries_path = os.path.join(alexandria_path, "combined_libraries.json")
    if not os.path.exists(combined_libraries_path):
        click.echo(f"‚ùå Error: No libraries found in {combined_libraries_path}.")
        return

    with open(combined_libraries_path, "r", encoding="utf-8") as file:
        combined_libraries = json.load(file)

    # Extract libraries with valid documentation URLs
    libraries_to_scrape = []
    for lang, libraries in combined_libraries.items():
        for lib in libraries:
            if lib["doc_link"] and "Documentation not found" not in lib["doc_link"]:
                libraries_to_scrape.append((lib["library"], lib["doc_link"]))

    if not libraries_to_scrape:
        click.echo("‚ö†Ô∏è No valid documentation links found. Skipping scraping.")
        return

    # Scrape documentation for each detected library
    click.echo("üåê Starting documentation scraping...")
    for name, link in libraries_to_scrape:
        click.echo(f"üìñ Scraping docs for {name} at {link}")
        scrape_full_documentation(link, name, target_dir)

    click.echo("‚úÖ All detected libraries have been scraped!")


@cli.command()
@click.argument("directory", required=False, type=click.Path(exists=False))
def chat(directory=None):
    """Launches the Alexandria chat interface from clifrontend with an optional directory."""
    target_dir = os.path.abspath(directory) if directory else os.getcwd()
    print()
    clifront_chat("./tests/workspace")  # ‚úÖ Pass the directory correctly 

def main():
    cli()


if __name__ == "__main__":
    main()
