[
    {
        "title": "Welcome to Spotipy!",
        "content": [
            "Spotipy is a lightweight Python library for the Spotify Web API. With Spotipy\nyou get full access to all of the music data provided by the Spotify platform."
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Features",
        "content": [
            "Spotipy supports all of the features of the Spotify Web API including access\nto all end points, and support for user authorization. For details on the\ncapabilities you are encouraged to review the Spotify Web\nAPI documentation."
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Installation",
        "content": [
            "Install or upgrade Spotipy with:",
            "You can also obtain the source code from the Spotify GitHub repository."
        ],
        "code": [
            "pip install spotipy --upgrade"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Getting Started",
        "content": [
            "All methods require user authorization. You will need to register your app at\nMy Dashboard\nto get the credentials necessary to make authorized calls\n(a client id and client secret).",
            "Spotipy supports two authorization flows:",
            "Authorization Code flow This method is suitable for long-running applications\nwhich the user logs into once. It provides an access token that can be refreshed.",
            "Note",
            "Requires you to add a redirect URI to your application at\nMy Dashboard.\nSee Redirect URI for more details.",
            "Client Credentials flow  This method makes it possible\nto authenticate your requests to the Spotify Web API and to obtain\na higher rate limit than you would with the Authorization Code flow.",
            "For guidance on setting your app credentials watch this video tutorial or follow the\nSpotipy Tutorial for Beginners.",
            "For a longer tutorial with examples included, refer to this video playlist."
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Authorization Code Flow",
        "content": [
            "This flow is suitable for long-running applications in which the user grants\npermission only once. It provides an access token that can be refreshed.\nSince the token exchange involves sending your secret key, perform this on a\nsecure location, like a backend service, and not from a client such as a\nbrowser or from a mobile app."
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Quick start",
        "content": [
            "To support the Client Authorization Code Flow Spotipy provides a\nclass SpotifyOAuth that can be used to authenticate requests like so:",
            "or if you are reluctant to immortalize your app credentials in your source code,\nyou can set environment variables like so (use $env:\"credentials\" instead of export\non Windows):"
        ],
        "code": [
            "import spotipy\nfrom spotipy.oauth2 import SpotifyOAuth\n\nscope = \"user-library-read\"\n\nsp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope=scope))\n\nresults = sp.current_user_saved_tracks()\nfor idx, item in enumerate(results['items']):\n    track = item['track']\n    print(idx, track['artists'][0]['name'], \" – \", track['name'])",
            "$env:\"credentials\"",
            "export",
            "export SPOTIPY_CLIENT_ID='your-spotify-client-id'\nexport SPOTIPY_CLIENT_SECRET='your-spotify-client-secret'\nexport SPOTIPY_REDIRECT_URI='your-app-redirect-url'"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Scopes",
        "content": [
            "See Using\nScopes for information\nabout scopes."
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Redirect URI",
        "content": [
            "The Authorization Code Flow needs you to add a redirect URI\nto your application at\nMy Dashboard\n(navigate to your application and then [Edit Settings]).",
            "The redirect_uri argument or SPOTIPY_REDIRECT_URI environment variable\nmust match the redirect URI added to your application in your Dashboard.\nThe redirect URI can be any valid URI (it does not need to be accessible)\nsuch as http://example.com or http://127.0.0.1:9090.",
            "Note",
            "If you choose an http-scheme URL, and it’s for\n127.0.0.1, AND it specifies a port, then spotipy will instantiate",
            "a server on the indicated response to receive the access token from the\nresponse at the end of the oauth flow [see the code](https://github.com/plamere/spotipy/blob/master/spotipy/oauth2.py#L483-L490)."
        ],
        "code": [
            "redirect_uri",
            "SPOTIPY_REDIRECT_URI",
            "http://example.com",
            "http://127.0.0.1:9090"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Client Credentials Flow",
        "content": [
            "The Client Credentials flow is used in server-to-server authentication. Only\nendpoints that do not access user information can be accessed. The advantage here\nin comparison with requests to the Web API made without an access token,\nis that a higher rate limit is applied.",
            "As opposed to the Authorization Code Flow, you will not need to set SPOTIPY_REDIRECT_URI,\nwhich means you will never be redirected to the sign in page in your browser:",
            "To support the Client Credentials Flow Spotipy provides a\nclass SpotifyClientCredentials that can be used to authenticate requests like so:"
        ],
        "code": [
            "SPOTIPY_REDIRECT_URI",
            "export SPOTIPY_CLIENT_ID='your-spotify-client-id'\nexport SPOTIPY_CLIENT_SECRET='your-spotify-client-secret'",
            "import spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nauth_manager = SpotifyClientCredentials()\nsp = spotipy.Spotify(auth_manager=auth_manager)\n\nplaylists = sp.user_playlists('spotify')\nwhile playlists:\n    for i, playlist in enumerate(playlists['items']):\n        print(f\"{i + 1 + playlists['offset']:4d} {playlist['uri']} {playlist['name']}\")\n    if playlists['next']:\n        playlists = sp.next(playlists)\n    else:\n        playlists = None"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "IDs URIs and URLs",
        "content": [
            "Spotipy supports a number of different ID types:",
            "Spotify URI - The resource identifier that you can enter, for example, in\nthe Spotify Desktop client’s search box to locate an artist, album, or\ntrack. Example: spotify:track:6rqhFgbbKwnb9MLmUQDhG6",
            "Spotify URL - An HTML link that opens a track, album, app, playlist or other\nSpotify resource in a Spotify client. Example:\nhttp://open.spotify.com/track/6rqhFgbbKwnb9MLmUQDhG6",
            "Spotify ID - A base-62 number that you can find at the end of the Spotify\nURI (see above) for an artist, track, album, etc. Example:\n6rqhFgbbKwnb9MLmUQDhG6",
            "In general, any Spotipy method that needs an artist, album, track or playlist ID\nwill accept ids in any of the above form"
        ],
        "code": [
            "spotify:track:6rqhFgbbKwnb9MLmUQDhG6",
            "http://open.spotify.com/track/6rqhFgbbKwnb9MLmUQDhG6",
            "6rqhFgbbKwnb9MLmUQDhG6"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Customized token caching",
        "content": [
            "Tokens are refreshed automatically and stored by default in the project main folder.\nAs this might not suit everyone’s needs, spotipy provides a way to create customized\ncache handlers.",
            "https://github.com/plamere/spotipy/blob/master/spotipy/cache_handler.py",
            "The custom cache handler would need to be a class that inherits from the base\ncache handler CacheHandler. The default cache handler CacheFileHandler is a good example.\nAn instance of that new class can then be passed as a parameter when\ncreating SpotifyOAuth, SpotifyPKCE or SpotifyImplicitGrant.\nThe following handlers are available and defined in the URL above.",
            "CacheFileHandler",
            "MemoryCacheHandler",
            "DjangoSessionCacheHandler",
            "FlaskSessionCacheHandler",
            "RedisCacheHandler",
            "MemcacheCacheHandler: install with dependency using pip install \"spotipy[pymemcache]\"",
            "Feel free to contribute new cache handlers to the repo."
        ],
        "code": [
            "CacheHandler",
            "CacheFileHandler",
            "SpotifyOAuth",
            "SpotifyPKCE",
            "SpotifyImplicitGrant",
            "CacheFileHandler",
            "MemoryCacheHandler",
            "DjangoSessionCacheHandler",
            "FlaskSessionCacheHandler",
            "RedisCacheHandler",
            "MemcacheCacheHandler",
            "pip install \"spotipy[pymemcache]\""
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Examples",
        "content": [
            "Here is an example of using Spotipy to list the\nnames of all the albums released by the artist ‘Birdy’:",
            "Here’s another example showing how to get 30 second samples and cover art\nfor the top 10 tracks for Led Zeppelin:",
            "Finally, here’s an example that will get the URL for an artist image given the\nartist’s name:",
            "There are many more examples of how to use Spotipy in the spotipy-examples\nrepository on GitHub."
        ],
        "code": [
            "import spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nbirdy_uri = 'spotify:artist:2WX2uTcsvV5OnS0inACecP'\nspotify = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())\n\nresults = spotify.artist_albums(birdy_uri, album_type='album')\nalbums = results['items']\nwhile results['next']:\n    results = spotify.next(results)\n    albums.extend(results['items'])\n\nfor album in albums:\n    print(album['name'])",
            "import spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nlz_uri = 'spotify:artist:36QJpDe2go2KgaRleHCDTp'\n\nspotify = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())\nresults = spotify.artist_top_tracks(lz_uri)\n\nfor track in results['tracks'][:10]:\n    print('track    : ' + track['name'])\n    print('audio    : ' + track['preview_url'])\n    print('cover art: ' + track['album']['images'][0]['url'])\n    print()",
            "import spotipy\nimport sys\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nspotify = spotipy.Spotify(auth_manager=SpotifyClientCredentials())\n\nif len(sys.argv) > 1:\n    name = ' '.join(sys.argv[1:])\nelse:\n    name = 'Radiohead'\n\nresults = spotify.search(q='artist:' + name, type='artist')\nitems = results['artists']['items']\nif len(items) > 0:\n    artist = items[0]\n    print(artist['name'], artist['images'][0]['url'])"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "API Reference",
        "content": [],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "client Module",
        "content": [
            "A simple and thin Python library for the Spotify Web API",
            "Bases: object",
            "Example usage:",
            "Creates a Spotify API client.",
            "auth – An access token (optional)",
            "requests_session – A Requests session object or a truthy value to create one.\nA falsy value disables sessions.\nIt should generally be a good idea to keep sessions enabled\nfor performance reasons (connection pooling).",
            "client_credentials_manager – SpotifyClientCredentials object",
            "oauth_manager – SpotifyOAuth object",
            "auth_manager – SpotifyOauth, SpotifyClientCredentials,\nor SpotifyImplicitGrant object",
            "proxies – Definition of proxies (optional).\nSee Requests doc https://2.python-requests.org/en/master/user/advanced/#proxies",
            "requests_timeout – Tell Requests to stop waiting for a response after a given\nnumber of seconds",
            "status_forcelist – Tell requests what type of status codes retries should occur on",
            "retries – Total number of retries to allow",
            "status_retries – Number of times to retry on bad status codes",
            "backoff_factor – A backoff factor to apply between attempts after the second try\nSee urllib3 https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html",
            "language – The language parameter advertises what language the user prefers to see.\nSee ISO-639-1 language code: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes",
            "Adds a song to the end of a user’s queue",
            "If device A is currently playing music, and you try to add to the queue\nand pass in the id for device B, you will get a\n‘Player command failed: Restriction violated’ error\nI therefore recommend leaving device_id as None so that the active device is targeted",
            "uri – song uri, id, or url",
            "device_id – the id of a Spotify device.\nIf None, then the active device is used.",
            "returns a single album given the album’s ID, URIs or URL",
            "album_id - the album ID, URI or URL",
            "market - an ISO 3166-1 alpha-2 country code",
            "Get Spotify catalog information about an album’s tracks",
            "album_id - the album ID, URI or URL",
            "limit  - the number of items to return",
            "offset - the index of the first item to return",
            "market - an ISO 3166-1 alpha-2 country code.",
            "returns a list of albums given the album IDs, URIs, or URLs",
            "albums - a list of  album IDs, URIs or URLs",
            "market - an ISO 3166-1 alpha-2 country code",
            "returns a single artist given the artist’s ID, URI or URL",
            "artist_id - an artist ID, URI or URL",
            "Get Spotify catalog information about an artist’s albums",
            "artist_id - the artist ID, URI or URL",
            "‘appears_on’, ‘compilation’. If multiple types are desired,\npass in a comma separated string; e.g., ‘album,single’.",
            "country - limit the response to one particular country.",
            "limit  - the number of albums to return",
            "offset - the index of the first album to return",
            "Get Spotify catalog information about artists similar to an\nidentified artist. Similarity is based on analysis of the\nSpotify community’s listening history.",
            "artist_id - the artist ID, URI or URL",
            "Get Spotify catalog information about an artist’s top 10 tracks\nby country.",
            "artist_id - the artist ID, URI or URL",
            "country - limit the response to one particular country.",
            "returns a list of artists given the artist IDs, URIs, or URLs",
            "artists - a list of  artist IDs, URIs or URLs",
            "Get audio analysis for a track based upon its Spotify ID\nParameters:",
            "track_id - a track URI, URL or ID",
            "Get audio features for one or multiple tracks based upon their Spotify IDs\nParameters:",
            "tracks - a list of track URIs, URLs or IDs, maximum: 100 ids",
            "Get the list of markets where Spotify is available.\nReturns a list of the countries in which Spotify is available, identified by their\nISO 3166-1 alpha-2 country code with additional country codes for special territories.",
            "Get a list of categories",
            "country - An ISO 3166-1 alpha-2 country code.",
            "locale - The desired language, consisting of an ISO 639-1 alpha-2\nlanguage code and an ISO 3166-1 alpha-2 country code, joined\nby an underscore.",
            "limit - The maximum number of items to return. Default: 20.\nMinimum: 1. Maximum: 50",
            "offset - The index of the first item to return. Default: 0\n(the first object). Use with limit to get the next set of\nitems.",
            "Get info about a category",
            "category_id - The Spotify category ID for the category.",
            "country - An ISO 3166-1 alpha-2 country code.",
            "locale - The desired language, consisting of an ISO 639-1 alpha-2\nlanguage code and an ISO 3166-1 alpha-2 country code, joined\nby an underscore.",
            "Get a list of playlists for a specific Spotify category",
            "category_id - The Spotify category ID for the category.",
            "country - An ISO 3166-1 alpha-2 country code.",
            "limit - The maximum number of items to return. Default: 20.\nMinimum: 1. Maximum: 50",
            "offset - The index of the first item to return. Default: 0\n(the first object). Use with limit to get the next set of\nitems.",
            "Get information about user’s current playback.",
            "market - an ISO 3166-1 alpha-2 country code.",
            "additional_types - episode to get podcast track information",
            "Get detailed profile information about the current user.\nAn alias for the ‘me’ method.",
            "Add the current authenticated user as a follower of a playlist.",
            "playlist_id - the id of the playlist",
            "Gets a list of the artists followed by the current authorized user",
            "limit - the number of artists to return",
            "request",
            "Check if the current user is following certain artists",
            "Returns list of booleans respective to ids",
            "ids - a list of artist URIs, URLs or IDs",
            "Check if the current user is following certain users",
            "Returns list of booleans respective to ids",
            "ids - a list of user URIs, URLs or IDs",
            "Get information about the current users currently playing track.",
            "Get current user playlists without required getting his profile\nParameters:",
            "limit  - the number of items to return",
            "offset - the index of the first item to return",
            "Get the current user’s recently played tracks",
            "limit - the number of entities to return",
            "after (but not including) this cursor position.\nCannot be used if before is specified.",
            "before (but not including) this cursor position.\nCannot be used if after is specified",
            "Gets a list of the albums saved in the current authorized user’s\n“Your Music” library",
            "limit - the number of albums to return (MAX_LIMIT=50)",
            "offset - the index of the first album to return",
            "market - an ISO 3166-1 alpha-2 country code.",
            "Add one or more albums to the current user’s\n“Your Music” library.\nParameters:",
            "albums - a list of album URIs, URLs or IDs",
            "Check if one or more albums is already saved in\nthe current Spotify user’s “Your Music” library.",
            "albums - a list of album URIs, URLs or IDs",
            "Remove one or more albums from the current user’s\n“Your Music” library.",
            "albums - a list of album URIs, URLs or IDs",
            "Gets a list of the episodes saved in the current authorized user’s\n“Your Music” library",
            "limit - the number of episodes to return",
            "offset - the index of the first episode to return",
            "market - an ISO 3166-1 alpha-2 country code",
            "Add one or more episodes to the current user’s\n“Your Music” library.",
            "episodes - a list of episode URIs, URLs or IDs",
            "Check if one or more episodes is already saved in\nthe current Spotify user’s “Your Music” library.",
            "episodes - a list of episode URIs, URLs or IDs",
            "Remove one or more episodes from the current user’s\n“Your Music” library.",
            "episodes - a list of episode URIs, URLs or IDs",
            "Gets a list of the shows saved in the current authorized user’s\n“Your Music” library",
            "limit - the number of shows to return",
            "offset - the index of the first show to return",
            "market - an ISO 3166-1 alpha-2 country code",
            "Add one or more albums to the current user’s\n“Your Music” library.\nParameters:",
            "shows - a list of show URIs, URLs or IDs",
            "Check if one or more shows is already saved in\nthe current Spotify user’s “Your Music” library.",
            "shows - a list of show URIs, URLs or IDs",
            "Remove one or more shows from the current user’s\n“Your Music” library.",
            "shows - a list of show URIs, URLs or IDs",
            "Gets a list of the tracks saved in the current authorized user’s\n“Your Music” library",
            "limit - the number of tracks to return",
            "offset - the index of the first track to return",
            "market - an ISO 3166-1 alpha-2 country code",
            "Add one or more tracks to the current user’s\n“Your Music” library.",
            "tracks - a list of track URIs, URLs or IDs",
            "Check if one or more tracks is already saved in\nthe current Spotify user’s “Your Music” library.",
            "tracks - a list of track URIs, URLs or IDs",
            "Remove one or more tracks from the current user’s\n“Your Music” library.",
            "tracks - a list of track URIs, URLs or IDs",
            "Get the current user’s top artists",
            "limit - the number of entities to return (max 50)",
            "offset - the index of the first entity to return",
            "time_range - Over what time frame are the affinities computed\nValid-values: short_term, medium_term, long_term",
            "Get the current user’s top tracks",
            "limit - the number of entities to return",
            "offset - the index of the first entity to return",
            "time_range - Over what time frame are the affinities computed\nValid-values: short_term, medium_term, long_term",
            "Unfollows (deletes) a playlist for the current authenticated\nuser",
            "playlist_id - the id of the playlist",
            "Get user’s currently playing track.",
            "market - an ISO 3166-1 alpha-2 country code.",
            "additional_types - episode to get podcast track information",
            "Get a list of user’s available devices.",
            "returns a single episode given the episode’s ID, URIs or URL",
            "episode_id - the episode ID, URI or URL",
            "The episode must be available in the given market.\nIf user-based authorization is in use, the user’s country\ntakes precedence. If neither market nor user country are\nprovided, the content is considered unavailable for the client.",
            "returns a list of episodes given the episode IDs, URIs, or URLs",
            "episodes - a list of episode IDs, URIs or URLs",
            "Only episodes available in the given market will be returned.\nIf user-based authorization is in use, the user’s country\ntakes precedence. If neither market nor user country are\nprovided, the content is considered unavailable for the client.",
            "Get a list of Spotify featured playlists",
            "locale - The desired language, consisting of a lowercase ISO\n639-1 alpha-2 language code and an uppercase ISO 3166-1 alpha-2\ncountry code, joined by an underscore.",
            "country - An ISO 3166-1 alpha-2 country code.",
            "timestamp - A timestamp in ISO 8601 format:\nyyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user’s\nlocal time to get results tailored for that specific date and\ntime in the day",
            "limit - The maximum number of items to return. Default: 20.\nMinimum: 1. Maximum: 50",
            "offset - The index of the first item to return. Default: 0\n(the first object). Use with limit to get the next set of\nitems.",
            "Get Spotify catalog information for a single audiobook identified by its unique\nSpotify ID.",
            "Parameters:\n- id - the Spotify ID for the audiobook\n- market - an ISO 3166-1 alpha-2 country code.",
            "Get Spotify catalog information about an audiobook’s chapters.",
            "Parameters:\n- id - the Spotify ID for the audiobook\n- market - an ISO 3166-1 alpha-2 country code.\n- limit - the maximum number of items to return\n- offset - the index of the first item to return",
            "Get Spotify catalog information for multiple audiobooks based on their Spotify IDs.",
            "Parameters:\n- ids - a list of Spotify IDs for the audiobooks\n- market - an ISO 3166-1 alpha-2 country code.",
            "Get detailed profile information about the current user.\nAn alias for the ‘current_user’ method.",
            "Get a list of new album releases featured in Spotify",
            "country - An ISO 3166-1 alpha-2 country code.",
            "limit - The maximum number of items to return. Default: 20.\nMinimum: 1. Maximum: 50",
            "offset - The index of the first item to return. Default: 0\n(the first object). Use with limit to get the next set of\nitems.",
            "returns the next result given a paged result",
            "result - a previously returned paged result",
            "Skip user’s playback to next track.",
            "device_id - device target for playback",
            "Pause user’s playback.",
            "device_id - device target for playback",
            "Gets playlist by id.",
            "playlist - the id of the playlist",
            "fields - which fields to return",
            "string from_token.",
            "valid types are: track and episode",
            "Adds tracks/episodes to a playlist",
            "playlist_id - the id of the playlist",
            "items - a list of track/episode URIs or URLs",
            "position - the position to add the tracks",
            "Changes a playlist’s name and/or public/private state,\ncollaborative state, and/or description",
            "playlist_id - the id of the playlist",
            "name - optional name of the playlist",
            "public - optional is the playlist public",
            "collaborative - optional is the playlist collaborative",
            "description - optional description of the playlist",
            "Get cover image of a playlist.",
            "playlist_id - the playlist ID, URI or URL",
            "Check to see if the given users are following the given playlist",
            "playlist_id - the id of the playlist",
            "if they follow the playlist. Maximum: 5 ids.",
            "Get full details of the tracks and episodes of a playlist.",
            "playlist_id - the playlist ID, URI or URL",
            "fields - which fields to return",
            "limit - the maximum number of tracks to return",
            "offset - the index of the first track to return",
            "market - an ISO 3166-1 alpha-2 country code.",
            "valid types are: track and episode",
            "Removes all occurrences of the given tracks/episodes from the given playlist",
            "playlist_id - the id of the playlist",
            "items - list of track/episode ids to remove from the playlist",
            "snapshot_id - optional id of the playlist snapshot",
            "Removes all occurrences of the given tracks from the given playlist",
            "playlist_id - the id of the playlist",
            "tracks/episodes to remove with their current positions in\nthe playlist.  For example:",
            "[  { “uri”:”4iV5W9uYEdYUVa79Axb7Rh”, “positions”:[2] },\n{ “uri”:”1301WleyT98MSxVHPZCA6M”, “positions”:[7] } ]",
            "snapshot_id - optional id of the playlist snapshot",
            "Reorder tracks in a playlist",
            "playlist_id - the id of the playlist",
            "range_start - the position of the first track to be reordered",
            "(default: 1)",
            "inserted",
            "snapshot_id - optional playlist’s snapshot ID",
            "Replace all tracks/episodes in a playlist",
            "playlist_id - the id of the playlist",
            "items - list of track/episode ids to comprise playlist",
            "Get full details of the tracks of a playlist.",
            "playlist_id - the playlist ID, URI or URL",
            "fields - which fields to return",
            "limit - the maximum number of tracks to return",
            "offset - the index of the first track to return",
            "market - an ISO 3166-1 alpha-2 country code.",
            "valid types are: track and episode",
            "Replace the image used to represent a specific playlist",
            "playlist_id - the id of the playlist",
            "(maximum payload size is 256 KB)",
            "returns the previous result given a paged result",
            "result - a previously returned paged result",
            "Skip user’s playback to previous track.",
            "device_id - device target for playback",
            "Gets the current user’s queue",
            "Get a list of recommended tracks for one to five seeds.\n(at least one of seed_artists, seed_tracks and seed_genres\nare needed)",
            "seed_artists - a list of artist IDs, URIs or URLs",
            "seed_tracks - a list of track IDs, URIs or URLs",
            "recommendations can be found by calling\nrecommendation_genre_seeds",
            "all results will be playable in this country.",
            "Minimum: 1. Maximum: 100",
            "attributes listed in the documentation, these values\nprovide filters and targeting on results.",
            "Set repeat mode for playback.",
            "state - track, context, or off",
            "device_id - device target for playback",
            "searches for an item",
            "official documentation https://developer.spotify.com/documentation/web-api/reference/search/)  # noqa",
            "within each type, not on the total response.",
            "offset - the index of the first item to return",
            "‘track’, ‘playlist’, ‘show’, and ‘episode’.  If multiple types are desired,\npass in a comma separated string; e.g., ‘track,album,episode’.",
            "from_token.",
            "(experimental) Searches multiple markets for an item",
            "official documentation https://developer.spotify.com/documentation/web-api/reference/search/)  # noqa",
            "markets, then this limit is applied to each market. (e.g. search US, CA, MX each with a limit of 10).\nIf multiple types are specified, this applies to each type.",
            "offset - the index of the first item to return",
            "‘track’, ‘playlist’, ‘show’, or ‘episode’. If multiple types are desired, pass in a comma separated string.",
            "markets - A list of ISO 3166-1 alpha-2 country codes. Search all country markets by default.",
            "total - the total number of results to return across multiple markets and types.",
            "Seek to position in current track.",
            "position_ms - position in milliseconds to seek to",
            "device_id - device target for playback",
            "returns a single show given the show’s ID, URIs or URL",
            "show_id - the show ID, URI or URL",
            "The show must be available in the given market.\nIf user-based authorization is in use, the user’s country\ntakes precedence. If neither market nor user country are\nprovided, the content is considered unavailable for the client.",
            "Get Spotify catalog information about a show’s episodes",
            "show_id - the show ID, URI or URL",
            "limit  - the number of items to return",
            "offset - the index of the first item to return",
            "Only episodes available in the given market will be returned.\nIf user-based authorization is in use, the user’s country\ntakes precedence. If neither market nor user country are\nprovided, the content is considered unavailable for the client.",
            "returns a list of shows given the show IDs, URIs, or URLs",
            "shows - a list of show IDs, URIs or URLs",
            "Only shows available in the given market will be returned.\nIf user-based authorization is in use, the user’s country\ntakes precedence. If neither market nor user country are\nprovided, the content is considered unavailable for the client.",
            "Toggle playback shuffling.",
            "state - true or false",
            "device_id - device target for playback",
            "Start or resume user’s playback.",
            "Provide a context_uri to start playback of an album,\nartist, or playlist.",
            "Provide a uris list to start playback of one or more\ntracks.",
            "Provide offset as {“position”: <int>} or {“uri”: “<track uri>”}\nto start playback at a particular offset.",
            "device_id - device target for playback",
            "context_uri - spotify context uri to play",
            "uris - spotify track uris",
            "offset - offset into context by index or track",
            "Must be a positive number. Passing in a position that is\ngreater than the length of the track will cause the player to\nstart playing the next song.",
            "returns a single track given the track’s ID, URI or URL",
            "track_id - a spotify URI, URL or ID",
            "market - an ISO 3166-1 alpha-2 country code.",
            "returns a list of tracks given a list of track IDs, URIs, or URLs",
            "tracks - a list of spotify URIs, URLs or IDs. Maximum: 50 IDs.",
            "market - an ISO 3166-1 alpha-2 country code.",
            "Transfer playback to another device.\nNote that the API accepts a list of device ids, but only\nactually supports one.",
            "device_id - transfer playback to this device",
            "keep current state.",
            "Gets basic profile information about a Spotify User",
            "user - the id of the usr",
            "Follow one or more artists\nParameters:",
            "ids - a list of artist IDs",
            "Follow one or more users\nParameters:",
            "ids - a list of user IDs",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Adds episodes to a playlist",
            "user - the id of the user",
            "playlist_id - the id of the playlist",
            "episodes - a list of track URIs, URLs or IDs",
            "position - the position to add the episodes",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Adds tracks to a playlist",
            "user - the id of the user",
            "playlist_id - the id of the playlist",
            "tracks - a list of track URIs, URLs or IDs",
            "position - the position to add the tracks",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Changes a playlist’s name and/or public/private state",
            "user - the id of the user",
            "playlist_id - the id of the playlist",
            "name - optional name of the playlist",
            "public - optional is the playlist public",
            "collaborative - optional is the playlist collaborative",
            "description - optional description of the playlist",
            "Creates a playlist for a user",
            "user - the id of the user",
            "name - the name of the playlist",
            "public - is the created playlist public",
            "collaborative - is the created playlist collaborative",
            "description - the description of the playlist",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Add the current authenticated user as a follower of a playlist.",
            "playlist_owner_id - the user id of the playlist owner",
            "playlist_id - the id of the playlist",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Check to see if the given users are following the given playlist",
            "playlist_owner_id - the user id of the playlist owner",
            "playlist_id - the id of the playlist",
            "if they follow the playlist. Maximum: 5 ids.",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Removes all occurrences of the given tracks from the given playlist",
            "user - the id of the user",
            "playlist_id - the id of the playlist",
            "tracks - the list of track ids to remove from the playlist",
            "snapshot_id - optional id of the playlist snapshot",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Removes all occurrences of the given tracks from the given playlist",
            "user - the id of the user",
            "playlist_id - the id of the playlist",
            "tracks to remove with their current positions in the\nplaylist.  For example:",
            "[  { “uri”:”4iV5W9uYEdYUVa79Axb7Rh”, “positions”:[2] },\n{ “uri”:”1301WleyT98MSxVHPZCA6M”, “positions”:[7] } ]",
            "snapshot_id - optional id of the playlist snapshot",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Reorder tracks in a playlist from a user",
            "user - the id of the user",
            "playlist_id - the id of the playlist",
            "range_start - the position of the first track to be reordered",
            "(default: 1)",
            "inserted",
            "snapshot_id - optional playlist’s snapshot ID",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Replace all tracks in a playlist for a user",
            "user - the id of the user",
            "playlist_id - the id of the playlist",
            "tracks - the list of track ids to add to the playlist",
            "This function is no longer in use, please use the recommended function in the warning!",
            "Unfollows (deletes) a playlist for a user",
            "user - the id of the user",
            "name - the name of the playlist",
            "Gets playlists of a user",
            "user - the id of the usr",
            "limit  - the number of items to return",
            "offset - the index of the first item to return",
            "Unfollow one or more artists\nParameters:",
            "ids - a list of artist IDs",
            "Unfollow one or more users\nParameters:",
            "ids - a list of user IDs",
            "Set playback volume.",
            "volume_percent - volume between 0 and 100",
            "device_id - device target for playback",
            "Bases: SpotifyBaseException"
        ],
        "code": [
            "client",
            "object",
            "import spotipy\n\nurn = 'spotify:artist:3jOstUTkEu2JkjvRdBA5Gu'\nsp = spotipy.Spotify()\n\nartist = sp.artist(urn)\nprint(artist)\n\nuser = sp.user('plamere')\nprint(user)",
            "SpotifyBaseException"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "oauth2 Module",
        "content": [
            "Bases: SpotifyAuthBase",
            "Creates a Client Credentials Flow Manager.",
            "The Client Credentials flow is used in server-to-server authentication.\nOnly endpoints that do not access user information can be accessed.\nThis means that endpoints that require authorization scopes cannot be accessed.\nThe advantage, however, of this authorization flow is that it does not require any\nuser interaction",
            "You can either provide a client_id and client_secret to the\nconstructor or set SPOTIPY_CLIENT_ID and SPOTIPY_CLIENT_SECRET\nenvironment variables",
            "client_id: Must be supplied or set as environment variable",
            "client_secret: Must be supplied or set as environment variable",
            "proxies: Optional, proxy for the requests library to route through",
            "requests_session: A Requests session",
            "a given number of seconds",
            "getting and saving cached authorization tokens.\nOptional, will otherwise use CacheFileHandler.\n(takes precedence over cache_path and username)",
            "If a valid access token is in memory, returns it\nElse fetches a new token and returns it",
            "Parameters:\n- as_dict - a boolean indicating if returning the access token",
            "as a token_info dictionary, otherwise it will be returned\nas a string.",
            "Bases: SpotifyAuthBase",
            "Implements Implicit Grant Flow for client apps",
            "This auth manager enables user and non-user endpoints with only\na client secret, redirect uri, and username. The user will need to\ncopy and paste a URI from the browser every hour."
        ],
        "code": [
            "oauth2",
            "SpotifyAuthBase",
            "SpotifyAuthBase"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Security Warning",
        "content": [
            "The OAuth standard no longer recommends the Implicit Grant Flow for\nclient-side code. Spotify has implemented the OAuth-suggested PKCE\nextension that removes the need for a client secret in the\nAuthentication Code flow. Use the SpotifyPKCE auth manager instead\nof SpotifyImplicitGrant.",
            "SpotifyPKCE contains all the functionality of\nSpotifyImplicitGrant, plus automatic response retrieval and\nrefreshable tokens. Only a few replacements need to be made:",
            "get_auth_response()[‘access_token’] ->\nget_access_token(get_authorization_code())",
            "get_auth_response() ->\nget_access_token(get_authorization_code()); get_cached_token()",
            "parse_response_token(url)[‘access_token’] ->\nget_access_token(parse_response_code(url))",
            "parse_response_token(url) ->\nget_access_token(parse_response_code(url)); get_cached_token()",
            "The security concern in the Implicit Grant flow is that the token is\nreturned in the URL and can be intercepted through the browser. A\nrequest with an authorization code and proof of origin could not be\neasily intercepted without a compromised network.",
            "Creates Auth Manager using the Implicit Grant flow",
            "See help(SpotifyImplicitGrant) for full Security Warning"
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Parameters",
        "content": [
            "client_id: Must be supplied or set as environment variable",
            "redirect_uri: Must be supplied or set as environment variable",
            "state: May be supplied, no verification is performed",
            "e.g, “playlist-read-private,playlist-read-collaborative”",
            "getting and saving cached authorization tokens.\nMay be supplied, will otherwise use CacheFileHandler.\n(takes precedence over cache_path and username)",
            "(takes precedence over username)",
            "(will set cache_path to .cache-{username})",
            "show_dialog: Interpreted as boolean",
            "Gets Auth Token from cache (preferred) or user interaction"
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Parameters",
        "content": [
            "state: May be given, overrides (without changing) self.state",
            "response: URI with token, can break expiration checks",
            "check_cache: Interpreted as boolean",
            "Gets a new auth token with user interaction",
            "Gets the URL to use to authorize this app",
            "Parse the response code in the given response url",
            "Bases: SpotifyAuthBase",
            "Implements Authorization Code Flow for Spotify’s OAuth implementation.",
            "Creates a SpotifyOAuth object",
            "client_id: Must be supplied or set as environment variable",
            "client_secret: Must be supplied or set as environment variable",
            "redirect_uri: Must be supplied or set as environment variable",
            "state: Optional, no verification is performed",
            "e.g, “playlist-read-private,playlist-read-collaborative”",
            "(takes precedence over username)",
            "(will set cache_path to .cache-{username})",
            "proxies: Optional, proxy for the requests library to route through",
            "show_dialog: Optional, interpreted as boolean",
            "requests_session: A Requests session",
            "a given number of seconds",
            "authorize a user",
            "getting and saving cached authorization tokens.\nOptional, will otherwise use CacheFileHandler.\n(takes precedence over cache_path and username)",
            "Gets the access token for the app given the code",
            "code - the response code",
            "as a token_info dictionary, otherwise it will be returned\nas a string.",
            "Gets the URL to use to authorize this app",
            "Parse the response code in the given response url",
            "url - the response url",
            "Bases: SpotifyBaseException",
            "Error during Auth Code or Implicit Grant flow",
            "Bases: SpotifyAuthBase",
            "Implements PKCE Authorization Flow for client apps",
            "This auth manager enables user and non-user endpoints with only\na client ID, redirect URI, and username. When the app requests\nan access token for the first time, the user is prompted to\nauthorize the new client app. After authorizing the app, the client\napp is then given both access and refresh tokens. This is the\npreferred way of authorizing a mobile/desktop client.",
            "Creates Auth Manager with the PKCE Auth flow.",
            "client_id: Must be supplied or set as environment variable",
            "redirect_uri: Must be supplied or set as environment variable",
            "state: Optional, no verification is performed",
            "e.g, “playlist-read-private,playlist-read-collaborative”",
            "(takes precedence over username)",
            "(will set cache_path to .cache-{username})",
            "proxies: Optional, proxy for the requests library to route through",
            "a given number of seconds",
            "requests_session: A Requests session",
            "authorize a user",
            "getting and saving cached authorization tokens.\nOptional, will otherwise use CacheFileHandler.\n(takes precedence over cache_path and username)",
            "Gets the access token for the app",
            "If the code is not given and no cached token is used, an\nauthentication window will be shown to the user to get a new\ncode.",
            "code - the response code from authentication",
            "before requesting a new token",
            "Gets the URL to use to authorize this app",
            "Parse the response code in the given response url",
            "url - the response url",
            "Bases: SpotifyOauthError",
            "The state sent and state received were different"
        ],
        "code": [
            "SpotifyAuthBase",
            "SpotifyBaseException",
            "SpotifyAuthBase",
            "SpotifyOauthError"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "util Module",
        "content": [],
        "code": [
            "util"
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Support",
        "content": [
            "You can ask questions about Spotipy on Stack Overflow.   Don’t forget to add the\nSpotipy tag, and any other relevant tags as well, before posting.",
            "http://stackoverflow.com/questions/ask",
            "If you think you’ve found a bug, let us know at\nSpotipy Issues"
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Contribute",
        "content": [
            "If you are a developer with Python experience, and you would like to contribute to Spotipy, please\nbe sure to follow the guidelines listed below:",
            "export SPOTIPY_CLIENT_ID=client_id_here\nexport SPOTIPY_CLIENT_SECRET=client_secret_here\nexport SPOTIPY_CLIENT_USERNAME=client_username_here # This is actually an id not spotify display name\nexport SPOTIPY_REDIRECT_URI=http://127.0.0.1:8080 # Make url is set in app you created to get your ID and SECRET",
            "$ virtualenv –python=python3.12 env\n(env) $ pip install –user -e .\n(env) $ python -m unittest discover -v tests",
            "Lint",
            "pip install autopep8\nautopep8 –in-place –aggressive –recursive .",
            "pip install flake8\nflake8 .",
            "pip install isort\nisort . -c -v",
            "Publishing (by maintainer)",
            "Bump version in setup.py",
            "Bump and date changelog",
            "Add to changelog:",
            "## Unreleased",
            "// Add your changes here and then delete this line",
            "Commit changes",
            "Package to pypi:",
            "python setup.py sdist bdist_wheel\npython3 setup.py sdist bdist_wheel\ntwine check dist/*\ntwine upload –repository-url https://upload.pypi.org/legacy/ –skip-existing dist/.(whl|gz|zip)~dist/*linux.whl",
            "Create github release https://github.com/plamere/spotipy/releases with the changelog content for the version and a short name that describes the main addition",
            "Build the documentation again to ensure it’s on the latest version",
            "Changelog",
            "Don’t forget to add a short description of your change in the CHANGELOG!"
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "License",
        "content": [
            "(Taken from https://github.com/plamere/spotipy/blob/master/LICENSE.md):"
        ],
        "code": [
            "MIT License\nCopyright (c) 2021 Paul Lamere\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        ],
        "url": "https://spotipy.readthedocs.org/"
    },
    {
        "title": "Indices and tables",
        "content": [
            "Index",
            "Module Index",
            "Search Page",
            "© Copyright 2014, Paul Lamere."
        ],
        "code": [],
        "url": "https://spotipy.readthedocs.org/"
    }
]