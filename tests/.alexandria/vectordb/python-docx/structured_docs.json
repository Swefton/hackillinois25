[
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/settings.html"
    },
    {
        "title": "Document Settings objects¶",
        "content": [
            "Provides access to document-level settings for a document.",
            "Accessed using the Document.settings property.",
            "The lxml element proxied by this object.",
            "True if this document has distinct odd and even page headers and footers.",
            "Read/write.",
            "Document objects",
            "Style-related objects"
        ],
        "code": [
            "Settings",
            "docx.settings.",
            "Settings",
            "Document.settings",
            "element",
            "odd_and_even_pages_header_footer"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/settings.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/settings.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/settings.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/settings.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/section.html"
    },
    {
        "title": "Section objects¶",
        "content": [
            "Provides access to section properties such as margins and page orientation."
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/section.html"
    },
    {
        "title": "Sections objects¶",
        "content": [
            "Sequence of Section objects corresponding to the sections in the document.",
            "Supports len(), iteration, and indexed access."
        ],
        "code": [
            "Sections",
            "docx.section.",
            "Sections",
            "Section",
            "len()"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/section.html"
    },
    {
        "title": "Section objects¶",
        "content": [
            "Document section, providing access to section and page setup settings.",
            "Also provides access to headers and footers.",
            "Read/write. Bottom margin for pages in this section, in EMU.",
            "None when no bottom margin has been specified. Assigning None removes any\nbottom-margin setting.",
            "True if this section displays a distinct first-page header and footer.",
            "Read/write. The definition of the first-page header and footer are accessed\nusing first_page_header and first_page_footer respectively.",
            "_Footer object defining footer content for even pages.",
            "The content of this footer definition is ignored unless the document setting\nodd_and_even_pages_header_footer is set True.",
            "_Header object defining header content for even pages.",
            "The content of this header definition is ignored unless the document setting\nodd_and_even_pages_header_footer is set True.",
            "_Footer object defining footer content for the first page of this section.",
            "The content of this footer definition is ignored unless the property\ndifferent_first_page_header_footer is set True.",
            "_Header object defining header content for the first page of this section.",
            "The content of this header definition is ignored unless the property\ndifferent_first_page_header_footer is set True.",
            "_Footer object representing default page footer for this section.",
            "The default footer is used for odd-numbered pages when separate odd/even footers\nare enabled. It is used for both odd and even-numbered pages otherwise.",
            "Distance from bottom edge of page to bottom edge of the footer.",
            "Read/write. None if no setting is present in the XML.",
            "Length object representing page gutter size in English Metric Units.",
            "Read/write. The page gutter is extra spacing added to the inner margin to\nensure even margins after page binding. Generally only used in book-bound\ndocuments with double-sided and facing pages.",
            "This setting applies to all pages in this section.",
            "_Header object representing default page header for this section.",
            "The default header is used for odd-numbered pages when separate odd/even headers\nare enabled. It is used for both odd and even-numbered pages otherwise.",
            "Distance from top edge of page to top edge of header.",
            "Read/write. None if no setting is present in the XML. Assigning None causes\ndefault value to be used.",
            "Generate each Paragraph or Table object in this section.",
            "Items appear in document order.",
            "Length object representing the left margin for all pages in this section in\nEnglish Metric Units.",
            "WD_ORIENTATION member specifying page orientation for this section.",
            "One of WD_ORIENT.PORTRAIT or WD_ORIENT.LANDSCAPE.",
            "Total page height used for this section.",
            "This value is inclusive of all edge spacing values such as margins.",
            "Page orientation is taken into account, so for example, its expected value\nwould be Inches(8.5) for letter-sized paper when orientation is landscape.",
            "Total page width used for this section.",
            "This value is like “paper size” and includes all edge spacing values such as\nmargins.",
            "Page orientation is taken into account, so for example, its expected value\nwould be Inches(11) for letter-sized paper when orientation is landscape.",
            "Length object representing the right margin for all pages in this section\nin English Metric Units.",
            "Type of page-break (if any) inserted at the start of this section.",
            "For exmple, WD_SECTION_START.ODD_PAGE if the section should begin on the\nnext odd page, possibly inserting two page-breaks instead of one.",
            "Length object representing the top margin for all pages in this section in\nEnglish Metric Units."
        ],
        "code": [
            "Section",
            "docx.section.",
            "Section",
            "bottom_margin",
            "None",
            "different_first_page_header_footer",
            "first_page_header",
            "first_page_footer",
            "even_page_footer",
            "_Footer",
            "odd_and_even_pages_header_footer",
            "even_page_header",
            "_Header",
            "odd_and_even_pages_header_footer",
            "first_page_footer",
            "_Footer",
            "different_first_page_header_footer",
            "first_page_header",
            "_Header",
            "different_first_page_header_footer",
            "footer",
            "_Footer",
            "footer_distance",
            "None",
            "gutter",
            "Length",
            "header",
            "_Header",
            "header_distance",
            "None",
            "None",
            "iter_inner_content",
            "left_margin",
            "Length",
            "orientation",
            "WD_ORIENT.PORTRAIT",
            "WD_ORIENT.LANDSCAPE",
            "page_height",
            "Inches(8.5)",
            "page_width",
            "Inches(11)",
            "right_margin",
            "Length",
            "start_type",
            "WD_SECTION_START.ODD_PAGE",
            "top_margin",
            "Length"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/section.html"
    },
    {
        "title": "_Header and _Footer objects¶",
        "content": [
            "Page header, used for all three types (default, even-page, and first-page).",
            "Note that, like a document or table cell, a header must contain a minimum of one\nparagraph and a new or otherwise “empty” header contains a single empty paragraph.\nThis first paragraph can be accessed as header.paragraphs[0] for purposes of\nadding content to it. Using add_paragraph() by itself to add content will\nleave an empty paragraph above the newly added one.",
            "Return paragraph newly added to the end of the content in this container.",
            "The paragraph has text in a single run if present, and is given paragraph\nstyle style.",
            "If style is None, no paragraph style is applied, which has the same effect\nas applying the ‘Normal’ style.",
            "Return table of width having rows rows and cols columns.",
            "The table is appended appended at the end of the content in this container.",
            "width is evenly distributed between the table columns.",
            "True if this header/footer uses the definition from the prior section.",
            "False if this header/footer has an explicit definition.",
            "Assigning True to this property removes the header/footer definition for\nthis section, causing it to “inherit” the corresponding definition of the prior\nsection. Assigning False causes a new, empty definition to be added for this\nsection, but only if no definition is already present.",
            "Generate each Paragraph or Table in this container in document order.",
            "A list containing the paragraphs in this container, in document order.",
            "Read-only.",
            "A list containing the tables in this container, in document order.",
            "Read-only.",
            "Page footer, used for all three types (default, even-page, and first-page).",
            "Note that, like a document or table cell, a footer must contain a minimum of one\nparagraph and a new or otherwise “empty” footer contains a single empty paragraph.\nThis first paragraph can be accessed as footer.paragraphs[0] for purposes of\nadding content to it. Using add_paragraph() by itself to add content will\nleave an empty paragraph above the newly added one.",
            "Return paragraph newly added to the end of the content in this container.",
            "The paragraph has text in a single run if present, and is given paragraph\nstyle style.",
            "If style is None, no paragraph style is applied, which has the same effect\nas applying the ‘Normal’ style.",
            "Return table of width having rows rows and cols columns.",
            "The table is appended appended at the end of the content in this container.",
            "width is evenly distributed between the table columns.",
            "True if this header/footer uses the definition from the prior section.",
            "False if this header/footer has an explicit definition.",
            "Assigning True to this property removes the header/footer definition for\nthis section, causing it to “inherit” the corresponding definition of the prior\nsection. Assigning False causes a new, empty definition to be added for this\nsection, but only if no definition is already present.",
            "Generate each Paragraph or Table in this container in document order.",
            "A list containing the paragraphs in this container, in document order.",
            "Read-only.",
            "A list containing the tables in this container, in document order.",
            "Read-only."
        ],
        "code": [
            "_Header",
            "_Footer",
            "docx.section.",
            "_Header",
            "add_paragraph()",
            "add_paragraph",
            "None",
            "add_table",
            "is_linked_to_previous",
            "True",
            "False",
            "True",
            "False",
            "iter_inner_content",
            "paragraphs",
            "tables",
            "docx.section.",
            "_Footer",
            "add_paragraph()",
            "add_paragraph",
            "None",
            "add_table",
            "is_linked_to_previous",
            "True",
            "False",
            "True",
            "False",
            "iter_inner_content",
            "paragraphs",
            "tables"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/section.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Table objects",
            "Shape-related objects"
        ],
        "code": [
            "Sections",
            "Section",
            "_Header",
            "_Footer"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/section.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/section.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/section.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/section.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/table.html"
    },
    {
        "title": "Source code for docx.table",
        "content": [],
        "code": [
            "\"\"\"The |Table| object and related proxy classes.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Iterator, cast, overload\n\nfrom typing_extensions import TypeAlias\n\nfrom docx.blkcntnr import BlockItemContainer\nfrom docx.enum.style import WD_STYLE_TYPE\nfrom docx.enum.table import WD_CELL_VERTICAL_ALIGNMENT\nfrom docx.oxml.simpletypes import ST_Merge\nfrom docx.oxml.table import CT_TblGridCol\nfrom docx.shared import Inches, Parented, StoryChild, lazyproperty\n\nif TYPE_CHECKING:\n    import docx.types as t\n    from docx.enum.table import WD_ROW_HEIGHT_RULE, WD_TABLE_ALIGNMENT, WD_TABLE_DIRECTION\n    from docx.oxml.table import CT_Row, CT_Tbl, CT_TblPr, CT_Tc\n    from docx.shared import Length\n    from docx.styles.style import (\n        ParagraphStyle,\n        _TableStyle,  # pyright: ignore[reportPrivateUsage]\n    )\n\nTableParent: TypeAlias = \"Table | _Columns | _Rows\"\n\n\n[docs]class Table(StoryChild):\n    \"\"\"Proxy class for a WordprocessingML ``<w:tbl>`` element.\"\"\"\n\n    def __init__(self, tbl: CT_Tbl, parent: t.ProvidesStoryPart):\n        super(Table, self).__init__(parent)\n        self._element = tbl\n        self._tbl = tbl\n\n[docs]    def add_column(self, width: Length):\n        \"\"\"Return a |_Column| object of `width`, newly added rightmost to the table.\"\"\"\n        tblGrid = self._tbl.tblGrid\n        gridCol = tblGrid.add_gridCol()\n        gridCol.w = width\n        for tr in self._tbl.tr_lst:\n            tc = tr.add_tc()\n            tc.width = width\n        return _Column(gridCol, self)\n\n[docs]    def add_row(self):\n        \"\"\"Return a |_Row| instance, newly added bottom-most to the table.\"\"\"\n        tbl = self._tbl\n        tr = tbl.add_tr()\n        for gridCol in tbl.tblGrid.gridCol_lst:\n            tc = tr.add_tc()\n            if gridCol.w is not None:\n                tc.width = gridCol.w\n        return _Row(tr, self)\n\n    @property\n    def alignment(self) -> WD_TABLE_ALIGNMENT | None:\n        \"\"\"Read/write.\n\n        A member of :ref:`WdRowAlignment` or None, specifying the positioning of this\n        table between the page margins. |None| if no setting is specified, causing the\n        effective value to be inherited from the style hierarchy.\n        \"\"\"\n        return self._tblPr.alignment\n\n    @alignment.setter\n    def alignment(self, value: WD_TABLE_ALIGNMENT | None):\n        self._tblPr.alignment = value\n\n    @property\n    def autofit(self) -> bool:\n        \"\"\"|True| if column widths can be automatically adjusted to improve the fit of\n        cell contents.\n\n        |False| if table layout is fixed. Column widths are adjusted in either case if\n        total column width exceeds page width. Read/write boolean.\n        \"\"\"\n        return self._tblPr.autofit\n\n    @autofit.setter\n    def autofit(self, value: bool):\n        self._tblPr.autofit = value\n\n[docs]    def cell(self, row_idx: int, col_idx: int) -> _Cell:\n        \"\"\"|_Cell| at `row_idx`, `col_idx` intersection.\n\n        (0, 0) is the top, left-most cell.\n        \"\"\"\n        cell_idx = col_idx + (row_idx * self._column_count)\n        return self._cells[cell_idx]\n\n[docs]    def column_cells(self, column_idx: int) -> list[_Cell]:\n        \"\"\"Sequence of cells in the column at `column_idx` in this table.\"\"\"\n        cells = self._cells\n        idxs = range(column_idx, len(cells), self._column_count)\n        return [cells[idx] for idx in idxs]\n\n[docs]    @lazyproperty\n    def columns(self):\n        \"\"\"|_Columns| instance representing the sequence of columns in this table.\"\"\"\n        return _Columns(self._tbl, self)\n\n[docs]    def row_cells(self, row_idx: int) -> list[_Cell]:\n        \"\"\"DEPRECATED: Use `table.rows[row_idx].cells` instead.\n\n        Sequence of cells in the row at `row_idx` in this table.\n        \"\"\"\n        column_count = self._column_count\n        start = row_idx * column_count\n        end = start + column_count\n        return self._cells[start:end]\n\n[docs]    @lazyproperty\n    def rows(self) -> _Rows:\n        \"\"\"|_Rows| instance containing the sequence of rows in this table.\"\"\"\n        return _Rows(self._tbl, self)\n\n    @property\n    def style(self) -> _TableStyle | None:\n        \"\"\"|_TableStyle| object representing the style applied to this table.\n\n        Read/write. The default table style for the document (often `Normal Table`) is\n        returned if the table has no directly-applied style. Assigning |None| to this\n        property removes any directly-applied table style causing it to inherit the\n        default table style of the document.\n\n        Note that the style name of a table style differs slightly from that displayed\n        in the user interface; a hyphen, if it appears, must be removed. For example,\n        `Light Shading - Accent 1` becomes `Light Shading Accent 1`.\n        \"\"\"\n        style_id = self._tbl.tblStyle_val\n        return cast(\"_TableStyle | None\", self.part.get_style(style_id, WD_STYLE_TYPE.TABLE))\n\n    @style.setter\n    def style(self, style_or_name: _TableStyle | str | None):\n        style_id = self.part.get_style_id(style_or_name, WD_STYLE_TYPE.TABLE)\n        self._tbl.tblStyle_val = style_id\n\n    @property\n    def table(self):\n        \"\"\"Provide child objects with reference to the |Table| object they belong to,\n        without them having to know their direct parent is a |Table| object.\n\n        This is the terminus of a series of `parent._table` calls from an arbitrary\n        child through its ancestors.\n        \"\"\"\n        return self\n\n    @property\n    def table_direction(self) -> WD_TABLE_DIRECTION | None:\n        \"\"\"Member of :ref:`WdTableDirection` indicating cell-ordering direction.\n\n        For example: `WD_TABLE_DIRECTION.LTR`. |None| indicates the value is inherited\n        from the style hierarchy.\n        \"\"\"\n        return cast(\"WD_TABLE_DIRECTION | None\", self._tbl.bidiVisual_val)\n\n    @table_direction.setter\n    def table_direction(self, value: WD_TABLE_DIRECTION | None):\n        self._element.bidiVisual_val = value\n\n    @property\n    def _cells(self) -> list[_Cell]:\n        \"\"\"A sequence of |_Cell| objects, one for each cell of the layout grid.\n\n        If the table contains a span, one or more |_Cell| object references are\n        repeated.\n        \"\"\"\n        col_count = self._column_count\n        cells: list[_Cell] = []\n        for tc in self._tbl.iter_tcs():\n            for grid_span_idx in range(tc.grid_span):\n                if tc.vMerge == ST_Merge.CONTINUE:\n                    cells.append(cells[-col_count])\n                elif grid_span_idx > 0:\n                    cells.append(cells[-1])\n                else:\n                    cells.append(_Cell(tc, self))\n        return cells\n\n    @property\n    def _column_count(self):\n        \"\"\"The number of grid columns in this table.\"\"\"\n        return self._tbl.col_count\n\n    @property\n    def _tblPr(self) -> CT_TblPr:\n        return self._tbl.tblPr\n\n\n[docs]class _Cell(BlockItemContainer):\n    \"\"\"Table cell.\"\"\"\n\n    def __init__(self, tc: CT_Tc, parent: TableParent):\n        super(_Cell, self).__init__(tc, cast(\"t.ProvidesStoryPart\", parent))\n        self._parent = parent\n        self._tc = self._element = tc\n\n[docs]    def add_paragraph(self, text: str = \"\", style: str | ParagraphStyle | None = None):\n        \"\"\"Return a paragraph newly added to the end of the content in this cell.\n\n        If present, `text` is added to the paragraph in a single run. If specified, the\n        paragraph style `style` is applied. If `style` is not specified or is |None|,\n        the result is as though the 'Normal' style was applied. Note that the formatting\n        of text in a cell can be influenced by the table style. `text` can contain tab\n        (``\\\\t``) characters, which are converted to the appropriate XML form for a tab.\n        `text` can also include newline (``\\\\n``) or carriage return (``\\\\r``)\n        characters, each of which is converted to a line break.\n        \"\"\"\n        return super(_Cell, self).add_paragraph(text, style)\n\n[docs]    def add_table(  # pyright: ignore[reportIncompatibleMethodOverride]\n        self, rows: int, cols: int\n    ) -> Table:\n        \"\"\"Return a table newly added to this cell after any existing cell content.\n\n        The new table will have `rows` rows and `cols` columns.\n\n        An empty paragraph is added after the table because Word requires a paragraph\n        element as the last element in every cell.\n        \"\"\"\n        width = self.width if self.width is not None else Inches(1)\n        table = super(_Cell, self).add_table(rows, cols, width)\n        self.add_paragraph()\n        return table\n\n    @property\n    def grid_span(self) -> int:\n        \"\"\"Number of layout-grid cells this cell spans horizontally.\n\n        A \"normal\" cell has a grid-span of 1. A horizontally merged cell has a grid-span of 2 or\n        more.\n        \"\"\"\n        return self._tc.grid_span\n\n[docs]    def merge(self, other_cell: _Cell):\n        \"\"\"Return a merged cell created by spanning the rectangular region having this\n        cell and `other_cell` as diagonal corners.\n\n        Raises |InvalidSpanError| if the cells do not define a rectangular region.\n        \"\"\"\n        tc, tc_2 = self._tc, other_cell._tc\n        merged_tc = tc.merge(tc_2)\n        return _Cell(merged_tc, self._parent)\n\n    @property\n    def paragraphs(self):\n        \"\"\"List of paragraphs in the cell.\n\n        A table cell is required to contain at least one block-level element and end\n        with a paragraph. By default, a new cell contains a single paragraph. Read-only\n        \"\"\"\n        return super(_Cell, self).paragraphs\n\n    @property\n    def tables(self):\n        \"\"\"List of tables in the cell, in the order they appear.\n\n        Read-only.\n        \"\"\"\n        return super(_Cell, self).tables\n\n    @property\n    def text(self) -> str:\n        \"\"\"The entire contents of this cell as a string of text.\n\n        Assigning a string to this property replaces all existing content with a single\n        paragraph containing the assigned text in a single run.\n        \"\"\"\n        return \"\\n\".join(p.text for p in self.paragraphs)\n\n    @text.setter\n    def text(self, text: str):\n        \"\"\"Write-only.\n\n        Set entire contents of cell to the string `text`. Any existing content or\n        revisions are replaced.\n        \"\"\"\n        tc = self._tc\n        tc.clear_content()\n        p = tc.add_p()\n        r = p.add_r()\n        r.text = text\n\n    @property\n    def vertical_alignment(self):\n        \"\"\"Member of :ref:`WdCellVerticalAlignment` or None.\n\n        A value of |None| indicates vertical alignment for this cell is inherited.\n        Assigning |None| causes any explicitly defined vertical alignment to be removed,\n        restoring inheritance.\n        \"\"\"\n        tcPr = self._element.tcPr\n        if tcPr is None:\n            return None\n        return tcPr.vAlign_val\n\n    @vertical_alignment.setter\n    def vertical_alignment(self, value: WD_CELL_VERTICAL_ALIGNMENT | None):\n        tcPr = self._element.get_or_add_tcPr()\n        tcPr.vAlign_val = value\n\n    @property\n    def width(self):\n        \"\"\"The width of this cell in EMU, or |None| if no explicit width is set.\"\"\"\n        return self._tc.width\n\n    @width.setter\n    def width(self, value: Length):\n        self._tc.width = value\n\n\n[docs]class _Column(Parented):\n    \"\"\"Table column.\"\"\"\n\n    def __init__(self, gridCol: CT_TblGridCol, parent: TableParent):\n        super(_Column, self).__init__(parent)\n        self._parent = parent\n        self._gridCol = gridCol\n\n    @property\n    def cells(self) -> tuple[_Cell, ...]:\n        \"\"\"Sequence of |_Cell| instances corresponding to cells in this column.\"\"\"\n        return tuple(self.table.column_cells(self._index))\n\n    @property\n    def table(self) -> Table:\n        \"\"\"Reference to the |Table| object this column belongs to.\"\"\"\n        return self._parent.table\n\n    @property\n    def width(self) -> Length | None:\n        \"\"\"The width of this column in EMU, or |None| if no explicit width is set.\"\"\"\n        return self._gridCol.w\n\n    @width.setter\n    def width(self, value: Length | None):\n        self._gridCol.w = value\n\n    @property\n    def _index(self):\n        \"\"\"Index of this column in its table, starting from zero.\"\"\"\n        return self._gridCol.gridCol_idx\n\n\n[docs]class _Columns(Parented):\n    \"\"\"Sequence of |_Column| instances corresponding to the columns in a table.\n\n    Supports ``len()``, iteration and indexed access.\n    \"\"\"\n\n    def __init__(self, tbl: CT_Tbl, parent: TableParent):\n        super(_Columns, self).__init__(parent)\n        self._parent = parent\n        self._tbl = tbl\n\n    def __getitem__(self, idx: int):\n        \"\"\"Provide indexed access, e.g. 'columns[0]'.\"\"\"\n        try:\n            gridCol = self._gridCol_lst[idx]\n        except IndexError:\n            msg = \"column index [%d] is out of range\" % idx\n            raise IndexError(msg)\n        return _Column(gridCol, self)\n\n    def __iter__(self):\n        for gridCol in self._gridCol_lst:\n            yield _Column(gridCol, self)\n\n    def __len__(self):\n        return len(self._gridCol_lst)\n\n    @property\n    def table(self) -> Table:\n        \"\"\"Reference to the |Table| object this column collection belongs to.\"\"\"\n        return self._parent.table\n\n    @property\n    def _gridCol_lst(self):\n        \"\"\"Sequence containing ``<w:gridCol>`` elements for this table, each\n        representing a table column.\"\"\"\n        tblGrid = self._tbl.tblGrid\n        return tblGrid.gridCol_lst\n\n\n[docs]class _Row(Parented):\n    \"\"\"Table row.\"\"\"\n\n    def __init__(self, tr: CT_Row, parent: TableParent):\n        super(_Row, self).__init__(parent)\n        self._parent = parent\n        self._tr = self._element = tr\n\n    @property\n    def cells(self) -> tuple[_Cell, ...]:\n        \"\"\"Sequence of |_Cell| instances corresponding to cells in this row.\n\n        Note that Word allows table rows to start later than the first column and end before the\n        last column.\n\n        - Only cells actually present are included in the return value.\n        - This implies the length of this cell sequence may differ between rows of the same table.\n        - If you are reading the cells from each row to form a rectangular \"matrix\" data structure\n          of the table cell values, you will need to account for empty leading and/or trailing\n          layout-grid positions using `.grid_cols_before` and `.grid_cols_after`.\n\n        \"\"\"\n\n        def iter_tc_cells(tc: CT_Tc) -> Iterator[_Cell]:\n            \"\"\"Generate a cell object for each layout-grid cell in `tc`.\n\n            In particular, a `<w:tc>` element with a horizontal \"span\" with generate the same cell\n            multiple times, one for each grid-cell being spanned. This approximates a row in a\n            \"uniform\" table, where each row has a cell for each column in the table.\n            \"\"\"\n            # -- a cell comprising the second or later row of a vertical span is indicated by\n            # -- tc.vMerge=\"continue\" (the default value of the `w:vMerge` attribute, when it is\n            # -- present in the XML). The `w:tc` element at the same grid-offset in the prior row\n            # -- is guaranteed to be the same width (gridSpan). So we can delegate content\n            # -- discovery to that prior-row `w:tc` element (recursively) until we arrive at the\n            # -- \"root\" cell -- for the vertical span.\n            if tc.vMerge == \"continue\":\n                yield from iter_tc_cells(tc._tc_above)  # pyright: ignore[reportPrivateUsage]\n                return\n\n            # -- Otherwise, vMerge is either \"restart\" or None, meaning this `tc` holds the actual\n            # -- content of the cell (whether it is vertically merged or not).\n            cell = _Cell(tc, self.table)\n            for _ in range(tc.grid_span):\n                yield cell\n\n        def _iter_row_cells() -> Iterator[_Cell]:\n            \"\"\"Generate `_Cell` instance for each populated layout-grid cell in this row.\"\"\"\n            for tc in self._tr.tc_lst:\n                yield from iter_tc_cells(tc)\n\n        return tuple(_iter_row_cells())\n\n    @property\n    def grid_cols_after(self) -> int:\n        \"\"\"Count of unpopulated grid-columns after the last cell in this row.\n\n        Word allows a row to \"end early\", meaning that one or more cells are not present at the\n        end of that row.\n\n        Note these are not simply \"empty\" cells. The renderer reads this value and \"skips\" this\n        many columns after drawing the last cell.\n\n        Note this also implies that not all rows are guaranteed to have the same number of cells,\n        e.g. `_Row.cells` could have length `n` for one row and `n - m` for the next row in the same\n        table. Visually this appears as a column (at the beginning or end, not in the middle) with\n        one or more cells missing.\n        \"\"\"\n        return self._tr.grid_after\n\n    @property\n    def grid_cols_before(self) -> int:\n        \"\"\"Count of unpopulated grid-columns before the first cell in this row.\n\n        Word allows a row to \"start late\", meaning that one or more cells are not present at the\n        beginning of that row.\n\n        Note these are not simply \"empty\" cells. The renderer reads this value and skips forward to\n        the table layout-grid position of the first cell in this row; the renderer \"skips\" this many\n        columns before drawing the first cell.\n\n        Note this also implies that not all rows are guaranteed to have the same number of cells,\n        e.g. `_Row.cells` could have length `n` for one row and `n - m` for the next row in the same\n        table.\n        \"\"\"\n        return self._tr.grid_before\n\n    @property\n    def height(self) -> Length | None:\n        \"\"\"Return a |Length| object representing the height of this cell, or |None| if\n        no explicit height is set.\"\"\"\n        return self._tr.trHeight_val\n\n    @height.setter\n    def height(self, value: Length | None):\n        self._tr.trHeight_val = value\n\n    @property\n    def height_rule(self) -> WD_ROW_HEIGHT_RULE | None:\n        \"\"\"Return the height rule of this cell as a member of the :ref:`WdRowHeightRule`.\n\n        This value is |None| if no explicit height_rule is set.\n        \"\"\"\n        return self._tr.trHeight_hRule\n\n    @height_rule.setter\n    def height_rule(self, value: WD_ROW_HEIGHT_RULE | None):\n        self._tr.trHeight_hRule = value\n\n    @property\n    def table(self) -> Table:\n        \"\"\"Reference to the |Table| object this row belongs to.\"\"\"\n        return self._parent.table\n\n    @property\n    def _index(self) -> int:\n        \"\"\"Index of this row in its table, starting from zero.\"\"\"\n        return self._tr.tr_idx\n\n\n[docs]class _Rows(Parented):\n    \"\"\"Sequence of |_Row| objects corresponding to the rows in a table.\n\n    Supports ``len()``, iteration, indexed access, and slicing.\n    \"\"\"\n\n    def __init__(self, tbl: CT_Tbl, parent: TableParent):\n        super(_Rows, self).__init__(parent)\n        self._parent = parent\n        self._tbl = tbl\n\n    @overload\n    def __getitem__(self, idx: int) -> _Row: ...\n\n    @overload\n    def __getitem__(self, idx: slice) -> list[_Row]: ...\n\n    def __getitem__(self, idx: int | slice) -> _Row | list[_Row]:\n        \"\"\"Provide indexed access, (e.g. `rows[0]` or `rows[1:3]`)\"\"\"\n        return list(self)[idx]\n\n    def __iter__(self):\n        return (_Row(tr, self) for tr in self._tbl.tr_lst)\n\n    def __len__(self):\n        return len(self._tbl.tr_lst)\n\n    @property\n    def table(self) -> Table:\n        \"\"\"Reference to the |Table| object this row collection belongs to.\"\"\"\n        return self._parent.table"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/table.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/table.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/table.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/table.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdLineSpacing.html"
    },
    {
        "title": "WD_LINE_SPACING¶",
        "content": [
            "Specifies a line spacing format to be applied to a paragraph.",
            "Example:",
            "WD_COLOR_INDEX",
            "WD_ORIENTATION"
        ],
        "code": [
            "WD_LINE_SPACING",
            "from docx.enum.text import WD_LINE_SPACING\n\nparagraph = document.add_paragraph()\nparagraph.paragraph_format.line_spacing_rule = WD_LINE_SPACING.EXACTLY",
            "WD_COLOR_INDEX",
            "WD_ORIENTATION"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdLineSpacing.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdLineSpacing.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdLineSpacing.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdLineSpacing.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/latent.html"
    },
    {
        "title": "Source code for docx.styles.latent",
        "content": [],
        "code": [
            "\"\"\"Latent style-related objects.\"\"\"\n\nfrom docx.shared import ElementProxy\nfrom docx.styles import BabelFish\n\n\n[docs]class LatentStyles(ElementProxy):\n    \"\"\"Provides access to the default behaviors for latent styles in this document and\n    to the collection of |_LatentStyle| objects that define overrides of those defaults\n    for a particular named latent style.\"\"\"\n\n    def __getitem__(self, key):\n        \"\"\"Enables dictionary-style access to a latent style by name.\"\"\"\n        style_name = BabelFish.ui2internal(key)\n        lsdException = self._element.get_by_name(style_name)\n        if lsdException is None:\n            raise KeyError(\"no latent style with name '%s'\" % key)\n        return _LatentStyle(lsdException)\n\n    def __iter__(self):\n        return (_LatentStyle(ls) for ls in self._element.lsdException_lst)\n\n    def __len__(self):\n        return len(self._element.lsdException_lst)\n\n[docs]    def add_latent_style(self, name):\n        \"\"\"Return a newly added |_LatentStyle| object to override the inherited defaults\n        defined in this latent styles object for the built-in style having `name`.\"\"\"\n        lsdException = self._element.add_lsdException()\n        lsdException.name = BabelFish.ui2internal(name)\n        return _LatentStyle(lsdException)\n\n    @property\n    def default_priority(self):\n        \"\"\"Integer between 0 and 99 inclusive specifying the default sort order for\n        latent styles in style lists and the style gallery.\n\n        |None| if no value is assigned, which causes Word to use the default value 99.\n        \"\"\"\n        return self._element.defUIPriority\n\n    @default_priority.setter\n    def default_priority(self, value):\n        self._element.defUIPriority = value\n\n    @property\n    def default_to_hidden(self):\n        \"\"\"Boolean specifying whether the default behavior for latent styles is to be\n        hidden.\n\n        A hidden style does not appear in the recommended list or in the style gallery.\n        \"\"\"\n        return self._element.bool_prop(\"defSemiHidden\")\n\n    @default_to_hidden.setter\n    def default_to_hidden(self, value):\n        self._element.set_bool_prop(\"defSemiHidden\", value)\n\n    @property\n    def default_to_locked(self):\n        \"\"\"Boolean specifying whether the default behavior for latent styles is to be\n        locked.\n\n        A locked style does not appear in the styles panel or the style gallery and\n        cannot be applied to document content. This behavior is only active when\n        formatting protection is turned on for the document (via the Developer menu).\n        \"\"\"\n        return self._element.bool_prop(\"defLockedState\")\n\n    @default_to_locked.setter\n    def default_to_locked(self, value):\n        self._element.set_bool_prop(\"defLockedState\", value)\n\n    @property\n    def default_to_quick_style(self):\n        \"\"\"Boolean specifying whether the default behavior for latent styles is to\n        appear in the style gallery when not hidden.\"\"\"\n        return self._element.bool_prop(\"defQFormat\")\n\n    @default_to_quick_style.setter\n    def default_to_quick_style(self, value):\n        self._element.set_bool_prop(\"defQFormat\", value)\n\n    @property\n    def default_to_unhide_when_used(self):\n        \"\"\"Boolean specifying whether the default behavior for latent styles is to be\n        unhidden when first applied to content.\"\"\"\n        return self._element.bool_prop(\"defUnhideWhenUsed\")\n\n    @default_to_unhide_when_used.setter\n    def default_to_unhide_when_used(self, value):\n        self._element.set_bool_prop(\"defUnhideWhenUsed\", value)\n\n    @property\n    def load_count(self):\n        \"\"\"Integer specifying the number of built-in styles to initialize to the\n        defaults specified in this |LatentStyles| object.\n\n        |None| if there is no setting in the XML (very uncommon). The default Word 2011\n        template sets this value to 276, accounting for the built-in styles in Word\n        2010.\n        \"\"\"\n        return self._element.count\n\n    @load_count.setter\n    def load_count(self, value):\n        self._element.count = value\n\n\n[docs]class _LatentStyle(ElementProxy):\n    \"\"\"Proxy for an `w:lsdException` element, which specifies display behaviors for a\n    built-in style when no definition for that style is stored yet in the `styles.xml`\n    part.\n\n    The values in this element override the defaults specified in the parent\n    `w:latentStyles` element.\n    \"\"\"\n\n[docs]    def delete(self):\n        \"\"\"Remove this latent style definition such that the defaults defined in the\n        containing |LatentStyles| object provide the effective value for each of its\n        attributes.\n\n        Attempting to access any attributes on this object after calling this method\n        will raise |AttributeError|.\n        \"\"\"\n        self._element.delete()\n        self._element = None\n\n    @property\n    def hidden(self):\n        \"\"\"Tri-state value specifying whether this latent style should appear in the\n        recommended list.\n\n        |None| indicates the effective value is inherited from the parent\n        ``<w:latentStyles>`` element.\n        \"\"\"\n        return self._element.on_off_prop(\"semiHidden\")\n\n    @hidden.setter\n    def hidden(self, value):\n        self._element.set_on_off_prop(\"semiHidden\", value)\n\n    @property\n    def locked(self):\n        \"\"\"Tri-state value specifying whether this latent styles is locked.\n\n        A locked style does not appear in the styles panel or the style gallery and\n        cannot be applied to document content. This behavior is only active when\n        formatting protection is turned on for the document (via the Developer menu).\n        \"\"\"\n        return self._element.on_off_prop(\"locked\")\n\n    @locked.setter\n    def locked(self, value):\n        self._element.set_on_off_prop(\"locked\", value)\n\n    @property\n    def name(self):\n        \"\"\"The name of the built-in style this exception applies to.\"\"\"\n        return BabelFish.internal2ui(self._element.name)\n\n    @property\n    def priority(self):\n        \"\"\"The integer sort key for this latent style in the Word UI.\"\"\"\n        return self._element.uiPriority\n\n    @priority.setter\n    def priority(self, value):\n        self._element.uiPriority = value\n\n    @property\n    def quick_style(self):\n        \"\"\"Tri-state value specifying whether this latent style should appear in the\n        Word styles gallery when not hidden.\n\n        |None| indicates the effective value should be inherited from the default values\n        in its parent |LatentStyles| object.\n        \"\"\"\n        return self._element.on_off_prop(\"qFormat\")\n\n    @quick_style.setter\n    def quick_style(self, value):\n        self._element.set_on_off_prop(\"qFormat\", value)\n\n    @property\n    def unhide_when_used(self):\n        \"\"\"Tri-state value specifying whether this style should have its :attr:`hidden`\n        attribute set |False| the next time the style is applied to content.\n\n        |None| indicates the effective value should be inherited from the default\n        specified by its parent |LatentStyles| object.\n        \"\"\"\n        return self._element.on_off_prop(\"unhideWhenUsed\")\n\n    @unhide_when_used.setter\n    def unhide_when_used(self, value):\n        self._element.set_on_off_prop(\"unhideWhenUsed\", value)"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/latent.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/latent.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/latent.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/latent.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shape.html"
    },
    {
        "title": "Shape-related objects¶",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shape.html"
    },
    {
        "title": "InlineShapes objects¶",
        "content": [
            "Sequence of InlineShape instances, supporting len(), iteration, and indexed access."
        ],
        "code": [
            "InlineShapes",
            "docx.shape.",
            "InlineShapes",
            "InlineShape"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shape.html"
    },
    {
        "title": "InlineShape objects¶",
        "content": [
            "The width and height property of InlineShape provide a length object\nthat is an instance of Length. These instances behave like an int, but also\nhave built-in units conversion properties, e.g.:",
            "Proxy for an <wp:inline> element, representing the container for an inline\ngraphical object.",
            "Read/write.",
            "The display height of this inline shape as an Emu instance.",
            "The type of this inline shape as a member of\ndocx.enum.shape.WD_INLINE_SHAPE, e.g. LINKED_PICTURE.",
            "Read-only.",
            "Read/write.",
            "The display width of this inline shape as an Emu instance."
        ],
        "code": [
            "InlineShape",
            "width",
            "height",
            "InlineShape",
            "Length",
            ">>> inline_shape.height\n914400\n>>> inline_shape.height.inches\n1.0",
            "docx.shape.",
            "InlineShape",
            "<wp:inline>",
            "height",
            "Emu",
            "type",
            "docx.enum.shape.WD_INLINE_SHAPE",
            "LINKED_PICTURE",
            "width",
            "Emu"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shape.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Section objects",
            "DrawingML objects"
        ],
        "code": [
            "InlineShapes",
            "InlineShape"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shape.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shape.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shape.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shape.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "python-docx¶",
        "content": [
            "Release v1.1.2 (Installation)",
            "python-docx is a Python library for creating and updating Microsoft Word\n(.docx) files."
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "What it can do¶",
        "content": [
            "Here’s an example of what python-docx can do:"
        ],
        "code": [
            "python-docx",
            "from docx import Document\nfrom docx.shared import Inches\n\ndocument = Document()\n\ndocument.add_heading('Document Title', 0)\n\np = document.add_paragraph('A plain paragraph having some ')\np.add_run('bold').bold = True\np.add_run(' and some ')\np.add_run('italic.').italic = True\n\ndocument.add_heading('Heading, level 1', level=1)\ndocument.add_paragraph('Intense quote', style='Intense Quote')\n\ndocument.add_paragraph(\n    'first item in unordered list', style='List Bullet'\n)\ndocument.add_paragraph(\n    'first item in ordered list', style='List Number'\n)\n\ndocument.add_picture('monty-truth.png', width=Inches(1.25))\n\nrecords = (\n    (3, '101', 'Spam'),\n    (7, '422', 'Eggs'),\n    (4, '631', 'Spam, spam, eggs, and spam')\n)\n\ntable = document.add_table(rows=1, cols=3)\nhdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'Qty'\nhdr_cells[1].text = 'Id'\nhdr_cells[2].text = 'Desc'\nfor qty, id, desc in records:\n    row_cells = table.add_row().cells\n    row_cells[0].text = str(qty)\n    row_cells[1].text = id\n    row_cells[2].text = desc\n\ndocument.add_page_break()\n\ndocument.save('demo.docx')"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "User Guide¶",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "API Documentation¶",
        "content": [],
        "code": [
            "Document",
            "Document",
            "CoreProperties",
            "Settings",
            "Styles",
            "BaseStyle",
            "CharacterStyle",
            "ParagraphStyle",
            "_TableStyle",
            "_NumberingStyle",
            "LatentStyles",
            "_LatentStyle",
            "Paragraph",
            "ParagraphFormat",
            "Hyperlink",
            "Run",
            "Font",
            "RenderedPageBreak",
            "TabStop",
            "TabStops",
            "Table",
            "_Cell",
            "_Row",
            "_Column",
            "_Rows",
            "_Columns",
            "Sections",
            "Section",
            "_Header",
            "_Footer",
            "InlineShapes",
            "InlineShape",
            "ColorFormat",
            "RGBColor",
            "MSO_COLOR_TYPE",
            "MSO_THEME_COLOR_INDEX",
            "WD_PARAGRAPH_ALIGNMENT",
            "WD_BUILTIN_STYLE",
            "WD_CELL_VERTICAL_ALIGNMENT",
            "WD_COLOR_INDEX",
            "WD_LINE_SPACING",
            "WD_ORIENTATION",
            "WD_TABLE_ALIGNMENT",
            "WD_ROW_HEIGHT_RULE",
            "WD_SECTION_START",
            "WD_STYLE_TYPE",
            "WD_TAB_ALIGNMENT",
            "WD_TAB_LEADER",
            "WD_TABLE_DIRECTION",
            "WD_UNDERLINE"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "Contributor Guide¶",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Installing"
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/pagebreak.html"
    },
    {
        "title": "Source code for docx.text.pagebreak",
        "content": [],
        "code": [
            "\"\"\"Proxy objects related to rendered page-breaks.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom docx.oxml.text.pagebreak import CT_LastRenderedPageBreak\nfrom docx.shared import Parented\n\nif TYPE_CHECKING:\n    import docx.types as t\n    from docx.text.paragraph import Paragraph\n\n\n[docs]class RenderedPageBreak(Parented):\n    \"\"\"A page-break inserted by Word during page-layout for print or display purposes.\n\n    This usually does not correspond to a \"hard\" page-break inserted by the document\n    author, rather just that Word ran out of room on one page and needed to start\n    another. The position of these can change depending on the printer and page-size, as\n    well as margins, etc. They also will change in response to edits, but not until Word\n    loads and saves the document.\n\n    Note these are never inserted by `python-docx` because it has no rendering function.\n    These are generally only useful for text-extraction of existing documents when\n    `python-docx` is being used solely as a document \"reader\".\n\n    NOTE: a rendered page-break can occur within a hyperlink; consider a multi-word\n    hyperlink like \"excellent Wikipedia article on LLMs\" that happens to fall close to\n    the end of the last line on a page such that the page breaks between \"Wikipedia\" and\n    \"article\". In such a \"page-breaks-in-hyperlink\" case, THESE METHODS WILL \"MOVE\" THE\n    PAGE-BREAK to occur after the hyperlink, such that the entire hyperlink appears in\n    the paragraph returned by `.preceding_paragraph_fragment`. While this places the\n    \"tail\" text of the hyperlink on the \"wrong\" page, it avoids having two hyperlinks\n    each with a fragment of the actual text and pointing to the same address.\n    \"\"\"\n\n    def __init__(\n        self,\n        lastRenderedPageBreak: CT_LastRenderedPageBreak,\n        parent: t.ProvidesStoryPart,\n    ):\n        super().__init__(parent)\n        self._element = lastRenderedPageBreak\n        self._lastRenderedPageBreak = lastRenderedPageBreak\n\n    @property\n    def preceding_paragraph_fragment(self) -> Paragraph | None:\n        \"\"\"A \"loose\" paragraph containing the content preceding this page-break.\n\n        Compare `.following_paragraph_fragment` as these two are intended to be used\n        together.\n\n        This value is `None` when no content precedes this page-break. This case is\n        common and occurs whenever a page breaks on an even paragraph boundary.\n        Returning `None` for this case avoids \"inserting\" a non-existent paragraph into\n        the content stream. Note that content can include DrawingML items like images or\n        charts.\n\n        Note the returned paragraph *is divorced from the document body*. Any changes\n        made to it will not be reflected in the document. It is intended to provide a\n        familiar container (`Paragraph`) to interrogate for the content preceding this\n        page-break in the paragraph in which it occured.\n\n        Contains the entire hyperlink when this break occurs within a hyperlink.\n        \"\"\"\n        if self._lastRenderedPageBreak.precedes_all_content:\n            return None\n\n        from docx.text.paragraph import Paragraph\n\n        return Paragraph(self._lastRenderedPageBreak.preceding_fragment_p, self._parent)\n\n    @property\n    def following_paragraph_fragment(self) -> Paragraph | None:\n        \"\"\"A \"loose\" paragraph containing the content following this page-break.\n\n        HAS POTENTIALLY SURPRISING BEHAVIORS so read carefully to be sure this is what\n        you want. This is primarily targeted toward text-extraction use-cases for which\n        precisely associating text with the page it occurs on is important.\n\n        Compare `.preceding_paragraph_fragment` as these two are intended to be used\n        together.\n\n        This value is `None` when no content follows this page-break. This case is\n        unlikely to occur in practice because Word places even-paragraph-boundary\n        page-breaks on the paragraph *following* the page-break. Still, it is possible\n        and must be checked for. Returning `None` for this case avoids \"inserting\" an\n        extra, non-existent paragraph into the content stream. Note that content can\n        include DrawingML items like images or charts, not just text.\n\n        The returned paragraph *is divorced from the document body*. Any changes made to\n        it will not be reflected in the document. It is intended to provide a container\n        (`Paragraph`) with familiar properties and methods that can be used to\n        characterize the paragraph content following a mid-paragraph page-break.\n\n        Contains no portion of the hyperlink when this break occurs within a hyperlink.\n        \"\"\"\n        if self._lastRenderedPageBreak.follows_all_content:\n            return None\n\n        from docx.text.paragraph import Paragraph\n\n        return Paragraph(self._lastRenderedPageBreak.following_fragment_p, self._parent)"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/pagebreak.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/pagebreak.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/pagebreak.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/pagebreak.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/dml/color.html"
    },
    {
        "title": "Source code for docx.dml.color",
        "content": [],
        "code": [
            "\"\"\"DrawingML objects related to color, ColorFormat being the most prominent.\"\"\"\n\nfrom ..enum.dml import MSO_COLOR_TYPE\nfrom ..oxml.simpletypes import ST_HexColorAuto\nfrom ..shared import ElementProxy\n\n\n[docs]class ColorFormat(ElementProxy):\n    \"\"\"Provides access to color settings such as RGB color, theme color, and luminance\n    adjustments.\"\"\"\n\n    def __init__(self, rPr_parent):\n        super(ColorFormat, self).__init__(rPr_parent)\n\n    @property\n    def rgb(self):\n        \"\"\"An |RGBColor| value or |None| if no RGB color is specified.\n\n        When :attr:`type` is `MSO_COLOR_TYPE.RGB`, the value of this property will\n        always be an |RGBColor| value. It may also be an |RGBColor| value if\n        :attr:`type` is `MSO_COLOR_TYPE.THEME`, as Word writes the current value of a\n        theme color when one is assigned. In that case, the RGB value should be\n        interpreted as no more than a good guess however, as the theme color takes\n        precedence at rendering time. Its value is |None| whenever :attr:`type` is\n        either |None| or `MSO_COLOR_TYPE.AUTO`.\n\n        Assigning an |RGBColor| value causes :attr:`type` to become `MSO_COLOR_TYPE.RGB`\n        and any theme color is removed. Assigning |None| causes any color to be removed\n        such that the effective color is inherited from the style hierarchy.\n        \"\"\"\n        color = self._color\n        if color is None:\n            return None\n        if color.val == ST_HexColorAuto.AUTO:\n            return None\n        return color.val\n\n    @rgb.setter\n    def rgb(self, value):\n        if value is None and self._color is None:\n            return\n        rPr = self._element.get_or_add_rPr()\n        rPr._remove_color()\n        if value is not None:\n            rPr.get_or_add_color().val = value\n\n    @property\n    def theme_color(self):\n        \"\"\"Member of :ref:`MsoThemeColorIndex` or |None| if no theme color is specified.\n\n        When :attr:`type` is `MSO_COLOR_TYPE.THEME`, the value of this property will\n        always be a member of :ref:`MsoThemeColorIndex`. When :attr:`type` has any other\n        value, the value of this property is |None|.\n\n        Assigning a member of :ref:`MsoThemeColorIndex` causes :attr:`type` to become\n        `MSO_COLOR_TYPE.THEME`. Any existing RGB value is retained but ignored by Word.\n        Assigning |None| causes any color specification to be removed such that the\n        effective color is inherited from the style hierarchy.\n        \"\"\"\n        color = self._color\n        if color is None or color.themeColor is None:\n            return None\n        return color.themeColor\n\n    @theme_color.setter\n    def theme_color(self, value):\n        if value is None:\n            if self._color is not None:\n                self._element.rPr._remove_color()\n            return\n        self._element.get_or_add_rPr().get_or_add_color().themeColor = value\n\n    @property\n    def type(self) -> MSO_COLOR_TYPE:\n        \"\"\"Read-only.\n\n        A member of :ref:`MsoColorType`, one of RGB, THEME, or AUTO, corresponding to\n        the way this color is defined. Its value is |None| if no color is applied at\n        this level, which causes the effective color to be inherited from the style\n        hierarchy.\n        \"\"\"\n        color = self._color\n        if color is None:\n            return None\n        if color.themeColor is not None:\n            return MSO_COLOR_TYPE.THEME\n        if color.val == ST_HexColorAuto.AUTO:\n            return MSO_COLOR_TYPE.AUTO\n        return MSO_COLOR_TYPE.RGB\n\n    @property\n    def _color(self):\n        \"\"\"Return `w:rPr/w:color` or |None| if not present.\n\n        Helper to factor out repetitive element access.\n        \"\"\"\n        rPr = self._element.rPr\n        if rPr is None:\n            return None\n        return rPr.color"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/dml/color.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/dml/color.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/dml/color.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/dml/color.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTableDirection.html"
    },
    {
        "title": "WD_TABLE_DIRECTION¶",
        "content": [
            "Specifies the direction in which an application orders cells in the\nspecified table or row.",
            "Example:",
            "WD_TAB_LEADER",
            "WD_UNDERLINE"
        ],
        "code": [
            "WD_TABLE_DIRECTION",
            "from docx.enum.table import WD_TABLE_DIRECTION\n\ntable = document.add_table(3, 3)\ntable.direction = WD_TABLE_DIRECTION.RTL",
            "WD_TAB_LEADER",
            "WD_UNDERLINE"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTableDirection.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTableDirection.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTableDirection.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTableDirection.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/paragraph.html"
    },
    {
        "title": "Source code for docx.text.paragraph",
        "content": [],
        "code": [
            "\"\"\"Paragraph-related proxy types.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Iterator, List, cast\n\nfrom docx.enum.style import WD_STYLE_TYPE\nfrom docx.oxml.text.run import CT_R\nfrom docx.shared import StoryChild\nfrom docx.styles.style import ParagraphStyle\nfrom docx.text.hyperlink import Hyperlink\nfrom docx.text.pagebreak import RenderedPageBreak\nfrom docx.text.parfmt import ParagraphFormat\nfrom docx.text.run import Run\n\nif TYPE_CHECKING:\n    import docx.types as t\n    from docx.enum.text import WD_PARAGRAPH_ALIGNMENT\n    from docx.oxml.text.paragraph import CT_P\n    from docx.styles.style import CharacterStyle\n\n\n[docs]class Paragraph(StoryChild):\n    \"\"\"Proxy object wrapping a `<w:p>` element.\"\"\"\n\n    def __init__(self, p: CT_P, parent: t.ProvidesStoryPart):\n        super(Paragraph, self).__init__(parent)\n        self._p = self._element = p\n\n[docs]    def add_run(self, text: str | None = None, style: str | CharacterStyle | None = None) -> Run:\n        \"\"\"Append run containing `text` and having character-style `style`.\n\n        `text` can contain tab (``\\\\t``) characters, which are converted to the\n        appropriate XML form for a tab. `text` can also include newline (``\\\\n``) or\n        carriage return (``\\\\r``) characters, each of which is converted to a line\n        break. When `text` is `None`, the new run is empty.\n        \"\"\"\n        r = self._p.add_r()\n        run = Run(r, self)\n        if text:\n            run.text = text\n        if style:\n            run.style = style\n        return run\n\n    @property\n    def alignment(self) -> WD_PARAGRAPH_ALIGNMENT | None:\n        \"\"\"A member of the :ref:`WdParagraphAlignment` enumeration specifying the\n        justification setting for this paragraph.\n\n        A value of |None| indicates the paragraph has no directly-applied alignment\n        value and will inherit its alignment value from its style hierarchy. Assigning\n        |None| to this property removes any directly-applied alignment value.\n        \"\"\"\n        return self._p.alignment\n\n    @alignment.setter\n    def alignment(self, value: WD_PARAGRAPH_ALIGNMENT):\n        self._p.alignment = value\n\n[docs]    def clear(self):\n        \"\"\"Return this same paragraph after removing all its content.\n\n        Paragraph-level formatting, such as style, is preserved.\n        \"\"\"\n        self._p.clear_content()\n        return self\n\n    @property\n    def contains_page_break(self) -> bool:\n        \"\"\"`True` when one or more rendered page-breaks occur in this paragraph.\"\"\"\n        return bool(self._p.lastRenderedPageBreaks)\n\n    @property\n    def hyperlinks(self) -> List[Hyperlink]:\n        \"\"\"A |Hyperlink| instance for each hyperlink in this paragraph.\"\"\"\n        return [Hyperlink(hyperlink, self) for hyperlink in self._p.hyperlink_lst]\n\n[docs]    def insert_paragraph_before(\n        self, text: str | None = None, style: str | ParagraphStyle | None = None\n    ) -> Paragraph:\n        \"\"\"Return a newly created paragraph, inserted directly before this paragraph.\n\n        If `text` is supplied, the new paragraph contains that text in a single run. If\n        `style` is provided, that style is assigned to the new paragraph.\n        \"\"\"\n        paragraph = self._insert_paragraph_before()\n        if text:\n            paragraph.add_run(text)\n        if style is not None:\n            paragraph.style = style\n        return paragraph\n\n[docs]    def iter_inner_content(self) -> Iterator[Run | Hyperlink]:\n        \"\"\"Generate the runs and hyperlinks in this paragraph, in the order they appear.\n\n        The content in a paragraph consists of both runs and hyperlinks. This method\n        allows accessing each of those separately, in document order, for when the\n        precise position of the hyperlink within the paragraph text is important. Note\n        that a hyperlink itself contains runs.\n        \"\"\"\n        for r_or_hlink in self._p.inner_content_elements:\n            yield (\n                Run(r_or_hlink, self)\n                if isinstance(r_or_hlink, CT_R)\n                else Hyperlink(r_or_hlink, self)\n            )\n\n    @property\n    def paragraph_format(self):\n        \"\"\"The |ParagraphFormat| object providing access to the formatting properties\n        for this paragraph, such as line spacing and indentation.\"\"\"\n        return ParagraphFormat(self._element)\n\n    @property\n    def rendered_page_breaks(self) -> List[RenderedPageBreak]:\n        \"\"\"All rendered page-breaks in this paragraph.\n\n        Most often an empty list, sometimes contains one page-break, but can contain\n        more than one is rare or contrived cases.\n        \"\"\"\n        return [RenderedPageBreak(lrpb, self) for lrpb in self._p.lastRenderedPageBreaks]\n\n    @property\n    def runs(self) -> List[Run]:\n        \"\"\"Sequence of |Run| instances corresponding to the <w:r> elements in this\n        paragraph.\"\"\"\n        return [Run(r, self) for r in self._p.r_lst]\n\n    @property\n    def style(self) -> ParagraphStyle | None:\n        \"\"\"Read/Write.\n\n        |_ParagraphStyle| object representing the style assigned to this paragraph. If\n        no explicit style is assigned to this paragraph, its value is the default\n        paragraph style for the document. A paragraph style name can be assigned in lieu\n        of a paragraph style object. Assigning |None| removes any applied style, making\n        its effective value the default paragraph style for the document.\n        \"\"\"\n        style_id = self._p.style\n        style = self.part.get_style(style_id, WD_STYLE_TYPE.PARAGRAPH)\n        return cast(ParagraphStyle, style)\n\n    @style.setter\n    def style(self, style_or_name: str | ParagraphStyle | None):\n        style_id = self.part.get_style_id(style_or_name, WD_STYLE_TYPE.PARAGRAPH)\n        self._p.style = style_id\n\n    @property\n    def text(self) -> str:\n        \"\"\"The textual content of this paragraph.\n\n        The text includes the visible-text portion of any hyperlinks in the paragraph.\n        Tabs and line breaks in the XML are mapped to ``\\\\t`` and ``\\\\n`` characters\n        respectively.\n\n        Assigning text to this property causes all existing paragraph content to be\n        replaced with a single run containing the assigned text. A ``\\\\t`` character in\n        the text is mapped to a ``<w:tab/>`` element and each ``\\\\n`` or ``\\\\r``\n        character is mapped to a line break. Paragraph-level formatting, such as style,\n        is preserved. All run-level formatting, such as bold or italic, is removed.\n        \"\"\"\n        return self._p.text\n\n    @text.setter\n    def text(self, text: str | None):\n        self.clear()\n        self.add_run(text)\n\n    def _insert_paragraph_before(self):\n        \"\"\"Return a newly created paragraph, inserted directly before this paragraph.\"\"\"\n        p = self._p.add_p_before()\n        return Paragraph(p, self._parent)"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/paragraph.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/paragraph.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/paragraph.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/paragraph.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/documents.html"
    },
    {
        "title": "Working with Documents¶",
        "content": [
            "python-docx allows you to create new documents as well as make changes to existing\nones. Actually, it only lets you make changes to existing documents; it’s just\nthat if you start with a document that doesn’t have any content, it might feel\nat first like you’re creating one from scratch.",
            "This characteristic is a powerful one. A lot of how a document looks is\ndetermined by the parts that are left when you delete all the content. Things\nlike styles and page headers and footers are contained separately from the main\ncontent, allowing you to place a good deal of customization in your starting\ndocument that then appears in the document you produce.",
            "Let’s walk through the steps to create a document one example at a time,\nstarting with two of the main things you can do with a document, open it and\nsave it."
        ],
        "code": [
            "python-docx"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/user/documents.html"
    },
    {
        "title": "Opening a document¶",
        "content": [
            "The simplest way to get started is to open a new document without specifying\na file to open:",
            "This creates a new document from the built-in default template and saves it\nunchanged to a file named ‘test.docx’. The so-called “default template” is\nactually just a Word file having no content, stored with the installed python-docx\npackage. It’s roughly the same as you get by picking the Word Document\ntemplate after selecting Word’s File > New from Template… menu item."
        ],
        "code": [
            "from docx import Document\n\ndocument = Document()\ndocument.save('test.docx')",
            "python-docx"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/user/documents.html"
    },
    {
        "title": "REALLY opening a document¶",
        "content": [
            "If you want more control over the final document, or if you want to change an\nexisting document, you need to open one with a filename:",
            "Things to note:"
        ],
        "code": [
            "document = Document('existing-document-file.docx')\ndocument.save('new-file-name.docx')",
            "python-docx",
            "python-docx"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/user/documents.html"
    },
    {
        "title": "Opening a ‘file-like’ document¶",
        "content": [
            "python-docx can open a document from a so-called file-like object. It can also\nsave to a file-like object. This can be handy when you want to get the source\nor target document over a network connection or from a database and don’t want\nto (or aren’t allowed to) interact with the file system. In practice this means\nyou can pass an open file or StringIO/BytesIO stream object to open or save\na document like so:",
            "The 'rb' file open mode parameter isn’t required on all operating\nsystems. It defaults to 'r' which is enough sometimes, but the ‘b’\n(selecting binary mode) is required on Windows and at least some versions of\nLinux to allow Zipfile to open the file.",
            "Okay, so you’ve got a document open and are pretty sure you can save it\nsomewhere later. Next step is to get some content in there …"
        ],
        "code": [
            "python-docx",
            "f = open('foobar.docx', 'rb')\ndocument = Document(f)\nf.close()\n\n# or\n\nwith open('foobar.docx', 'rb') as f:\n    source_stream = StringIO(f.read())\ndocument = Document(source_stream)\nsource_stream.close()\n...\ntarget_stream = StringIO()\ndocument.save(target_stream)",
            "'rb'",
            "'r'"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/user/documents.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Quickstart",
            "Working with Tables"
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/documents.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/documents.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/documents.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/documents.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdBuiltinStyle.html"
    },
    {
        "title": "WD_BUILTIN_STYLE¶",
        "content": [
            "alias: WD_STYLE",
            "Specifies a built-in Microsoft Word style.",
            "Example:",
            "WD_PARAGRAPH_ALIGNMENT",
            "WD_CELL_VERTICAL_ALIGNMENT"
        ],
        "code": [
            "WD_BUILTIN_STYLE",
            "from docx import Document\nfrom docx.enum.style import WD_STYLE\n\ndocument = Document()\nstyles = document.styles\nstyle = styles[WD_STYLE.BODY_TEXT]",
            "WD_PARAGRAPH_ALIGNMENT",
            "WD_CELL_VERTICAL_ALIGNMENT"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdBuiltinStyle.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdBuiltinStyle.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdBuiltinStyle.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdBuiltinStyle.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdUnderline.html"
    },
    {
        "title": "WD_UNDERLINE¶",
        "content": [
            "Specifies the style of underline applied to a run of characters.",
            "WD_TABLE_DIRECTION",
            "Analysis"
        ],
        "code": [
            "WD_UNDERLINE",
            "None",
            "None",
            "WD_UNDERLINE.NONE",
            "True",
            "WD_UNDERLINE.SINGLE",
            "WD_TABLE_DIRECTION"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdUnderline.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdUnderline.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdUnderline.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdUnderline.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabAlignment.html"
    },
    {
        "title": "WD_TAB_ALIGNMENT¶",
        "content": [
            "Specifies the tab stop alignment to apply.",
            "WD_STYLE_TYPE",
            "WD_TAB_LEADER"
        ],
        "code": [
            "WD_TAB_ALIGNMENT",
            "WD_STYLE_TYPE",
            "WD_TAB_LEADER"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabAlignment.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabAlignment.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabAlignment.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabAlignment.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/document.html"
    },
    {
        "title": "Source code for docx.document",
        "content": [],
        "code": [
            "# pyright: reportImportCycles=false\n# pyright: reportPrivateUsage=false\n\n\"\"\"|Document| and closely related objects.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import IO, TYPE_CHECKING, Iterator, List\n\nfrom docx.blkcntnr import BlockItemContainer\nfrom docx.enum.section import WD_SECTION\nfrom docx.enum.text import WD_BREAK\nfrom docx.section import Section, Sections\nfrom docx.shared import ElementProxy, Emu\n\nif TYPE_CHECKING:\n    import docx.types as t\n    from docx.oxml.document import CT_Body, CT_Document\n    from docx.parts.document import DocumentPart\n    from docx.settings import Settings\n    from docx.shared import Length\n    from docx.styles.style import ParagraphStyle, _TableStyle\n    from docx.table import Table\n    from docx.text.paragraph import Paragraph\n\n\n[docs]class Document(ElementProxy):\n    \"\"\"WordprocessingML (WML) document.\n\n    Not intended to be constructed directly. Use :func:`docx.Document` to open or create\n    a document.\n    \"\"\"\n\n    def __init__(self, element: CT_Document, part: DocumentPart):\n        super(Document, self).__init__(element)\n        self._element = element\n        self._part = part\n        self.__body = None\n\n[docs]    def add_heading(self, text: str = \"\", level: int = 1):\n        \"\"\"Return a heading paragraph newly added to the end of the document.\n\n        The heading paragraph will contain `text` and have its paragraph style\n        determined by `level`. If `level` is 0, the style is set to `Title`. If `level`\n        is 1 (or omitted), `Heading 1` is used. Otherwise the style is set to `Heading\n        {level}`. Raises |ValueError| if `level` is outside the range 0-9.\n        \"\"\"\n        if not 0 <= level <= 9:\n            raise ValueError(\"level must be in range 0-9, got %d\" % level)\n        style = \"Title\" if level == 0 else \"Heading %d\" % level\n        return self.add_paragraph(text, style)\n\n[docs]    def add_page_break(self):\n        \"\"\"Return newly |Paragraph| object containing only a page break.\"\"\"\n        paragraph = self.add_paragraph()\n        paragraph.add_run().add_break(WD_BREAK.PAGE)\n        return paragraph\n\n[docs]    def add_paragraph(self, text: str = \"\", style: str | ParagraphStyle | None = None) -> Paragraph:\n        \"\"\"Return paragraph newly added to the end of the document.\n\n        The paragraph is populated with `text` and having paragraph style `style`.\n\n        `text` can contain tab (``\\\\t``) characters, which are converted to the\n        appropriate XML form for a tab. `text` can also include newline (``\\\\n``) or\n        carriage return (``\\\\r``) characters, each of which is converted to a line\n        break.\n        \"\"\"\n        return self._body.add_paragraph(text, style)\n\n[docs]    def add_picture(\n        self,\n        image_path_or_stream: str | IO[bytes],\n        width: int | Length | None = None,\n        height: int | Length | None = None,\n    ):\n        \"\"\"Return new picture shape added in its own paragraph at end of the document.\n\n        The picture contains the image at `image_path_or_stream`, scaled based on\n        `width` and `height`. If neither width nor height is specified, the picture\n        appears at its native size. If only one is specified, it is used to compute a\n        scaling factor that is then applied to the unspecified dimension, preserving the\n        aspect ratio of the image. The native size of the picture is calculated using\n        the dots-per-inch (dpi) value specified in the image file, defaulting to 72 dpi\n        if no value is specified, as is often the case.\n        \"\"\"\n        run = self.add_paragraph().add_run()\n        return run.add_picture(image_path_or_stream, width, height)\n\n[docs]    def add_section(self, start_type: WD_SECTION = WD_SECTION.NEW_PAGE):\n        \"\"\"Return a |Section| object newly added at the end of the document.\n\n        The optional `start_type` argument must be a member of the :ref:`WdSectionStart`\n        enumeration, and defaults to ``WD_SECTION.NEW_PAGE`` if not provided.\n        \"\"\"\n        new_sectPr = self._element.body.add_section_break()\n        new_sectPr.start_type = start_type\n        return Section(new_sectPr, self._part)\n\n[docs]    def add_table(self, rows: int, cols: int, style: str | _TableStyle | None = None):\n        \"\"\"Add a table having row and column counts of `rows` and `cols` respectively.\n\n        `style` may be a table style object or a table style name. If `style` is |None|,\n        the table inherits the default table style of the document.\n        \"\"\"\n        table = self._body.add_table(rows, cols, self._block_width)\n        table.style = style\n        return table\n\n    @property\n    def core_properties(self):\n        \"\"\"A |CoreProperties| object providing Dublin Core properties of document.\"\"\"\n        return self._part.core_properties\n\n    @property\n    def inline_shapes(self):\n        \"\"\"The |InlineShapes| collection for this document.\n\n        An inline shape is a graphical object, such as a picture, contained in a run of\n        text and behaving like a character glyph, being flowed like other text in a\n        paragraph.\n        \"\"\"\n        return self._part.inline_shapes\n\n[docs]    def iter_inner_content(self) -> Iterator[Paragraph | Table]:\n        \"\"\"Generate each `Paragraph` or `Table` in this document in document order.\"\"\"\n        return self._body.iter_inner_content()\n\n    @property\n    def paragraphs(self) -> List[Paragraph]:\n        \"\"\"The |Paragraph| instances in the document, in document order.\n\n        Note that paragraphs within revision marks such as ``<w:ins>`` or ``<w:del>`` do\n        not appear in this list.\n        \"\"\"\n        return self._body.paragraphs\n\n    @property\n    def part(self) -> DocumentPart:\n        \"\"\"The |DocumentPart| object of this document.\"\"\"\n        return self._part\n\n[docs]    def save(self, path_or_stream: str | IO[bytes]):\n        \"\"\"Save this document to `path_or_stream`.\n\n        `path_or_stream` can be either a path to a filesystem location (a string) or a\n        file-like object.\n        \"\"\"\n        self._part.save(path_or_stream)\n\n    @property\n    def sections(self) -> Sections:\n        \"\"\"|Sections| object providing access to each section in this document.\"\"\"\n        return Sections(self._element, self._part)\n\n    @property\n    def settings(self) -> Settings:\n        \"\"\"A |Settings| object providing access to the document-level settings.\"\"\"\n        return self._part.settings\n\n    @property\n    def styles(self):\n        \"\"\"A |Styles| object providing access to the styles in this document.\"\"\"\n        return self._part.styles\n\n    @property\n    def tables(self) -> List[Table]:\n        \"\"\"All |Table| instances in the document, in document order.\n\n        Note that only tables appearing at the top level of the document appear in this\n        list; a table nested inside a table cell does not appear. A table within\n        revision marks such as ``<w:ins>`` or ``<w:del>`` will also not appear in the\n        list.\n        \"\"\"\n        return self._body.tables\n\n    @property\n    def _block_width(self) -> Length:\n        \"\"\"A |Length| object specifying the space between margins in last section.\"\"\"\n        section = self.sections[-1]\n        return Emu(section.page_width - section.left_margin - section.right_margin)\n\n    @property\n    def _body(self) -> _Body:\n        \"\"\"The |_Body| instance containing the content for this document.\"\"\"\n        if self.__body is None:\n            self.__body = _Body(self._element.body, self)\n        return self.__body\n\n\nclass _Body(BlockItemContainer):\n    \"\"\"Proxy for `<w:body>` element in this document.\n\n    It's primary role is a container for document content.\n    \"\"\"\n\n    def __init__(self, body_elm: CT_Body, parent: t.ProvidesStoryPart):\n        super(_Body, self).__init__(body_elm, parent)\n        self._body = body_elm\n\n    def clear_content(self):\n        \"\"\"Return this |_Body| instance after clearing it of all content.\n\n        Section properties for the main document story, if present, are preserved.\n        \"\"\"\n        self._body.clear_content()\n        return self"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/document.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/document.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/document.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/document.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowHeightRule.html"
    },
    {
        "title": "WD_ROW_HEIGHT_RULE¶",
        "content": [
            "alias: WD_ROW_HEIGHT",
            "Specifies the rule for determining the height of a table row",
            "Example:",
            "WD_TABLE_ALIGNMENT",
            "WD_SECTION_START"
        ],
        "code": [
            "WD_ROW_HEIGHT_RULE",
            "from docx.enum.table import WD_ROW_HEIGHT_RULE\n\ntable = document.add_table(3, 3)\ntable.rows[0].height_rule = WD_ROW_HEIGHT_RULE.EXACTLY",
            "WD_TABLE_ALIGNMENT",
            "WD_SECTION_START"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowHeightRule.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowHeightRule.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowHeightRule.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowHeightRule.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "python-docx¶",
        "content": [
            "Release v1.1.2 (Installation)",
            "python-docx is a Python library for creating and updating Microsoft Word\n(.docx) files."
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "What it can do¶",
        "content": [
            "Here’s an example of what python-docx can do:"
        ],
        "code": [
            "python-docx",
            "from docx import Document\nfrom docx.shared import Inches\n\ndocument = Document()\n\ndocument.add_heading('Document Title', 0)\n\np = document.add_paragraph('A plain paragraph having some ')\np.add_run('bold').bold = True\np.add_run(' and some ')\np.add_run('italic.').italic = True\n\ndocument.add_heading('Heading, level 1', level=1)\ndocument.add_paragraph('Intense quote', style='Intense Quote')\n\ndocument.add_paragraph(\n    'first item in unordered list', style='List Bullet'\n)\ndocument.add_paragraph(\n    'first item in ordered list', style='List Number'\n)\n\ndocument.add_picture('monty-truth.png', width=Inches(1.25))\n\nrecords = (\n    (3, '101', 'Spam'),\n    (7, '422', 'Eggs'),\n    (4, '631', 'Spam, spam, eggs, and spam')\n)\n\ntable = document.add_table(rows=1, cols=3)\nhdr_cells = table.rows[0].cells\nhdr_cells[0].text = 'Qty'\nhdr_cells[1].text = 'Id'\nhdr_cells[2].text = 'Desc'\nfor qty, id, desc in records:\n    row_cells = table.add_row().cells\n    row_cells[0].text = str(qty)\n    row_cells[1].text = id\n    row_cells[2].text = desc\n\ndocument.add_page_break()\n\ndocument.save('demo.docx')"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "User Guide¶",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "API Documentation¶",
        "content": [],
        "code": [
            "Document",
            "Document",
            "CoreProperties",
            "Settings",
            "Styles",
            "BaseStyle",
            "CharacterStyle",
            "ParagraphStyle",
            "_TableStyle",
            "_NumberingStyle",
            "LatentStyles",
            "_LatentStyle",
            "Paragraph",
            "ParagraphFormat",
            "Hyperlink",
            "Run",
            "Font",
            "RenderedPageBreak",
            "TabStop",
            "TabStops",
            "Table",
            "_Cell",
            "_Row",
            "_Column",
            "_Rows",
            "_Columns",
            "Sections",
            "Section",
            "_Header",
            "_Footer",
            "InlineShapes",
            "InlineShape",
            "ColorFormat",
            "RGBColor",
            "MSO_COLOR_TYPE",
            "MSO_THEME_COLOR_INDEX",
            "WD_PARAGRAPH_ALIGNMENT",
            "WD_BUILTIN_STYLE",
            "WD_CELL_VERTICAL_ALIGNMENT",
            "WD_COLOR_INDEX",
            "WD_LINE_SPACING",
            "WD_ORIENTATION",
            "WD_TABLE_ALIGNMENT",
            "WD_ROW_HEIGHT_RULE",
            "WD_SECTION_START",
            "WD_STYLE_TYPE",
            "WD_TAB_ALIGNMENT",
            "WD_TAB_LEADER",
            "WD_TABLE_DIRECTION",
            "WD_UNDERLINE"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "Contributor Guide¶",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Installing"
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/index.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdStyleType.html"
    },
    {
        "title": "WD_STYLE_TYPE¶",
        "content": [
            "Specifies one of the four style types: paragraph, character, list, or\ntable.",
            "Example:",
            "WD_SECTION_START",
            "WD_TAB_ALIGNMENT"
        ],
        "code": [
            "WD_STYLE_TYPE",
            "from docx import Document\nfrom docx.enum.style import WD_STYLE_TYPE\n\nstyles = Document().styles\nassert styles[0].type == WD_STYLE_TYPE.PARAGRAPH",
            "WD_SECTION_START",
            "WD_TAB_ALIGNMENT"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdStyleType.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdStyleType.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdStyleType.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdStyleType.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/font.html"
    },
    {
        "title": "Source code for docx.text.font",
        "content": [],
        "code": [
            "\"\"\"Font-related proxy objects.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Any\n\nfrom docx.dml.color import ColorFormat\nfrom docx.enum.text import WD_UNDERLINE\nfrom docx.shared import ElementProxy, Emu\n\nif TYPE_CHECKING:\n    from docx.enum.text import WD_COLOR_INDEX\n    from docx.oxml.text.run import CT_R\n    from docx.shared import Length\n\n\n[docs]class Font(ElementProxy):\n    \"\"\"Proxy object for parent of a `<w:rPr>` element and providing access to\n    character properties such as font name, font size, bold, and subscript.\"\"\"\n\n    def __init__(self, r: CT_R, parent: Any | None = None):\n        super().__init__(r, parent)\n        self._element = r\n        self._r = r\n\n    @property\n    def all_caps(self) -> bool | None:\n        \"\"\"Read/write.\n\n        Causes text in this font to appear in capital letters.\n        \"\"\"\n        return self._get_bool_prop(\"caps\")\n\n    @all_caps.setter\n    def all_caps(self, value: bool | None) -> None:\n        self._set_bool_prop(\"caps\", value)\n\n    @property\n    def bold(self) -> bool | None:\n        \"\"\"Read/write.\n\n        Causes text in this font to appear in bold.\n        \"\"\"\n        return self._get_bool_prop(\"b\")\n\n    @bold.setter\n    def bold(self, value: bool | None) -> None:\n        self._set_bool_prop(\"b\", value)\n\n    @property\n    def color(self):\n        \"\"\"A |ColorFormat| object providing a way to get and set the text color for this\n        font.\"\"\"\n        return ColorFormat(self._element)\n\n    @property\n    def complex_script(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the characters in the run to be treated as complex script\n        regardless of their Unicode values.\n        \"\"\"\n        return self._get_bool_prop(\"cs\")\n\n    @complex_script.setter\n    def complex_script(self, value: bool | None) -> None:\n        self._set_bool_prop(\"cs\", value)\n\n    @property\n    def cs_bold(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the complex script characters in the run to be displayed in\n        bold typeface.\n        \"\"\"\n        return self._get_bool_prop(\"bCs\")\n\n    @cs_bold.setter\n    def cs_bold(self, value: bool | None) -> None:\n        self._set_bool_prop(\"bCs\", value)\n\n    @property\n    def cs_italic(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the complex script characters in the run to be displayed in\n        italic typeface.\n        \"\"\"\n        return self._get_bool_prop(\"iCs\")\n\n    @cs_italic.setter\n    def cs_italic(self, value: bool | None) -> None:\n        self._set_bool_prop(\"iCs\", value)\n\n    @property\n    def double_strike(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the text in the run to appear with double strikethrough.\n        \"\"\"\n        return self._get_bool_prop(\"dstrike\")\n\n    @double_strike.setter\n    def double_strike(self, value: bool | None) -> None:\n        self._set_bool_prop(\"dstrike\", value)\n\n    @property\n    def emboss(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the text in the run to appear as if raised off the page in\n        relief.\n        \"\"\"\n        return self._get_bool_prop(\"emboss\")\n\n    @emboss.setter\n    def emboss(self, value: bool | None) -> None:\n        self._set_bool_prop(\"emboss\", value)\n\n    @property\n    def hidden(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the text in the run to be hidden from display, unless\n        applications settings force hidden text to be shown.\n        \"\"\"\n        return self._get_bool_prop(\"vanish\")\n\n    @hidden.setter\n    def hidden(self, value: bool | None) -> None:\n        self._set_bool_prop(\"vanish\", value)\n\n    @property\n    def highlight_color(self) -> WD_COLOR_INDEX | None:\n        \"\"\"Color of highlighing applied or |None| if not highlighted.\"\"\"\n        rPr = self._element.rPr\n        if rPr is None:\n            return None\n        return rPr.highlight_val\n\n    @highlight_color.setter\n    def highlight_color(self, value: WD_COLOR_INDEX | None):\n        rPr = self._element.get_or_add_rPr()\n        rPr.highlight_val = value\n\n    @property\n    def italic(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the text of the run to appear in italics. |None| indicates\n        the effective value is inherited from the style hierarchy.\n        \"\"\"\n        return self._get_bool_prop(\"i\")\n\n    @italic.setter\n    def italic(self, value: bool | None) -> None:\n        self._set_bool_prop(\"i\", value)\n\n    @property\n    def imprint(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the text in the run to appear as if pressed into the page.\n        \"\"\"\n        return self._get_bool_prop(\"imprint\")\n\n    @imprint.setter\n    def imprint(self, value: bool | None) -> None:\n        self._set_bool_prop(\"imprint\", value)\n\n    @property\n    def math(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, specifies this run contains WML that should be handled as though it\n        was Office Open XML Math.\n        \"\"\"\n        return self._get_bool_prop(\"oMath\")\n\n    @math.setter\n    def math(self, value: bool | None) -> None:\n        self._set_bool_prop(\"oMath\", value)\n\n    @property\n    def name(self) -> str | None:\n        \"\"\"The typeface name for this |Font|.\n\n        Causes the text it controls to appear in the named font, if a matching font is\n        found. |None| indicates the typeface is inherited from the style hierarchy.\n        \"\"\"\n        rPr = self._element.rPr\n        if rPr is None:\n            return None\n        return rPr.rFonts_ascii\n\n    @name.setter\n    def name(self, value: str | None) -> None:\n        rPr = self._element.get_or_add_rPr()\n        rPr.rFonts_ascii = value\n        rPr.rFonts_hAnsi = value\n\n    @property\n    def no_proof(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, specifies that the contents of this run should not report any\n        errors when the document is scanned for spelling and grammar.\n        \"\"\"\n        return self._get_bool_prop(\"noProof\")\n\n    @no_proof.setter\n    def no_proof(self, value: bool | None) -> None:\n        self._set_bool_prop(\"noProof\", value)\n\n    @property\n    def outline(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True| causes the characters in the run to appear as if they have an\n        outline, by drawing a one pixel wide border around the inside and outside\n        borders of each character glyph.\n        \"\"\"\n        return self._get_bool_prop(\"outline\")\n\n    @outline.setter\n    def outline(self, value: bool | None) -> None:\n        self._set_bool_prop(\"outline\", value)\n\n    @property\n    def rtl(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True| causes the text in the run to have right-to-left characteristics.\n        \"\"\"\n        return self._get_bool_prop(\"rtl\")\n\n    @rtl.setter\n    def rtl(self, value: bool | None) -> None:\n        self._set_bool_prop(\"rtl\", value)\n\n    @property\n    def shadow(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True| causes the text in the run to appear as if each character has a\n        shadow.\n        \"\"\"\n        return self._get_bool_prop(\"shadow\")\n\n    @shadow.setter\n    def shadow(self, value: bool | None) -> None:\n        self._set_bool_prop(\"shadow\", value)\n\n    @property\n    def size(self) -> Length | None:\n        \"\"\"Font height in English Metric Units (EMU).\n\n        |None| indicates the font size should be inherited from the style hierarchy.\n        |Length| is a subclass of |int| having properties for convenient conversion into\n        points or other length units. The :class:`docx.shared.Pt` class allows\n        convenient specification of point values::\n\n            >>> font.size = Pt(24)\n            >>> font.size\n            304800\n            >>> font.size.pt\n            24.0\n\n        \"\"\"\n        rPr = self._element.rPr\n        if rPr is None:\n            return None\n        return rPr.sz_val\n\n    @size.setter\n    def size(self, emu: int | Length | None) -> None:\n        rPr = self._element.get_or_add_rPr()\n        rPr.sz_val = None if emu is None else Emu(emu)\n\n    @property\n    def small_caps(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True| causes the lowercase characters in the run to appear as capital\n        letters two points smaller than the font size specified for the run.\n        \"\"\"\n        return self._get_bool_prop(\"smallCaps\")\n\n    @small_caps.setter\n    def small_caps(self, value: bool | None) -> None:\n        self._set_bool_prop(\"smallCaps\", value)\n\n    @property\n    def snap_to_grid(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True| causes the run to use the document grid characters per line settings\n        defined in the docGrid element when laying out the characters in this run.\n        \"\"\"\n        return self._get_bool_prop(\"snapToGrid\")\n\n    @snap_to_grid.setter\n    def snap_to_grid(self, value: bool | None) -> None:\n        self._set_bool_prop(\"snapToGrid\", value)\n\n    @property\n    def spec_vanish(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, specifies that the given run shall always behave as if it is\n        hidden, even when hidden text is being displayed in the current document. The\n        property has a very narrow, specialized use related to the table of contents.\n        Consult the spec (§17.3.2.36) for more details.\n        \"\"\"\n        return self._get_bool_prop(\"specVanish\")\n\n    @spec_vanish.setter\n    def spec_vanish(self, value: bool | None) -> None:\n        self._set_bool_prop(\"specVanish\", value)\n\n    @property\n    def strike(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True| causes the text in the run to appear with a single horizontal line\n        through the center of the line.\n        \"\"\"\n        return self._get_bool_prop(\"strike\")\n\n    @strike.setter\n    def strike(self, value: bool | None) -> None:\n        self._set_bool_prop(\"strike\", value)\n\n    @property\n    def subscript(self) -> bool | None:\n        \"\"\"Boolean indicating whether the characters in this |Font| appear as subscript.\n\n        |None| indicates the subscript/subscript value is inherited from the style\n        hierarchy.\n        \"\"\"\n        rPr = self._element.rPr\n        if rPr is None:\n            return None\n        return rPr.subscript\n\n    @subscript.setter\n    def subscript(self, value: bool | None) -> None:\n        rPr = self._element.get_or_add_rPr()\n        rPr.subscript = value\n\n    @property\n    def superscript(self) -> bool | None:\n        \"\"\"Boolean indicating whether the characters in this |Font| appear as\n        superscript.\n\n        |None| indicates the subscript/superscript value is inherited from the style\n        hierarchy.\n        \"\"\"\n        rPr = self._element.rPr\n        if rPr is None:\n            return None\n        return rPr.superscript\n\n    @superscript.setter\n    def superscript(self, value: bool | None) -> None:\n        rPr = self._element.get_or_add_rPr()\n        rPr.superscript = value\n\n    @property\n    def underline(self) -> bool | WD_UNDERLINE | None:\n        \"\"\"The underline style for this |Font|.\n\n        The value is one of |None|, |True|, |False|, or a member of :ref:`WdUnderline`.\n\n        |None| indicates the font inherits its underline value from the style hierarchy.\n        |False| indicates no underline. |True| indicates single underline. The values\n        from :ref:`WdUnderline` are used to specify other outline styles such as double,\n        wavy, and dotted.\n        \"\"\"\n        rPr = self._element.rPr\n        if rPr is None:\n            return None\n        val = rPr.u_val\n        return (\n            None\n            if val == WD_UNDERLINE.INHERITED\n            else True\n            if val == WD_UNDERLINE.SINGLE\n            else False\n            if val == WD_UNDERLINE.NONE\n            else val\n        )\n\n    @underline.setter\n    def underline(self, value: bool | WD_UNDERLINE | None) -> None:\n        rPr = self._element.get_or_add_rPr()\n        # -- works fine without these two mappings, but only because True == 1 and\n        # -- False == 0, which happen to match the mapping for WD_UNDERLINE.SINGLE\n        # -- and .NONE respectively.\n        val = (\n            WD_UNDERLINE.SINGLE\n            if value is True\n            else WD_UNDERLINE.NONE\n            if value is False\n            else value\n        )\n        rPr.u_val = val\n\n    @property\n    def web_hidden(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, specifies that the contents of this run shall be hidden when the\n        document is displayed in web page view.\n        \"\"\"\n        return self._get_bool_prop(\"webHidden\")\n\n    @web_hidden.setter\n    def web_hidden(self, value: bool | None) -> None:\n        self._set_bool_prop(\"webHidden\", value)\n\n    def _get_bool_prop(self, name: str) -> bool | None:\n        \"\"\"Return the value of boolean child of `w:rPr` having `name`.\"\"\"\n        rPr = self._element.rPr\n        if rPr is None:\n            return None\n        return rPr._get_bool_val(name)  # pyright: ignore[reportPrivateUsage]\n\n    def _set_bool_prop(self, name: str, value: bool | None):\n        \"\"\"Assign `value` to the boolean child `name` of `w:rPr`.\"\"\"\n        rPr = self._element.get_or_add_rPr()\n        rPr._set_bool_val(name, value)  # pyright: ignore[reportPrivateUsage]"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/font.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/font.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/font.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/font.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html"
    },
    {
        "title": "WD_PARAGRAPH_ALIGNMENT¶",
        "content": [
            "alias: WD_ALIGN_PARAGRAPH",
            "Specifies paragraph justification type.",
            "Example:",
            "MSO_THEME_COLOR_INDEX",
            "WD_BUILTIN_STYLE"
        ],
        "code": [
            "WD_PARAGRAPH_ALIGNMENT",
            "from docx.enum.text import WD_ALIGN_PARAGRAPH\n\nparagraph = document.add_paragraph()\nparagraph.alignment = WD_ALIGN_PARAGRAPH.CENTER",
            "MSO_THEME_COLOR_INDEX",
            "WD_BUILTIN_STYLE"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/style.html"
    },
    {
        "title": "Source code for docx.styles.style",
        "content": [],
        "code": [
            "\"\"\"Style object hierarchy.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Type\n\nfrom docx.enum.style import WD_STYLE_TYPE\nfrom docx.oxml.styles import CT_Style\nfrom docx.shared import ElementProxy\nfrom docx.styles import BabelFish\nfrom docx.text.font import Font\nfrom docx.text.parfmt import ParagraphFormat\n\n\ndef StyleFactory(style_elm: CT_Style) -> BaseStyle:\n    \"\"\"Return `Style` object of appropriate |BaseStyle| subclass for `style_elm`.\"\"\"\n    style_cls: Type[BaseStyle] = {\n        WD_STYLE_TYPE.PARAGRAPH: ParagraphStyle,\n        WD_STYLE_TYPE.CHARACTER: CharacterStyle,\n        WD_STYLE_TYPE.TABLE: _TableStyle,\n        WD_STYLE_TYPE.LIST: _NumberingStyle,\n    }[style_elm.type]\n\n    return style_cls(style_elm)\n\n\n[docs]class BaseStyle(ElementProxy):\n    \"\"\"Base class for the various types of style object, paragraph, character, table,\n    and numbering.\n\n    These properties and methods are inherited by all style objects.\n    \"\"\"\n\n    def __init__(self, style_elm: CT_Style):\n        super().__init__(style_elm)\n        self._style_elm = style_elm\n\n    @property\n    def builtin(self):\n        \"\"\"Read-only.\n\n        |True| if this style is a built-in style. |False| indicates it is a custom\n        (user-defined) style. Note this value is based on the presence of a\n        `customStyle` attribute in the XML, not on specific knowledge of which styles\n        are built into Word.\n        \"\"\"\n        return not self._element.customStyle\n\n[docs]    def delete(self):\n        \"\"\"Remove this style definition from the document.\n\n        Note that calling this method does not remove or change the style applied to any\n        document content. Content items having the deleted style will be rendered using\n        the default style, as is any content with a style not defined in the document.\n        \"\"\"\n        self._element.delete()\n        self._element = None\n\n    @property\n    def hidden(self):\n        \"\"\"|True| if display of this style in the style gallery and list of recommended\n        styles is suppressed.\n\n        |False| otherwise. In order to be shown in the style gallery, this value must be\n        |False| and :attr:`.quick_style` must be |True|.\n        \"\"\"\n        return self._element.semiHidden_val\n\n    @hidden.setter\n    def hidden(self, value):\n        self._element.semiHidden_val = value\n\n    @property\n    def locked(self):\n        \"\"\"Read/write Boolean.\n\n        |True| if this style is locked. A locked style does not appear in the styles\n        panel or the style gallery and cannot be applied to document content. This\n        behavior is only active when formatting protection is turned on for the document\n        (via the Developer menu).\n        \"\"\"\n        return self._element.locked_val\n\n    @locked.setter\n    def locked(self, value):\n        self._element.locked_val = value\n\n    @property\n    def name(self):\n        \"\"\"The UI name of this style.\"\"\"\n        name = self._element.name_val\n        if name is None:\n            return None\n        return BabelFish.internal2ui(name)\n\n    @name.setter\n    def name(self, value):\n        self._element.name_val = value\n\n    @property\n    def priority(self):\n        \"\"\"The integer sort key governing display sequence of this style in the Word UI.\n\n        |None| indicates no setting is defined, causing Word to use the default value of\n        0. Style name is used as a secondary sort key to resolve ordering of styles\n        having the same priority value.\n        \"\"\"\n        return self._element.uiPriority_val\n\n    @priority.setter\n    def priority(self, value):\n        self._element.uiPriority_val = value\n\n    @property\n    def quick_style(self):\n        \"\"\"|True| if this style should be displayed in the style gallery when\n        :attr:`.hidden` is |False|.\n\n        Read/write Boolean.\n        \"\"\"\n        return self._element.qFormat_val\n\n    @quick_style.setter\n    def quick_style(self, value):\n        self._element.qFormat_val = value\n\n    @property\n    def style_id(self) -> str:\n        \"\"\"The unique key name (string) for this style.\n\n        This value is subject to rewriting by Word and should generally not be changed\n        unless you are familiar with the internals involved.\n        \"\"\"\n        return self._style_elm.styleId\n\n    @style_id.setter\n    def style_id(self, value):\n        self._element.styleId = value\n\n    @property\n    def type(self):\n        \"\"\"Member of :ref:`WdStyleType` corresponding to the type of this style, e.g.\n        ``WD_STYLE_TYPE.PARAGRAPH``.\"\"\"\n        type = self._style_elm.type\n        if type is None:\n            return WD_STYLE_TYPE.PARAGRAPH\n        return type\n\n    @property\n    def unhide_when_used(self):\n        \"\"\"|True| if an application should make this style visible the next time it is\n        applied to content.\n\n        False otherwise. Note that |docx| does not automatically unhide a style having\n        |True| for this attribute when it is applied to content.\n        \"\"\"\n        return self._element.unhideWhenUsed_val\n\n    @unhide_when_used.setter\n    def unhide_when_used(self, value):\n        self._element.unhideWhenUsed_val = value\n\n\n[docs]class CharacterStyle(BaseStyle):\n    \"\"\"A character style.\n\n    A character style is applied to a |Run| object and primarily provides character-\n    level formatting via the |Font| object in its :attr:`.font` property.\n    \"\"\"\n\n    @property\n    def base_style(self):\n        \"\"\"Style object this style inherits from or |None| if this style is not based on\n        another style.\"\"\"\n        base_style = self._element.base_style\n        if base_style is None:\n            return None\n        return StyleFactory(base_style)\n\n    @base_style.setter\n    def base_style(self, style):\n        style_id = style.style_id if style is not None else None\n        self._element.basedOn_val = style_id\n\n    @property\n    def font(self):\n        \"\"\"The |Font| object providing access to the character formatting properties for\n        this style, such as font name and size.\"\"\"\n        return Font(self._element)\n\n\n# -- just in case someone uses the old name in an extension function --\n_CharacterStyle = CharacterStyle\n\n\n[docs]class ParagraphStyle(CharacterStyle):\n    \"\"\"A paragraph style.\n\n    A paragraph style provides both character formatting and paragraph formatting such\n    as indentation and line-spacing.\n    \"\"\"\n\n    def __repr__(self):\n        return \"_ParagraphStyle('%s') id: %s\" % (self.name, id(self))\n\n    @property\n    def next_paragraph_style(self):\n        \"\"\"|_ParagraphStyle| object representing the style to be applied automatically\n        to a new paragraph inserted after a paragraph of this style.\n\n        Returns self if no next paragraph style is defined. Assigning |None| or `self`\n        removes the setting such that new paragraphs are created using this same style.\n        \"\"\"\n        next_style_elm = self._element.next_style\n        if next_style_elm is None:\n            return self\n        if next_style_elm.type != WD_STYLE_TYPE.PARAGRAPH:\n            return self\n        return StyleFactory(next_style_elm)\n\n    @next_paragraph_style.setter\n    def next_paragraph_style(self, style):\n        if style is None or style.style_id == self.style_id:\n            self._element._remove_next()\n        else:\n            self._element.get_or_add_next().val = style.style_id\n\n    @property\n    def paragraph_format(self):\n        \"\"\"The |ParagraphFormat| object providing access to the paragraph formatting\n        properties for this style such as indentation.\"\"\"\n        return ParagraphFormat(self._element)\n\n\n# -- just in case someone uses the old name in an extension function --\n_ParagraphStyle = ParagraphStyle\n\n\n[docs]class _TableStyle(ParagraphStyle):\n    \"\"\"A table style.\n\n    A table style provides character and paragraph formatting for its contents as well\n    as special table formatting properties.\n    \"\"\"\n\n    def __repr__(self):\n        return \"_TableStyle('%s') id: %s\" % (self.name, id(self))\n\n\n[docs]class _NumberingStyle(BaseStyle):\n    \"\"\"A numbering style.\n\n    Not yet implemented.\n    \"\"\""
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/style.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/style.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/style.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/style.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/api-concepts.html"
    },
    {
        "title": "API basics¶",
        "content": [
            "The API for python-docx is designed to make doing simple things simple, while\nallowing more complex results to be achieved with a modest and incremental\ninvestment of understanding.",
            "It’s possible to create a basic document using only a single object, the\ndocx.api.Document object returned when opening a file. The methods on\ndocx.api.Document allow block-level objects to be added to the end of the\ndocument. Block-level objects include paragraphs, inline pictures, and tables.\nHeadings, bullets, and numbered lists are simply paragraphs with a particular\nstyle applied.",
            "In this way, a document can be “written” from top to bottom, roughly like\na person would if they knew exactly what they wanted to say This basic use\ncase, where content is always added to the end of the document, is expected to\naccount for perhaps 80% of actual use cases, so it’s a priority to make it as\nsimple as possible without compromising the power of the overall API."
        ],
        "code": [
            "python-docx",
            "docx.api.Document",
            "docx.api.Document"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/user/api-concepts.html"
    },
    {
        "title": "Inline objects¶",
        "content": [
            "Each block-level method on docx.api.Document, such as add_paragraph(), returns\nthe block-level object created. Often the reference is unneeded; but when\ninline objects must be created individually, you’ll need the block-item\nreference to do it.",
            "… add example here as API solidifies …"
        ],
        "code": [
            "docx.api.Document",
            "add_paragraph()"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/user/api-concepts.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Working with Headers and Footers",
            "Understanding Styles"
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/api-concepts.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/api-concepts.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/api-concepts.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/user/api-concepts.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdCellVerticalAlignment.html"
    },
    {
        "title": "WD_CELL_VERTICAL_ALIGNMENT¶",
        "content": [
            "alias: WD_ALIGN_VERTICAL",
            "Specifies the vertical alignment of text in one or more cells of a table.",
            "Example:",
            "WD_BUILTIN_STYLE",
            "WD_COLOR_INDEX"
        ],
        "code": [
            "WD_CELL_VERTICAL_ALIGNMENT",
            "from docx.enum.table import WD_ALIGN_VERTICAL\n\ntable = document.add_table(3, 3)\ntable.cell(0, 0).vertical_alignment = WD_ALIGN_VERTICAL.BOTTOM",
            "WD_BUILTIN_STYLE",
            "WD_COLOR_INDEX"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdCellVerticalAlignment.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdCellVerticalAlignment.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdCellVerticalAlignment.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdCellVerticalAlignment.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdOrientation.html"
    },
    {
        "title": "WD_ORIENTATION¶",
        "content": [
            "alias: WD_ORIENT",
            "Specifies the page layout orientation.",
            "Example:",
            "WD_LINE_SPACING",
            "WD_TABLE_ALIGNMENT"
        ],
        "code": [
            "WD_ORIENTATION",
            "from docx.enum.section import WD_ORIENT\n\nsection = document.sections[-1]\nsection.orientation = WD_ORIENT.LANDSCAPE",
            "WD_LINE_SPACING",
            "WD_TABLE_ALIGNMENT"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdOrientation.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdOrientation.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdOrientation.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdOrientation.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/settings.html"
    },
    {
        "title": "Source code for docx.settings",
        "content": [],
        "code": [
            "\"\"\"Settings object, providing access to document-level settings.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING, cast\n\nfrom docx.shared import ElementProxy\n\nif TYPE_CHECKING:\n    import docx.types as t\n    from docx.oxml.settings import CT_Settings\n    from docx.oxml.xmlchemy import BaseOxmlElement\n\n\n[docs]class Settings(ElementProxy):\n    \"\"\"Provides access to document-level settings for a document.\n\n    Accessed using the :attr:`.Document.settings` property.\n    \"\"\"\n\n    def __init__(self, element: BaseOxmlElement, parent: t.ProvidesXmlPart | None = None):\n        super().__init__(element, parent)\n        self._settings = cast(\"CT_Settings\", element)\n\n    @property\n    def odd_and_even_pages_header_footer(self) -> bool:\n        \"\"\"True if this document has distinct odd and even page headers and footers.\n\n        Read/write.\n        \"\"\"\n        return self._settings.evenAndOddHeaders_val\n\n    @odd_and_even_pages_header_footer.setter\n    def odd_and_even_pages_header_footer(self, value: bool):\n        self._settings.evenAndOddHeaders_val = value"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/settings.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/settings.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/settings.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/settings.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowAlignment.html"
    },
    {
        "title": "WD_TABLE_ALIGNMENT¶",
        "content": [
            "Specifies table justification type.",
            "Example:",
            "WD_ORIENTATION",
            "WD_ROW_HEIGHT_RULE"
        ],
        "code": [
            "WD_TABLE_ALIGNMENT",
            "from docx.enum.table import WD_TABLE_ALIGNMENT\n\ntable = document.add_table(3, 3)\ntable.alignment = WD_TABLE_ALIGNMENT.CENTER",
            "WD_ORIENTATION",
            "WD_ROW_HEIGHT_RULE"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowAlignment.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowAlignment.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowAlignment.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdRowAlignment.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/opc/coreprops.html"
    },
    {
        "title": "Source code for docx.opc.coreprops",
        "content": [],
        "code": [
            "\"\"\"Provides CoreProperties, Dublin-Core attributes of the document.\n\nThese are broadly-standardized attributes like author, last-modified, etc.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom docx.oxml.coreprops import CT_CoreProperties\n\nif TYPE_CHECKING:\n    from docx.oxml.coreprops import CT_CoreProperties\n\n\n[docs]class CoreProperties:\n    \"\"\"Corresponds to part named ``/docProps/core.xml``, containing the core document\n    properties for this document package.\"\"\"\n\n    def __init__(self, element: CT_CoreProperties):\n        self._element = element\n\n    @property\n    def author(self):\n        return self._element.author_text\n\n    @author.setter\n    def author(self, value: str):\n        self._element.author_text = value\n\n    @property\n    def category(self):\n        return self._element.category_text\n\n    @category.setter\n    def category(self, value: str):\n        self._element.category_text = value\n\n    @property\n    def comments(self):\n        return self._element.comments_text\n\n    @comments.setter\n    def comments(self, value: str):\n        self._element.comments_text = value\n\n    @property\n    def content_status(self):\n        return self._element.contentStatus_text\n\n    @content_status.setter\n    def content_status(self, value: str):\n        self._element.contentStatus_text = value\n\n    @property\n    def created(self):\n        return self._element.created_datetime\n\n    @created.setter\n    def created(self, value):\n        self._element.created_datetime = value\n\n    @property\n    def identifier(self):\n        return self._element.identifier_text\n\n    @identifier.setter\n    def identifier(self, value: str):\n        self._element.identifier_text = value\n\n    @property\n    def keywords(self):\n        return self._element.keywords_text\n\n    @keywords.setter\n    def keywords(self, value: str):\n        self._element.keywords_text = value\n\n    @property\n    def language(self):\n        return self._element.language_text\n\n    @language.setter\n    def language(self, value: str):\n        self._element.language_text = value\n\n    @property\n    def last_modified_by(self):\n        return self._element.lastModifiedBy_text\n\n    @last_modified_by.setter\n    def last_modified_by(self, value: str):\n        self._element.lastModifiedBy_text = value\n\n    @property\n    def last_printed(self):\n        return self._element.lastPrinted_datetime\n\n    @last_printed.setter\n    def last_printed(self, value):\n        self._element.lastPrinted_datetime = value\n\n    @property\n    def modified(self):\n        return self._element.modified_datetime\n\n    @modified.setter\n    def modified(self, value):\n        self._element.modified_datetime = value\n\n    @property\n    def revision(self):\n        return self._element.revision_number\n\n    @revision.setter\n    def revision(self, value):\n        self._element.revision_number = value\n\n    @property\n    def subject(self):\n        return self._element.subject_text\n\n    @subject.setter\n    def subject(self, value: str):\n        self._element.subject_text = value\n\n    @property\n    def title(self):\n        return self._element.title_text\n\n    @title.setter\n    def title(self, value: str):\n        self._element.title_text = value\n\n    @property\n    def version(self):\n        return self._element.version_text\n\n    @version.setter\n    def version(self, value: str):\n        self._element.version_text = value"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/opc/coreprops.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/opc/coreprops.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/opc/coreprops.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/opc/coreprops.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "Table objects¶",
        "content": [
            "Table objects are constructed using the add_table() method on Document."
        ],
        "code": [
            "add_table()",
            "Document"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "Table objects¶",
        "content": [
            "Proxy class for a WordprocessingML <w:tbl> element.",
            "Return a _Column object of width, newly added rightmost to the table.",
            "Return a _Row instance, newly added bottom-most to the table.",
            "Read/write.",
            "A member of WD_TABLE_ALIGNMENT or None, specifying the positioning of this\ntable between the page margins. None if no setting is specified, causing the\neffective value to be inherited from the style hierarchy.",
            "True if column widths can be automatically adjusted to improve the fit of\ncell contents.",
            "False if table layout is fixed. Column widths are adjusted in either case if\ntotal column width exceeds page width. Read/write boolean.",
            "_Cell at row_idx, col_idx intersection.",
            "(0, 0) is the top, left-most cell.",
            "Sequence of cells in the column at column_idx in this table.",
            "_Columns instance representing the sequence of columns in this table.",
            "DEPRECATED: Use table.rows[row_idx].cells instead.",
            "Sequence of cells in the row at row_idx in this table.",
            "_Rows instance containing the sequence of rows in this table.",
            "_TableStyle object representing the style applied to this table.",
            "Read/write. The default table style for the document (often Normal Table) is\nreturned if the table has no directly-applied style. Assigning None to this\nproperty removes any directly-applied table style causing it to inherit the\ndefault table style of the document.",
            "Note that the style name of a table style differs slightly from that displayed\nin the user interface; a hyphen, if it appears, must be removed. For example,\nLight Shading - Accent 1 becomes Light Shading Accent 1.",
            "Member of WD_TABLE_DIRECTION indicating cell-ordering direction.",
            "For example: WD_TABLE_DIRECTION.LTR. None indicates the value is inherited\nfrom the style hierarchy."
        ],
        "code": [
            "Table",
            "docx.table.",
            "Table",
            "<w:tbl>",
            "add_column",
            "_Column",
            "add_row",
            "_Row",
            "alignment",
            "None",
            "autofit",
            "True",
            "False",
            "cell",
            "_Cell",
            "column_cells",
            "columns",
            "_Columns",
            "row_cells",
            "rows",
            "_Rows",
            "style",
            "_TableStyle",
            "None",
            "table_direction",
            "None"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "_Cell objects¶",
        "content": [
            "Table cell.",
            "Return a paragraph newly added to the end of the content in this cell.",
            "If present, text is added to the paragraph in a single run. If specified, the\nparagraph style style is applied. If style is not specified or is None,\nthe result is as though the ‘Normal’ style was applied. Note that the formatting\nof text in a cell can be influenced by the table style. text can contain tab\n(\\t) characters, which are converted to the appropriate XML form for a tab.\ntext can also include newline (\\n) or carriage return (\\r)\ncharacters, each of which is converted to a line break.",
            "Return a table newly added to this cell after any existing cell content.",
            "The new table will have rows rows and cols columns.",
            "An empty paragraph is added after the table because Word requires a paragraph\nelement as the last element in every cell.",
            "Number of layout-grid cells this cell spans horizontally.",
            "A “normal” cell has a grid-span of 1. A horizontally merged cell has a grid-span of 2 or\nmore.",
            "Generate each Paragraph or Table in this container in document order.",
            "Return a merged cell created by spanning the rectangular region having this\ncell and other_cell as diagonal corners.",
            "Raises InvalidSpanError if the cells do not define a rectangular region.",
            "List of paragraphs in the cell.",
            "A table cell is required to contain at least one block-level element and end\nwith a paragraph. By default, a new cell contains a single paragraph. Read-only",
            "List of tables in the cell, in the order they appear.",
            "Read-only.",
            "The entire contents of this cell as a string of text.",
            "Assigning a string to this property replaces all existing content with a single\nparagraph containing the assigned text in a single run.",
            "Member of WD_CELL_VERTICAL_ALIGNMENT or None.",
            "A value of None indicates vertical alignment for this cell is inherited.\nAssigning None causes any explicitly defined vertical alignment to be removed,\nrestoring inheritance.",
            "The width of this cell in EMU, or None if no explicit width is set."
        ],
        "code": [
            "_Cell",
            "docx.table.",
            "_Cell",
            "add_paragraph",
            "None",
            "\\t",
            "\\n",
            "\\r",
            "add_table",
            "grid_span",
            "iter_inner_content",
            "merge",
            "InvalidSpanError",
            "paragraphs",
            "tables",
            "text",
            "vertical_alignment",
            "None",
            "None",
            "width",
            "None"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "_Row objects¶",
        "content": [
            "Table row.",
            "Sequence of _Cell instances corresponding to cells in this row.",
            "Note that Word allows table rows to start later than the first column and end before the\nlast column.",
            "Count of unpopulated grid-columns after the last cell in this row.",
            "Word allows a row to “end early”, meaning that one or more cells are not present at the\nend of that row.",
            "Note these are not simply “empty” cells. The renderer reads this value and “skips” this\nmany columns after drawing the last cell.",
            "Note this also implies that not all rows are guaranteed to have the same number of cells,\ne.g. _Row.cells could have length n for one row and n - m for the next row in the same\ntable. Visually this appears as a column (at the beginning or end, not in the middle) with\none or more cells missing.",
            "Count of unpopulated grid-columns before the first cell in this row.",
            "Word allows a row to “start late”, meaning that one or more cells are not present at the\nbeginning of that row.",
            "Note these are not simply “empty” cells. The renderer reads this value and skips forward to\nthe table layout-grid position of the first cell in this row; the renderer “skips” this many\ncolumns before drawing the first cell.",
            "Note this also implies that not all rows are guaranteed to have the same number of cells,\ne.g. _Row.cells could have length n for one row and n - m for the next row in the same\ntable.",
            "Return a Length object representing the height of this cell, or None if\nno explicit height is set.",
            "Return the height rule of this cell as a member of the WD_ROW_HEIGHT_RULE.",
            "This value is None if no explicit height_rule is set.",
            "Reference to the Table object this row belongs to."
        ],
        "code": [
            "_Row",
            "docx.table.",
            "_Row",
            "cells",
            "_Cell",
            "grid_cols_after",
            "grid_cols_before",
            "height",
            "Length",
            "None",
            "height_rule",
            "None",
            "table",
            "Table"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "_Column objects¶",
        "content": [
            "Table column.",
            "Sequence of _Cell instances corresponding to cells in this column.",
            "Reference to the Table object this column belongs to.",
            "The width of this column in EMU, or None if no explicit width is set."
        ],
        "code": [
            "_Column",
            "docx.table.",
            "_Column",
            "cells",
            "_Cell",
            "table",
            "Table",
            "width",
            "None"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "_Rows objects¶",
        "content": [
            "Sequence of _Row objects corresponding to the rows in a table.",
            "Supports len(), iteration, indexed access, and slicing.",
            "Reference to the Table object this row collection belongs to."
        ],
        "code": [
            "_Rows",
            "docx.table.",
            "_Rows",
            "_Row",
            "len()",
            "table",
            "Table"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "_Columns objects¶",
        "content": [
            "Sequence of _Column instances corresponding to the columns in a table.",
            "Supports len(), iteration and indexed access.",
            "Reference to the Table object this column collection belongs to."
        ],
        "code": [
            "_Columns",
            "docx.table.",
            "_Columns",
            "_Column",
            "len()",
            "table",
            "Table"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Text-related objects",
            "Section objects"
        ],
        "code": [
            "Table",
            "_Cell",
            "_Row",
            "_Column",
            "_Rows",
            "_Columns"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/table.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shared.html"
    },
    {
        "title": "Source code for docx.shared",
        "content": [],
        "code": [
            "\"\"\"Objects shared by docx modules.\"\"\"\n\nfrom __future__ import annotations\n\nimport functools\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    Generic,\n    Iterator,\n    List,\n    Tuple,\n    TypeVar,\n    cast,\n)\n\nif TYPE_CHECKING:\n    import docx.types as t\n    from docx.opc.part import XmlPart\n    from docx.oxml.xmlchemy import BaseOxmlElement\n    from docx.parts.story import StoryPart\n\n\n[docs]class Length(int):\n    \"\"\"Base class for length constructor classes Inches, Cm, Mm, Px, and Emu.\n\n    Behaves as an int count of English Metric Units, 914,400 to the inch, 36,000 to the\n    mm. Provides convenience unit conversion methods in the form of read-only\n    properties. Immutable.\n    \"\"\"\n\n    _EMUS_PER_INCH = 914400\n    _EMUS_PER_CM = 360000\n    _EMUS_PER_MM = 36000\n    _EMUS_PER_PT = 12700\n    _EMUS_PER_TWIP = 635\n\n    def __new__(cls, emu: int):\n        return int.__new__(cls, emu)\n\n    @property\n    def cm(self):\n        \"\"\"The equivalent length expressed in centimeters (float).\"\"\"\n        return self / float(self._EMUS_PER_CM)\n\n    @property\n    def emu(self):\n        \"\"\"The equivalent length expressed in English Metric Units (int).\"\"\"\n        return self\n\n    @property\n    def inches(self):\n        \"\"\"The equivalent length expressed in inches (float).\"\"\"\n        return self / float(self._EMUS_PER_INCH)\n\n    @property\n    def mm(self):\n        \"\"\"The equivalent length expressed in millimeters (float).\"\"\"\n        return self / float(self._EMUS_PER_MM)\n\n    @property\n    def pt(self):\n        \"\"\"Floating point length in points.\"\"\"\n        return self / float(self._EMUS_PER_PT)\n\n    @property\n    def twips(self):\n        \"\"\"The equivalent length expressed in twips (int).\"\"\"\n        return int(round(self / float(self._EMUS_PER_TWIP)))\n\n\n[docs]class Inches(Length):\n    \"\"\"Convenience constructor for length in inches, e.g. ``width = Inches(0.5)``.\"\"\"\n\n    def __new__(cls, inches: float):\n        emu = int(inches * Length._EMUS_PER_INCH)\n        return Length.__new__(cls, emu)\n\n\n[docs]class Cm(Length):\n    \"\"\"Convenience constructor for length in centimeters, e.g. ``height = Cm(12)``.\"\"\"\n\n    def __new__(cls, cm: float):\n        emu = int(cm * Length._EMUS_PER_CM)\n        return Length.__new__(cls, emu)\n\n\n[docs]class Emu(Length):\n    \"\"\"Convenience constructor for length in English Metric Units, e.g. ``width =\n    Emu(457200)``.\"\"\"\n\n    def __new__(cls, emu: int):\n        return Length.__new__(cls, int(emu))\n\n\n[docs]class Mm(Length):\n    \"\"\"Convenience constructor for length in millimeters, e.g. ``width = Mm(240.5)``.\"\"\"\n\n    def __new__(cls, mm: float):\n        emu = int(mm * Length._EMUS_PER_MM)\n        return Length.__new__(cls, emu)\n\n\n[docs]class Pt(Length):\n    \"\"\"Convenience value class for specifying a length in points.\"\"\"\n\n    def __new__(cls, points: float):\n        emu = int(points * Length._EMUS_PER_PT)\n        return Length.__new__(cls, emu)\n\n\n[docs]class Twips(Length):\n    \"\"\"Convenience constructor for length in twips, e.g. ``width = Twips(42)``.\n\n    A twip is a twentieth of a point, 635 EMU.\n    \"\"\"\n\n    def __new__(cls, twips: float):\n        emu = int(twips * Length._EMUS_PER_TWIP)\n        return Length.__new__(cls, emu)\n\n\n[docs]class RGBColor(Tuple[int, int, int]):\n    \"\"\"Immutable value object defining a particular RGB color.\"\"\"\n\n    def __new__(cls, r: int, g: int, b: int):\n        msg = \"RGBColor() takes three integer values 0-255\"\n        for val in (r, g, b):\n            if (\n                not isinstance(val, int)  # pyright: ignore[reportUnnecessaryIsInstance]\n                or val < 0\n                or val > 255\n            ):\n                raise ValueError(msg)\n        return super(RGBColor, cls).__new__(cls, (r, g, b))\n\n    def __repr__(self):\n        return \"RGBColor(0x%02x, 0x%02x, 0x%02x)\" % self\n\n    def __str__(self):\n        \"\"\"Return a hex string rgb value, like '3C2F80'.\"\"\"\n        return \"%02X%02X%02X\" % self\n\n[docs]    @classmethod\n    def from_string(cls, rgb_hex_str: str) -> RGBColor:\n        \"\"\"Return a new instance from an RGB color hex string like ``'3C2F80'``.\"\"\"\n        r = int(rgb_hex_str[:2], 16)\n        g = int(rgb_hex_str[2:4], 16)\n        b = int(rgb_hex_str[4:], 16)\n        return cls(r, g, b)\n\n\nT = TypeVar(\"T\")\n\n\nclass lazyproperty(Generic[T]):\n    \"\"\"Decorator like @property, but evaluated only on first access.\n\n    Like @property, this can only be used to decorate methods having only a `self`\n    parameter, and is accessed like an attribute on an instance, i.e. trailing\n    parentheses are not used. Unlike @property, the decorated method is only evaluated\n    on first access; the resulting value is cached and that same value returned on\n    second and later access without re-evaluation of the method.\n\n    Like @property, this class produces a *data descriptor* object, which is stored in\n    the __dict__ of the *class* under the name of the decorated method ('fget'\n    nominally). The cached value is stored in the __dict__ of the *instance* under that\n    same name.\n\n    Because it is a data descriptor (as opposed to a *non-data descriptor*), its\n    `__get__()` method is executed on each access of the decorated attribute; the\n    __dict__ item of the same name is \"shadowed\" by the descriptor.\n\n    While this may represent a performance improvement over a property, its greater\n    benefit may be its other characteristics. One common use is to construct\n    collaborator objects, removing that \"real work\" from the constructor, while still\n    only executing once. It also de-couples client code from any sequencing\n    considerations; if it's accessed from more than one location, it's assured it will\n    be ready whenever needed.\n\n    Loosely based on: https://stackoverflow.com/a/6849299/1902513.\n\n    A lazyproperty is read-only. There is no counterpart to the optional \"setter\" (or\n    deleter) behavior of an @property. This is critically important to maintaining its\n    immutability and idempotence guarantees. Attempting to assign to a lazyproperty\n    raises AttributeError unconditionally.\n\n    The parameter names in the methods below correspond to this usage example::\n\n        class Obj(object)\n\n            @lazyproperty\n            def fget(self):\n                return 'some result'\n\n        obj = Obj()\n\n    Not suitable for wrapping a function (as opposed to a method) because it is not\n    callable.\"\"\"\n\n    def __init__(self, fget: Callable[..., T]) -> None:\n        \"\"\"*fget* is the decorated method (a \"getter\" function).\n\n        A lazyproperty is read-only, so there is only an *fget* function (a regular\n        @property can also have an fset and fdel function). This name was chosen for\n        consistency with Python's `property` class which uses this name for the\n        corresponding parameter.\n        \"\"\"\n        # --- maintain a reference to the wrapped getter method\n        self._fget = fget\n        # --- and store the name of that decorated method\n        self._name = fget.__name__\n        # --- adopt fget's __name__, __doc__, and other attributes\n        functools.update_wrapper(self, fget)  # pyright: ignore\n\n    def __get__(self, obj: Any, type: Any = None) -> T:\n        \"\"\"Called on each access of 'fget' attribute on class or instance.\n\n        *self* is this instance of a lazyproperty descriptor \"wrapping\" the property\n        method it decorates (`fget`, nominally).\n\n        *obj* is the \"host\" object instance when the attribute is accessed from an\n        object instance, e.g. `obj = Obj(); obj.fget`. *obj* is None when accessed on\n        the class, e.g. `Obj.fget`.\n\n        *type* is the class hosting the decorated getter method (`fget`) on both class\n        and instance attribute access.\n        \"\"\"\n        # --- when accessed on class, e.g. Obj.fget, just return this descriptor\n        # --- instance (patched above to look like fget).\n        if obj is None:\n            return self  # type: ignore\n\n        # --- when accessed on instance, start by checking instance __dict__ for\n        # --- item with key matching the wrapped function's name\n        value = obj.__dict__.get(self._name)\n        if value is None:\n            # --- on first access, the __dict__ item will be absent. Evaluate fget()\n            # --- and store that value in the (otherwise unused) host-object\n            # --- __dict__ value of same name ('fget' nominally)\n            value = self._fget(obj)\n            obj.__dict__[self._name] = value\n        return cast(T, value)\n\n    def __set__(self, obj: Any, value: Any) -> None:\n        \"\"\"Raises unconditionally, to preserve read-only behavior.\n\n        This decorator is intended to implement immutable (and idempotent) object\n        attributes. For that reason, assignment to this property must be explicitly\n        prevented.\n\n        If this __set__ method was not present, this descriptor would become a\n        *non-data descriptor*. That would be nice because the cached value would be\n        accessed directly once set (__dict__ attrs have precedence over non-data\n        descriptors on instance attribute lookup). The problem is, there would be\n        nothing to stop assignment to the cached value, which would overwrite the result\n        of `fget()` and break both the immutability and idempotence guarantees of this\n        decorator.\n\n        The performance with this __set__() method in place was roughly 0.4 usec per\n        access when measured on a 2.8GHz development machine; so quite snappy and\n        probably not a rich target for optimization efforts.\n        \"\"\"\n        raise AttributeError(\"can't set attribute\")\n\n\ndef write_only_property(f: Callable[[Any, Any], None]):\n    \"\"\"@write_only_property decorator.\n\n    Creates a property (descriptor attribute) that accepts assignment, but not getattr\n    (use in an expression).\n    \"\"\"\n    docstring = f.__doc__\n\n    return property(fset=f, doc=docstring)\n\n\nclass ElementProxy:\n    \"\"\"Base class for lxml element proxy classes.\n\n    An element proxy class is one whose primary responsibilities are fulfilled by\n    manipulating the attributes and child elements of an XML element. They are the most\n    common type of class in python-docx other than custom element (oxml) classes.\n    \"\"\"\n\n    def __init__(self, element: BaseOxmlElement, parent: t.ProvidesXmlPart | None = None):\n        self._element = element\n        self._parent = parent\n\n    def __eq__(self, other: object):\n        \"\"\"Return |True| if this proxy object refers to the same oxml element as does\n        `other`.\n\n        ElementProxy objects are value objects and should maintain no mutable local\n        state. Equality for proxy objects is defined as referring to the same XML\n        element, whether or not they are the same proxy object instance.\n        \"\"\"\n        if not isinstance(other, ElementProxy):\n            return False\n        return self._element is other._element\n\n    def __ne__(self, other: object):\n        if not isinstance(other, ElementProxy):\n            return True\n        return self._element is not other._element\n\n    @property\n    def element(self):\n        \"\"\"The lxml element proxied by this object.\"\"\"\n        return self._element\n\n    @property\n    def part(self) -> XmlPart:\n        \"\"\"The package part containing this object.\"\"\"\n        if self._parent is None:\n            raise ValueError(\"part is not accessible from this element\")\n        return self._parent.part\n\n\nclass Parented:\n    \"\"\"Provides common services for document elements that occur below a part but may\n    occasionally require an ancestor object to provide a service, such as add or drop a\n    relationship.\n\n    Provides ``self._parent`` attribute to subclasses.\n    \"\"\"\n\n    def __init__(self, parent: t.ProvidesXmlPart):\n        self._parent = parent\n\n    @property\n    def part(self):\n        \"\"\"The package part containing this object.\"\"\"\n        return self._parent.part\n\n\nclass StoryChild:\n    \"\"\"A document element within a story part.\n\n    Story parts include DocumentPart and Header/FooterPart and can contain block items\n    (paragraphs and tables). Items from the block-item subtree occasionally require an\n    ancestor object to provide access to part-level or package-level items like styles\n    or images or to add or drop a relationship.\n\n    Provides `self._parent` attribute to subclasses.\n    \"\"\"\n\n    def __init__(self, parent: t.ProvidesStoryPart):\n        self._parent = parent\n\n    @property\n    def part(self) -> StoryPart:\n        \"\"\"The package part containing this object.\"\"\"\n        return self._parent.part\n\n\nclass TextAccumulator:\n    \"\"\"Accepts `str` fragments and joins them together, in order, on `.pop().\n\n    Handy when text in a stream is broken up arbitrarily and you want to join it back\n    together within certain bounds. The optional `separator` argument determines how\n    the text fragments are punctuated, defaulting to the empty string.\n    \"\"\"\n\n    def __init__(self, separator: str = \"\"):\n        self._separator = separator\n        self._texts: List[str] = []\n\n    def push(self, text: str) -> None:\n        \"\"\"Add a text fragment to the accumulator.\"\"\"\n        self._texts.append(text)\n\n    def pop(self) -> Iterator[str]:\n        \"\"\"Generate sero-or-one str from those accumulated.\n\n        Using `yield from accum.pop()` in a generator setting avoids producing an empty\n        string when no text is in the accumulator.\n        \"\"\"\n        if not self._texts:\n            return\n        text = self._separator.join(self._texts)\n        self._texts.clear()\n        yield text"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shared.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shared.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shared.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shared.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabLeader.html"
    },
    {
        "title": "WD_TAB_LEADER¶",
        "content": [
            "Specifies the character to use as the leader with formatted tabs.",
            "WD_TAB_ALIGNMENT",
            "WD_TABLE_DIRECTION"
        ],
        "code": [
            "WD_TAB_LEADER",
            "WD_TAB_ALIGNMENT",
            "WD_TABLE_DIRECTION"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabLeader.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabLeader.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabLeader.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdTabLeader.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/section.html"
    },
    {
        "title": "Source code for docx.section",
        "content": [],
        "code": [
            "\"\"\"The |Section| object and related proxy classes.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Iterator, List, Sequence, overload\n\nfrom docx.blkcntnr import BlockItemContainer\nfrom docx.enum.section import WD_HEADER_FOOTER\nfrom docx.oxml.text.paragraph import CT_P\nfrom docx.parts.hdrftr import FooterPart, HeaderPart\nfrom docx.shared import lazyproperty\nfrom docx.table import Table\nfrom docx.text.paragraph import Paragraph\n\nif TYPE_CHECKING:\n    from docx.enum.section import WD_ORIENTATION, WD_SECTION_START\n    from docx.oxml.document import CT_Document\n    from docx.oxml.section import CT_SectPr\n    from docx.parts.document import DocumentPart\n    from docx.parts.story import StoryPart\n    from docx.shared import Length\n\n\n[docs]class Section:\n    \"\"\"Document section, providing access to section and page setup settings.\n\n    Also provides access to headers and footers.\n    \"\"\"\n\n    def __init__(self, sectPr: CT_SectPr, document_part: DocumentPart):\n        super(Section, self).__init__()\n        self._sectPr = sectPr\n        self._document_part = document_part\n\n    @property\n    def bottom_margin(self) -> Length | None:\n        \"\"\"Read/write. Bottom margin for pages in this section, in EMU.\n\n        `None` when no bottom margin has been specified. Assigning |None| removes any\n        bottom-margin setting.\n        \"\"\"\n        return self._sectPr.bottom_margin\n\n    @bottom_margin.setter\n    def bottom_margin(self, value: int | Length | None):\n        self._sectPr.bottom_margin = value\n\n    @property\n    def different_first_page_header_footer(self) -> bool:\n        \"\"\"True if this section displays a distinct first-page header and footer.\n\n        Read/write. The definition of the first-page header and footer are accessed\n        using :attr:`.first_page_header` and :attr:`.first_page_footer` respectively.\n        \"\"\"\n        return self._sectPr.titlePg_val\n\n    @different_first_page_header_footer.setter\n    def different_first_page_header_footer(self, value: bool):\n        self._sectPr.titlePg_val = value\n\n    @property\n    def even_page_footer(self) -> _Footer:\n        \"\"\"|_Footer| object defining footer content for even pages.\n\n        The content of this footer definition is ignored unless the document setting\n        :attr:`~.Settings.odd_and_even_pages_header_footer` is set True.\n        \"\"\"\n        return _Footer(self._sectPr, self._document_part, WD_HEADER_FOOTER.EVEN_PAGE)\n\n    @property\n    def even_page_header(self) -> _Header:\n        \"\"\"|_Header| object defining header content for even pages.\n\n        The content of this header definition is ignored unless the document setting\n        :attr:`~.Settings.odd_and_even_pages_header_footer` is set True.\n        \"\"\"\n        return _Header(self._sectPr, self._document_part, WD_HEADER_FOOTER.EVEN_PAGE)\n\n    @property\n    def first_page_footer(self) -> _Footer:\n        \"\"\"|_Footer| object defining footer content for the first page of this section.\n\n        The content of this footer definition is ignored unless the property\n        :attr:`.different_first_page_header_footer` is set True.\n        \"\"\"\n        return _Footer(self._sectPr, self._document_part, WD_HEADER_FOOTER.FIRST_PAGE)\n\n    @property\n    def first_page_header(self) -> _Header:\n        \"\"\"|_Header| object defining header content for the first page of this section.\n\n        The content of this header definition is ignored unless the property\n        :attr:`.different_first_page_header_footer` is set True.\n        \"\"\"\n        return _Header(self._sectPr, self._document_part, WD_HEADER_FOOTER.FIRST_PAGE)\n\n[docs]    @lazyproperty\n    def footer(self) -> _Footer:\n        \"\"\"|_Footer| object representing default page footer for this section.\n\n        The default footer is used for odd-numbered pages when separate odd/even footers\n        are enabled. It is used for both odd and even-numbered pages otherwise.\n        \"\"\"\n        return _Footer(self._sectPr, self._document_part, WD_HEADER_FOOTER.PRIMARY)\n\n    @property\n    def footer_distance(self) -> Length | None:\n        \"\"\"Distance from bottom edge of page to bottom edge of the footer.\n\n        Read/write. |None| if no setting is present in the XML.\n        \"\"\"\n        return self._sectPr.footer\n\n    @footer_distance.setter\n    def footer_distance(self, value: int | Length | None):\n        self._sectPr.footer = value\n\n    @property\n    def gutter(self) -> Length | None:\n        \"\"\"|Length| object representing page gutter size in English Metric Units.\n\n        Read/write. The page gutter is extra spacing added to the `inner` margin to\n        ensure even margins after page binding. Generally only used in book-bound\n        documents with double-sided and facing pages.\n\n        This setting applies to all pages in this section.\n\n        \"\"\"\n        return self._sectPr.gutter\n\n    @gutter.setter\n    def gutter(self, value: int | Length | None):\n        self._sectPr.gutter = value\n\n[docs]    @lazyproperty\n    def header(self) -> _Header:\n        \"\"\"|_Header| object representing default page header for this section.\n\n        The default header is used for odd-numbered pages when separate odd/even headers\n        are enabled. It is used for both odd and even-numbered pages otherwise.\n        \"\"\"\n        return _Header(self._sectPr, self._document_part, WD_HEADER_FOOTER.PRIMARY)\n\n    @property\n    def header_distance(self) -> Length | None:\n        \"\"\"Distance from top edge of page to top edge of header.\n\n        Read/write. |None| if no setting is present in the XML. Assigning |None| causes\n        default value to be used.\n        \"\"\"\n        return self._sectPr.header\n\n    @header_distance.setter\n    def header_distance(self, value: int | Length | None):\n        self._sectPr.header = value\n\n[docs]    def iter_inner_content(self) -> Iterator[Paragraph | Table]:\n        \"\"\"Generate each Paragraph or Table object in this `section`.\n\n        Items appear in document order.\n        \"\"\"\n        for element in self._sectPr.iter_inner_content():\n            yield (Paragraph(element, self) if isinstance(element, CT_P) else Table(element, self))\n\n    @property\n    def left_margin(self) -> Length | None:\n        \"\"\"|Length| object representing the left margin for all pages in this section in\n        English Metric Units.\"\"\"\n        return self._sectPr.left_margin\n\n    @left_margin.setter\n    def left_margin(self, value: int | Length | None):\n        self._sectPr.left_margin = value\n\n    @property\n    def orientation(self) -> WD_ORIENTATION:\n        \"\"\":ref:`WdOrientation` member specifying page orientation for this section.\n\n        One of ``WD_ORIENT.PORTRAIT`` or ``WD_ORIENT.LANDSCAPE``.\n        \"\"\"\n        return self._sectPr.orientation\n\n    @orientation.setter\n    def orientation(self, value: WD_ORIENTATION | None):\n        self._sectPr.orientation = value\n\n    @property\n    def page_height(self) -> Length | None:\n        \"\"\"Total page height used for this section.\n\n        This value is inclusive of all edge spacing values such as margins.\n\n        Page orientation is taken into account, so for example, its expected value\n        would be ``Inches(8.5)`` for letter-sized paper when orientation is landscape.\n        \"\"\"\n        return self._sectPr.page_height\n\n    @page_height.setter\n    def page_height(self, value: Length | None):\n        self._sectPr.page_height = value\n\n    @property\n    def page_width(self) -> Length | None:\n        \"\"\"Total page width used for this section.\n\n        This value is like \"paper size\" and includes all edge spacing values such as\n        margins.\n\n        Page orientation is taken into account, so for example, its expected value\n        would be ``Inches(11)`` for letter-sized paper when orientation is landscape.\n        \"\"\"\n        return self._sectPr.page_width\n\n    @page_width.setter\n    def page_width(self, value: Length | None):\n        self._sectPr.page_width = value\n\n    @property\n    def part(self) -> StoryPart:\n        return self._document_part\n\n    @property\n    def right_margin(self) -> Length | None:\n        \"\"\"|Length| object representing the right margin for all pages in this section\n        in English Metric Units.\"\"\"\n        return self._sectPr.right_margin\n\n    @right_margin.setter\n    def right_margin(self, value: Length | None):\n        self._sectPr.right_margin = value\n\n    @property\n    def start_type(self) -> WD_SECTION_START:\n        \"\"\"Type of page-break (if any) inserted at the start of this section.\n\n        For exmple, ``WD_SECTION_START.ODD_PAGE`` if the section should begin on the\n        next odd page, possibly inserting two page-breaks instead of one.\n        \"\"\"\n        return self._sectPr.start_type\n\n    @start_type.setter\n    def start_type(self, value: WD_SECTION_START | None):\n        self._sectPr.start_type = value\n\n    @property\n    def top_margin(self) -> Length | None:\n        \"\"\"|Length| object representing the top margin for all pages in this section in\n        English Metric Units.\"\"\"\n        return self._sectPr.top_margin\n\n    @top_margin.setter\n    def top_margin(self, value: Length | None):\n        self._sectPr.top_margin = value\n\n\n[docs]class Sections(Sequence[Section]):\n    \"\"\"Sequence of |Section| objects corresponding to the sections in the document.\n\n    Supports ``len()``, iteration, and indexed access.\n    \"\"\"\n\n    def __init__(self, document_elm: CT_Document, document_part: DocumentPart):\n        super(Sections, self).__init__()\n        self._document_elm = document_elm\n        self._document_part = document_part\n\n    @overload\n    def __getitem__(self, key: int) -> Section: ...\n\n    @overload\n    def __getitem__(self, key: slice) -> List[Section]: ...\n\n    def __getitem__(self, key: int | slice) -> Section | List[Section]:\n        if isinstance(key, slice):\n            return [\n                Section(sectPr, self._document_part)\n                for sectPr in self._document_elm.sectPr_lst[key]\n            ]\n        return Section(self._document_elm.sectPr_lst[key], self._document_part)\n\n    def __iter__(self) -> Iterator[Section]:\n        for sectPr in self._document_elm.sectPr_lst:\n            yield Section(sectPr, self._document_part)\n\n    def __len__(self) -> int:\n        return len(self._document_elm.sectPr_lst)\n\n\nclass _BaseHeaderFooter(BlockItemContainer):\n    \"\"\"Base class for header and footer classes.\"\"\"\n\n    def __init__(\n        self,\n        sectPr: CT_SectPr,\n        document_part: DocumentPart,\n        header_footer_index: WD_HEADER_FOOTER,\n    ):\n        self._sectPr = sectPr\n        self._document_part = document_part\n        self._hdrftr_index = header_footer_index\n\n    @property\n    def is_linked_to_previous(self) -> bool:\n        \"\"\"``True`` if this header/footer uses the definition from the prior section.\n\n        ``False`` if this header/footer has an explicit definition.\n\n        Assigning ``True`` to this property removes the header/footer definition for\n        this section, causing it to \"inherit\" the corresponding definition of the prior\n        section. Assigning ``False`` causes a new, empty definition to be added for this\n        section, but only if no definition is already present.\n        \"\"\"\n        # ---absence of a header/footer part indicates \"linked\" behavior---\n        return not self._has_definition\n\n    @is_linked_to_previous.setter\n    def is_linked_to_previous(self, value: bool) -> None:\n        new_state = bool(value)\n        # ---do nothing when value is not being changed---\n        if new_state == self.is_linked_to_previous:\n            return\n        if new_state is True:\n            self._drop_definition()\n        else:\n            self._add_definition()\n\n    @property\n    def part(self) -> HeaderPart | FooterPart:\n        \"\"\"The |HeaderPart| or |FooterPart| for this header/footer.\n\n        This overrides `BlockItemContainer.part` and is required to support image\n        insertion and perhaps other content like hyperlinks.\n        \"\"\"\n        # ---should not appear in documentation;\n        # ---not an interface property, even though public\n        return self._get_or_add_definition()\n\n    def _add_definition(self) -> HeaderPart | FooterPart:\n        \"\"\"Return newly-added header/footer part.\"\"\"\n        raise NotImplementedError(\"must be implemented by each subclass\")\n\n    @property\n    def _definition(self) -> HeaderPart | FooterPart:\n        \"\"\"|HeaderPart| or |FooterPart| object containing header/footer content.\"\"\"\n        raise NotImplementedError(\"must be implemented by each subclass\")\n\n    def _drop_definition(self) -> None:\n        \"\"\"Remove header/footer part containing the definition of this header/footer.\"\"\"\n        raise NotImplementedError(\"must be implemented by each subclass\")\n\n    @property\n    def _element(self):\n        \"\"\"`w:hdr` or `w:ftr` element, root of header/footer part.\"\"\"\n        return self._get_or_add_definition().element\n\n    def _get_or_add_definition(self) -> HeaderPart | FooterPart:\n        \"\"\"Return HeaderPart or FooterPart object for this section.\n\n        If this header/footer inherits its content, the part for the prior header/footer\n        is returned; this process continue recursively until a definition is found. If\n        the definition cannot be inherited (because the header/footer belongs to the\n        first section), a new definition is added for that first section and then\n        returned.\n        \"\"\"\n        # ---note this method is called recursively to access inherited definitions---\n        # ---case-1: definition is not inherited---\n        if self._has_definition:\n            return self._definition\n        # ---case-2: definition is inherited and belongs to second-or-later section---\n        prior_headerfooter = self._prior_headerfooter\n        if prior_headerfooter:\n            return prior_headerfooter._get_or_add_definition()\n        # ---case-3: definition is inherited, but belongs to first section---\n        return self._add_definition()\n\n    @property\n    def _has_definition(self) -> bool:\n        \"\"\"True if this header/footer has a related part containing its definition.\"\"\"\n        raise NotImplementedError(\"must be implemented by each subclass\")\n\n    @property\n    def _prior_headerfooter(self) -> _Header | _Footer | None:\n        \"\"\"|_Header| or |_Footer| proxy on prior sectPr element.\n\n        Returns None if this is first section.\n        \"\"\"\n        raise NotImplementedError(\"must be implemented by each subclass\")\n\n\n[docs]class _Footer(_BaseHeaderFooter):\n    \"\"\"Page footer, used for all three types (default, even-page, and first-page).\n\n    Note that, like a document or table cell, a footer must contain a minimum of one\n    paragraph and a new or otherwise \"empty\" footer contains a single empty paragraph.\n    This first paragraph can be accessed as `footer.paragraphs[0]` for purposes of\n    adding content to it. Using :meth:`add_paragraph()` by itself to add content will\n    leave an empty paragraph above the newly added one.\n    \"\"\"\n\n    def _add_definition(self) -> FooterPart:\n        \"\"\"Return newly-added footer part.\"\"\"\n        footer_part, rId = self._document_part.add_footer_part()\n        self._sectPr.add_footerReference(self._hdrftr_index, rId)\n        return footer_part\n\n    @property\n    def _definition(self):\n        \"\"\"|FooterPart| object containing content of this footer.\"\"\"\n        footerReference = self._sectPr.get_footerReference(self._hdrftr_index)\n        # -- currently this is never called when `._has_definition` evaluates False --\n        assert footerReference is not None\n        return self._document_part.footer_part(footerReference.rId)\n\n    def _drop_definition(self):\n        \"\"\"Remove footer definition (footer part) associated with this section.\"\"\"\n        rId = self._sectPr.remove_footerReference(self._hdrftr_index)\n        self._document_part.drop_rel(rId)\n\n    @property\n    def _has_definition(self) -> bool:\n        \"\"\"True if a footer is defined for this section.\"\"\"\n        footerReference = self._sectPr.get_footerReference(self._hdrftr_index)\n        return footerReference is not None\n\n    @property\n    def _prior_headerfooter(self):\n        \"\"\"|_Footer| proxy on prior sectPr element or None if this is first section.\"\"\"\n        preceding_sectPr = self._sectPr.preceding_sectPr\n        return (\n            None\n            if preceding_sectPr is None\n            else _Footer(preceding_sectPr, self._document_part, self._hdrftr_index)\n        )\n\n\n[docs]class _Header(_BaseHeaderFooter):\n    \"\"\"Page header, used for all three types (default, even-page, and first-page).\n\n    Note that, like a document or table cell, a header must contain a minimum of one\n    paragraph and a new or otherwise \"empty\" header contains a single empty paragraph.\n    This first paragraph can be accessed as `header.paragraphs[0]` for purposes of\n    adding content to it. Using :meth:`add_paragraph()` by itself to add content will\n    leave an empty paragraph above the newly added one.\n    \"\"\"\n\n    def _add_definition(self):\n        \"\"\"Return newly-added header part.\"\"\"\n        header_part, rId = self._document_part.add_header_part()\n        self._sectPr.add_headerReference(self._hdrftr_index, rId)\n        return header_part\n\n    @property\n    def _definition(self):\n        \"\"\"|HeaderPart| object containing content of this header.\"\"\"\n        headerReference = self._sectPr.get_headerReference(self._hdrftr_index)\n        # -- currently this is never called when `._has_definition` evaluates False --\n        assert headerReference is not None\n        return self._document_part.header_part(headerReference.rId)\n\n    def _drop_definition(self):\n        \"\"\"Remove header definition associated with this section.\"\"\"\n        rId = self._sectPr.remove_headerReference(self._hdrftr_index)\n        self._document_part.drop_header_part(rId)\n\n    @property\n    def _has_definition(self) -> bool:\n        \"\"\"True if a header is explicitly defined for this section.\"\"\"\n        headerReference = self._sectPr.get_headerReference(self._hdrftr_index)\n        return headerReference is not None\n\n    @property\n    def _prior_headerfooter(self):\n        \"\"\"|_Header| proxy on prior sectPr element or None if this is first section.\"\"\"\n        preceding_sectPr = self._sectPr.preceding_sectPr\n        return (\n            None\n            if preceding_sectPr is None\n            else _Header(preceding_sectPr, self._document_part, self._hdrftr_index)\n        )"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/section.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/section.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/section.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/section.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/tabstops.html"
    },
    {
        "title": "Source code for docx.text.tabstops",
        "content": [],
        "code": [
            "\"\"\"Tabstop-related proxy types.\"\"\"\n\nfrom docx.enum.text import WD_TAB_ALIGNMENT, WD_TAB_LEADER\nfrom docx.shared import ElementProxy\n\n\n[docs]class TabStops(ElementProxy):\n    \"\"\"A sequence of |TabStop| objects providing access to the tab stops of a paragraph\n    or paragraph style.\n\n    Supports iteration, indexed access, del, and len(). It is accesed using the\n    :attr:`~.ParagraphFormat.tab_stops` property of ParagraphFormat; it is not intended\n    to be constructed directly.\n    \"\"\"\n\n    def __init__(self, element):\n        super(TabStops, self).__init__(element, None)\n        self._pPr = element\n\n    def __delitem__(self, idx):\n        \"\"\"Remove the tab at offset `idx` in this sequence.\"\"\"\n        tabs = self._pPr.tabs\n        try:\n            tabs.remove(tabs[idx])\n        except (AttributeError, IndexError):\n            raise IndexError(\"tab index out of range\")\n\n        if len(tabs) == 0:\n            self._pPr.remove(tabs)\n\n    def __getitem__(self, idx):\n        \"\"\"Enables list-style access by index.\"\"\"\n        tabs = self._pPr.tabs\n        if tabs is None:\n            raise IndexError(\"TabStops object is empty\")\n        tab = tabs.tab_lst[idx]\n        return TabStop(tab)\n\n    def __iter__(self):\n        \"\"\"Generate a TabStop object for each of the w:tab elements, in XML document\n        order.\"\"\"\n        tabs = self._pPr.tabs\n        if tabs is not None:\n            for tab in tabs.tab_lst:\n                yield TabStop(tab)\n\n    def __len__(self):\n        tabs = self._pPr.tabs\n        if tabs is None:\n            return 0\n        return len(tabs.tab_lst)\n\n[docs]    def add_tab_stop(\n        self, position, alignment=WD_TAB_ALIGNMENT.LEFT, leader=WD_TAB_LEADER.SPACES\n    ):\n        \"\"\"Add a new tab stop at `position`, a |Length| object specifying the location\n        of the tab stop relative to the paragraph edge.\n\n        A negative `position` value is valid and appears in hanging indentation. Tab\n        alignment defaults to left, but may be specified by passing a member of the\n        :ref:`WdTabAlignment` enumeration as `alignment`. An optional leader character\n        can be specified by passing a member of the :ref:`WdTabLeader` enumeration as\n        `leader`.\n        \"\"\"\n        tabs = self._pPr.get_or_add_tabs()\n        tab = tabs.insert_tab_in_order(position, alignment, leader)\n        return TabStop(tab)\n\n[docs]    def clear_all(self):\n        \"\"\"Remove all custom tab stops.\"\"\"\n        self._pPr._remove_tabs()\n\n\n[docs]class TabStop(ElementProxy):\n    \"\"\"An individual tab stop applying to a paragraph or style.\n\n    Accessed using list semantics on its containing |TabStops| object.\n    \"\"\"\n\n    def __init__(self, element):\n        super(TabStop, self).__init__(element, None)\n        self._tab = element\n\n    @property\n    def alignment(self):\n        \"\"\"A member of :ref:`WdTabAlignment` specifying the alignment setting for this\n        tab stop.\n\n        Read/write.\n        \"\"\"\n        return self._tab.val\n\n    @alignment.setter\n    def alignment(self, value):\n        self._tab.val = value\n\n    @property\n    def leader(self):\n        \"\"\"A member of :ref:`WdTabLeader` specifying a repeating character used as a\n        \"leader\", filling in the space spanned by this tab.\n\n        Assigning |None| produces the same result as assigning `WD_TAB_LEADER.SPACES`.\n        Read/write.\n        \"\"\"\n        return self._tab.leader\n\n    @leader.setter\n    def leader(self, value):\n        self._tab.leader = value\n\n    @property\n    def position(self):\n        \"\"\"A |Length| object representing the distance of this tab stop from the inside\n        edge of the paragraph.\n\n        May be positive or negative. Read/write.\n        \"\"\"\n        return self._tab.pos\n\n    @position.setter\n    def position(self, value):\n        tab = self._tab\n        tabs = tab.getparent()\n        self._tab = tabs.insert_tab_in_order(value, tab.val, tab.leader)\n        tabs.remove(tab)"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/tabstops.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/tabstops.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/tabstops.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/tabstops.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shape.html"
    },
    {
        "title": "Source code for docx.shape",
        "content": [],
        "code": [
            "\"\"\"Objects related to shapes.\n\nA shape is a visual object that appears on the drawing layer of a document.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom docx.enum.shape import WD_INLINE_SHAPE\nfrom docx.oxml.ns import nsmap\nfrom docx.shared import Parented\n\nif TYPE_CHECKING:\n    from docx.oxml.document import CT_Body\n    from docx.oxml.shape import CT_Inline\n    from docx.parts.story import StoryPart\n    from docx.shared import Length\n\n\n[docs]class InlineShapes(Parented):\n    \"\"\"Sequence of |InlineShape| instances, supporting len(), iteration, and indexed access.\"\"\"\n\n    def __init__(self, body_elm: CT_Body, parent: StoryPart):\n        super(InlineShapes, self).__init__(parent)\n        self._body = body_elm\n\n    def __getitem__(self, idx: int):\n        \"\"\"Provide indexed access, e.g. 'inline_shapes[idx]'.\"\"\"\n        try:\n            inline = self._inline_lst[idx]\n        except IndexError:\n            msg = \"inline shape index [%d] out of range\" % idx\n            raise IndexError(msg)\n\n        return InlineShape(inline)\n\n    def __iter__(self):\n        return (InlineShape(inline) for inline in self._inline_lst)\n\n    def __len__(self):\n        return len(self._inline_lst)\n\n    @property\n    def _inline_lst(self):\n        body = self._body\n        xpath = \"//w:p/w:r/w:drawing/wp:inline\"\n        return body.xpath(xpath)\n\n\n[docs]class InlineShape:\n    \"\"\"Proxy for an ``<wp:inline>`` element, representing the container for an inline\n    graphical object.\"\"\"\n\n    def __init__(self, inline: CT_Inline):\n        super(InlineShape, self).__init__()\n        self._inline = inline\n\n    @property\n    def height(self) -> Length:\n        \"\"\"Read/write.\n\n        The display height of this inline shape as an |Emu| instance.\n        \"\"\"\n        return self._inline.extent.cy\n\n    @height.setter\n    def height(self, cy: Length):\n        self._inline.extent.cy = cy\n        self._inline.graphic.graphicData.pic.spPr.cy = cy\n\n    @property\n    def type(self):\n        \"\"\"The type of this inline shape as a member of\n        ``docx.enum.shape.WD_INLINE_SHAPE``, e.g. ``LINKED_PICTURE``.\n\n        Read-only.\n        \"\"\"\n        graphicData = self._inline.graphic.graphicData\n        uri = graphicData.uri\n        if uri == nsmap[\"pic\"]:\n            blip = graphicData.pic.blipFill.blip\n            if blip.link is not None:\n                return WD_INLINE_SHAPE.LINKED_PICTURE\n            return WD_INLINE_SHAPE.PICTURE\n        if uri == nsmap[\"c\"]:\n            return WD_INLINE_SHAPE.CHART\n        if uri == nsmap[\"dgm\"]:\n            return WD_INLINE_SHAPE.SMART_ART\n        return WD_INLINE_SHAPE.NOT_IMPLEMENTED\n\n    @property\n    def width(self):\n        \"\"\"Read/write.\n\n        The display width of this inline shape as an |Emu| instance.\n        \"\"\"\n        return self._inline.extent.cx\n\n    @width.setter\n    def width(self, cx: Length):\n        self._inline.extent.cx = cx\n        self._inline.graphic.graphicData.pic.spPr.cx = cx"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shape.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shape.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shape.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/shape.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/styles.html"
    },
    {
        "title": "Source code for docx.styles.styles",
        "content": [],
        "code": [
            "\"\"\"Styles object, container for all objects in the styles part.\"\"\"\n\nfrom __future__ import annotations\n\nfrom warnings import warn\n\nfrom docx.enum.style import WD_STYLE_TYPE\nfrom docx.oxml.styles import CT_Styles\nfrom docx.shared import ElementProxy\nfrom docx.styles import BabelFish\nfrom docx.styles.latent import LatentStyles\nfrom docx.styles.style import BaseStyle, StyleFactory\n\n\n[docs]class Styles(ElementProxy):\n    \"\"\"Provides access to the styles defined in a document.\n\n    Accessed using the :attr:`.Document.styles` property. Supports ``len()``, iteration,\n    and dictionary-style access by style name.\n    \"\"\"\n\n    def __init__(self, styles: CT_Styles):\n        super().__init__(styles)\n        self._element = styles\n\n    def __contains__(self, name):\n        \"\"\"Enables `in` operator on style name.\"\"\"\n        internal_name = BabelFish.ui2internal(name)\n        return any(style.name_val == internal_name for style in self._element.style_lst)\n\n    def __getitem__(self, key: str):\n        \"\"\"Enables dictionary-style access by UI name.\n\n        Lookup by style id is deprecated, triggers a warning, and will be removed in a\n        near-future release.\n        \"\"\"\n        style_elm = self._element.get_by_name(BabelFish.ui2internal(key))\n        if style_elm is not None:\n            return StyleFactory(style_elm)\n\n        style_elm = self._element.get_by_id(key)\n        if style_elm is not None:\n            msg = (\n                \"style lookup by style_id is deprecated. Use style name as \"\n                \"key instead.\"\n            )\n            warn(msg, UserWarning, stacklevel=2)\n            return StyleFactory(style_elm)\n\n        raise KeyError(\"no style with name '%s'\" % key)\n\n    def __iter__(self):\n        return (StyleFactory(style) for style in self._element.style_lst)\n\n    def __len__(self):\n        return len(self._element.style_lst)\n\n[docs]    def add_style(self, name, style_type, builtin=False):\n        \"\"\"Return a newly added style object of `style_type` and identified by `name`.\n\n        A builtin style can be defined by passing True for the optional `builtin`\n        argument.\n        \"\"\"\n        style_name = BabelFish.ui2internal(name)\n        if style_name in self:\n            raise ValueError(\"document already contains style '%s'\" % name)\n        style = self._element.add_style_of_type(style_name, style_type, builtin)\n        return StyleFactory(style)\n\n[docs]    def default(self, style_type: WD_STYLE_TYPE):\n        \"\"\"Return the default style for `style_type` or |None| if no default is defined\n        for that type (not common).\"\"\"\n        style = self._element.default_for(style_type)\n        if style is None:\n            return None\n        return StyleFactory(style)\n\n    def get_by_id(self, style_id: str | None, style_type: WD_STYLE_TYPE):\n        \"\"\"Return the style of `style_type` matching `style_id`.\n\n        Returns the default for `style_type` if `style_id` is not found or is |None|, or\n        if the style having `style_id` is not of `style_type`.\n        \"\"\"\n        if style_id is None:\n            return self.default(style_type)\n        return self._get_by_id(style_id, style_type)\n\n    def get_style_id(self, style_or_name, style_type):\n        \"\"\"Return the id of the style corresponding to `style_or_name`, or |None| if\n        `style_or_name` is |None|.\n\n        If `style_or_name` is not a style object, the style is looked up using\n        `style_or_name` as a style name, raising |ValueError| if no style with that name\n        is defined. Raises |ValueError| if the target style is not of `style_type`.\n        \"\"\"\n        if style_or_name is None:\n            return None\n        elif isinstance(style_or_name, BaseStyle):\n            return self._get_style_id_from_style(style_or_name, style_type)\n        else:\n            return self._get_style_id_from_name(style_or_name, style_type)\n\n    @property\n    def latent_styles(self):\n        \"\"\"A |LatentStyles| object providing access to the default behaviors for latent\n        styles and the collection of |_LatentStyle| objects that define overrides of\n        those defaults for a particular named latent style.\"\"\"\n        return LatentStyles(self._element.get_or_add_latentStyles())\n\n    def _get_by_id(self, style_id: str | None, style_type: WD_STYLE_TYPE):\n        \"\"\"Return the style of `style_type` matching `style_id`.\n\n        Returns the default for `style_type` if `style_id` is not found or if the style\n        having `style_id` is not of `style_type`.\n        \"\"\"\n        style = self._element.get_by_id(style_id) if style_id else None\n        if style is None or style.type != style_type:\n            return self.default(style_type)\n        return StyleFactory(style)\n\n    def _get_style_id_from_name(\n        self, style_name: str, style_type: WD_STYLE_TYPE\n    ) -> str | None:\n        \"\"\"Return the id of the style of `style_type` corresponding to `style_name`.\n\n        Returns |None| if that style is the default style for `style_type`. Raises\n        |ValueError| if the named style is not found in the document or does not match\n        `style_type`.\n        \"\"\"\n        return self._get_style_id_from_style(self[style_name], style_type)\n\n    def _get_style_id_from_style(\n        self, style: BaseStyle, style_type: WD_STYLE_TYPE\n    ) -> str | None:\n        \"\"\"Id of `style`, or |None| if it is the default style of `style_type`.\n\n        Raises |ValueError| if style is not of `style_type`.\n        \"\"\"\n        if style.type != style_type:\n            raise ValueError(\n                \"assigned style is type %s, need type %s\" % (style.type, style_type)\n            )\n        if style == self.default(style_type):\n            return None\n        return style.style_id"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/styles.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/styles.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/styles.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/styles/styles.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shared.html"
    },
    {
        "title": "Shared classes¶",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shared.html"
    },
    {
        "title": "Length objects¶",
        "content": [
            "Length values in python-docx are expressed as a standardized Length value object.\nLength is a subclass of int, having all the behavior of an int. In\naddition, it has built-in units conversion properties, e.g.:",
            "Length objects are constructed using a selection of convenience constructors,\nallowing values to be expressed in the units most appropriate to the context.",
            "Base class for length constructor classes Inches, Cm, Mm, Px, and Emu.",
            "Behaves as an int count of English Metric Units, 914,400 to the inch, 36,000 to the\nmm. Provides convenience unit conversion methods in the form of read-only\nproperties. Immutable.",
            "The equivalent length expressed in centimeters (float).",
            "The equivalent length expressed in English Metric Units (int).",
            "The equivalent length expressed in inches (float).",
            "The equivalent length expressed in millimeters (float).",
            "Floating point length in points.",
            "The equivalent length expressed in twips (int).",
            "Convenience constructor for length in inches, e.g. width = Inches(0.5).",
            "Convenience constructor for length in centimeters, e.g. height = Cm(12).",
            "Convenience constructor for length in millimeters, e.g. width = Mm(240.5).",
            "Convenience value class for specifying a length in points.",
            "Convenience constructor for length in twips, e.g. width = Twips(42).",
            "A twip is a twentieth of a point, 635 EMU.",
            "Convenience constructor for length in English Metric Units, e.g. width =\nEmu(457200)."
        ],
        "code": [
            "python-docx",
            "Length",
            "Length",
            "int",
            "int",
            ">>> inline_shape.height\n914400\n>>> inline_shape.height.inches\n1.0",
            "docx.shared.",
            "Length",
            "cm",
            "emu",
            "inches",
            "mm",
            "pt",
            "twips",
            "docx.shared.",
            "Inches",
            "width = Inches(0.5)",
            "docx.shared.",
            "Cm",
            "height = Cm(12)",
            "docx.shared.",
            "Mm",
            "width = Mm(240.5)",
            "docx.shared.",
            "Pt",
            "docx.shared.",
            "Twips",
            "width = Twips(42)",
            "docx.shared.",
            "Emu",
            "width =\nEmu(457200)"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shared.html"
    },
    {
        "title": "RGBColor objects¶",
        "content": [
            "Immutable value object defining a particular RGB color.",
            "r, g, and b are each an integer in the range 0-255 inclusive. Using\nthe hexidecimal integer notation, e.g. 0x42 may enhance readability\nwhere hex RGB values are in use:",
            "Return a new instance from an RGB color hex string like '3C2F80'."
        ],
        "code": [
            "RGBColor",
            "docx.shared.",
            "RGBColor",
            ">>> lavender = RGBColor(0xff, 0x99, 0xcc)",
            "from_string",
            "'3C2F80'"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shared.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "DrawingML objects",
            "Enumerations"
        ],
        "code": [
            "RGBColor"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shared.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shared.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shared.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/shared.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/parfmt.html"
    },
    {
        "title": "Source code for docx.text.parfmt",
        "content": [],
        "code": [
            "\"\"\"Paragraph-related proxy types.\"\"\"\n\nfrom docx.enum.text import WD_LINE_SPACING\nfrom docx.shared import ElementProxy, Emu, Length, Pt, Twips, lazyproperty\nfrom docx.text.tabstops import TabStops\n\n\n[docs]class ParagraphFormat(ElementProxy):\n    \"\"\"Provides access to paragraph formatting such as justification, indentation, line\n    spacing, space before and after, and widow/orphan control.\"\"\"\n\n    @property\n    def alignment(self):\n        \"\"\"A member of the :ref:`WdParagraphAlignment` enumeration specifying the\n        justification setting for this paragraph.\n\n        A value of |None| indicates paragraph alignment is inherited from the style\n        hierarchy.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.jc_val\n\n    @alignment.setter\n    def alignment(self, value):\n        pPr = self._element.get_or_add_pPr()\n        pPr.jc_val = value\n\n    @property\n    def first_line_indent(self):\n        \"\"\"|Length| value specifying the relative difference in indentation for the\n        first line of the paragraph.\n\n        A positive value causes the first line to be indented. A negative value produces\n        a hanging indent. |None| indicates first line indentation is inherited from the\n        style hierarchy.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.first_line_indent\n\n    @first_line_indent.setter\n    def first_line_indent(self, value):\n        pPr = self._element.get_or_add_pPr()\n        pPr.first_line_indent = value\n\n    @property\n    def keep_together(self):\n        \"\"\"|True| if the paragraph should be kept \"in one piece\" and not broken across a\n        page boundary when the document is rendered.\n\n        |None| indicates its effective value is inherited from the style hierarchy.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.keepLines_val\n\n    @keep_together.setter\n    def keep_together(self, value):\n        self._element.get_or_add_pPr().keepLines_val = value\n\n    @property\n    def keep_with_next(self):\n        \"\"\"|True| if the paragraph should be kept on the same page as the subsequent\n        paragraph when the document is rendered.\n\n        For example, this property could be used to keep a section heading on the same\n        page as its first paragraph. |None| indicates its effective value is inherited\n        from the style hierarchy.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.keepNext_val\n\n    @keep_with_next.setter\n    def keep_with_next(self, value):\n        self._element.get_or_add_pPr().keepNext_val = value\n\n    @property\n    def left_indent(self):\n        \"\"\"|Length| value specifying the space between the left margin and the left side\n        of the paragraph.\n\n        |None| indicates the left indent value is inherited from the style hierarchy.\n        Use an |Inches| value object as a convenient way to apply indentation in units\n        of inches.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.ind_left\n\n    @left_indent.setter\n    def left_indent(self, value):\n        pPr = self._element.get_or_add_pPr()\n        pPr.ind_left = value\n\n    @property\n    def line_spacing(self):\n        \"\"\"|float| or |Length| value specifying the space between baselines in\n        successive lines of the paragraph.\n\n        A value of |None| indicates line spacing is inherited from the style hierarchy.\n        A float value, e.g. ``2.0`` or ``1.75``, indicates spacing is applied in\n        multiples of line heights. A |Length| value such as ``Pt(12)`` indicates spacing\n        is a fixed height. The |Pt| value class is a convenient way to apply line\n        spacing in units of points. Assigning |None| resets line spacing to inherit from\n        the style hierarchy.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return self._line_spacing(pPr.spacing_line, pPr.spacing_lineRule)\n\n    @line_spacing.setter\n    def line_spacing(self, value):\n        pPr = self._element.get_or_add_pPr()\n        if value is None:\n            pPr.spacing_line = None\n            pPr.spacing_lineRule = None\n        elif isinstance(value, Length):\n            pPr.spacing_line = value\n            if pPr.spacing_lineRule != WD_LINE_SPACING.AT_LEAST:\n                pPr.spacing_lineRule = WD_LINE_SPACING.EXACTLY\n        else:\n            pPr.spacing_line = Emu(value * Twips(240))\n            pPr.spacing_lineRule = WD_LINE_SPACING.MULTIPLE\n\n    @property\n    def line_spacing_rule(self):\n        \"\"\"A member of the :ref:`WdLineSpacing` enumeration indicating how the value of\n        :attr:`line_spacing` should be interpreted.\n\n        Assigning any of the :ref:`WdLineSpacing` members :attr:`SINGLE`,\n        :attr:`DOUBLE`, or :attr:`ONE_POINT_FIVE` will cause the value of\n        :attr:`line_spacing` to be updated to produce the corresponding line spacing.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return self._line_spacing_rule(pPr.spacing_line, pPr.spacing_lineRule)\n\n    @line_spacing_rule.setter\n    def line_spacing_rule(self, value):\n        pPr = self._element.get_or_add_pPr()\n        if value == WD_LINE_SPACING.SINGLE:\n            pPr.spacing_line = Twips(240)\n            pPr.spacing_lineRule = WD_LINE_SPACING.MULTIPLE\n        elif value == WD_LINE_SPACING.ONE_POINT_FIVE:\n            pPr.spacing_line = Twips(360)\n            pPr.spacing_lineRule = WD_LINE_SPACING.MULTIPLE\n        elif value == WD_LINE_SPACING.DOUBLE:\n            pPr.spacing_line = Twips(480)\n            pPr.spacing_lineRule = WD_LINE_SPACING.MULTIPLE\n        else:\n            pPr.spacing_lineRule = value\n\n    @property\n    def page_break_before(self):\n        \"\"\"|True| if the paragraph should appear at the top of the page following the\n        prior paragraph.\n\n        |None| indicates its effective value is inherited from the style hierarchy.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.pageBreakBefore_val\n\n    @page_break_before.setter\n    def page_break_before(self, value):\n        self._element.get_or_add_pPr().pageBreakBefore_val = value\n\n    @property\n    def right_indent(self):\n        \"\"\"|Length| value specifying the space between the right margin and the right\n        side of the paragraph.\n\n        |None| indicates the right indent value is inherited from the style hierarchy.\n        Use a |Cm| value object as a convenient way to apply indentation in units of\n        centimeters.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.ind_right\n\n    @right_indent.setter\n    def right_indent(self, value):\n        pPr = self._element.get_or_add_pPr()\n        pPr.ind_right = value\n\n    @property\n    def space_after(self):\n        \"\"\"|Length| value specifying the spacing to appear between this paragraph and\n        the subsequent paragraph.\n\n        |None| indicates this value is inherited from the style hierarchy. |Length|\n        objects provide convenience properties, such as :attr:`~.Length.pt` and\n        :attr:`~.Length.inches`, that allow easy conversion to various length units.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.spacing_after\n\n    @space_after.setter\n    def space_after(self, value):\n        self._element.get_or_add_pPr().spacing_after = value\n\n    @property\n    def space_before(self):\n        \"\"\"|Length| value specifying the spacing to appear between this paragraph and\n        the prior paragraph.\n\n        |None| indicates this value is inherited from the style hierarchy. |Length|\n        objects provide convenience properties, such as :attr:`~.Length.pt` and\n        :attr:`~.Length.cm`, that allow easy conversion to various length units.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.spacing_before\n\n    @space_before.setter\n    def space_before(self, value):\n        self._element.get_or_add_pPr().spacing_before = value\n\n[docs]    @lazyproperty\n    def tab_stops(self):\n        \"\"\"|TabStops| object providing access to the tab stops defined for this\n        paragraph format.\"\"\"\n        pPr = self._element.get_or_add_pPr()\n        return TabStops(pPr)\n\n    @property\n    def widow_control(self):\n        \"\"\"|True| if the first and last lines in the paragraph remain on the same page\n        as the rest of the paragraph when Word repaginates the document.\n\n        |None| indicates its effective value is inherited from the style hierarchy.\n        \"\"\"\n        pPr = self._element.pPr\n        if pPr is None:\n            return None\n        return pPr.widowControl_val\n\n    @widow_control.setter\n    def widow_control(self, value):\n        self._element.get_or_add_pPr().widowControl_val = value\n\n    @staticmethod\n    def _line_spacing(spacing_line, spacing_lineRule):\n        \"\"\"Return the line spacing value calculated from the combination of\n        `spacing_line` and `spacing_lineRule`.\n\n        Returns a |float| number of lines when `spacing_lineRule` is\n        ``WD_LINE_SPACING.MULTIPLE``, otherwise a |Length| object of absolute line\n        height is returned. Returns |None| when `spacing_line` is |None|.\n        \"\"\"\n        if spacing_line is None:\n            return None\n        if spacing_lineRule == WD_LINE_SPACING.MULTIPLE:\n            return spacing_line / Pt(12)\n        return spacing_line\n\n    @staticmethod\n    def _line_spacing_rule(line, lineRule):\n        \"\"\"Return the line spacing rule value calculated from the combination of `line`\n        and `lineRule`.\n\n        Returns special members of the :ref:`WdLineSpacing` enumeration when line\n        spacing is single, double, or 1.5 lines.\n        \"\"\"\n        if lineRule == WD_LINE_SPACING.MULTIPLE:\n            if line == Twips(240):\n                return WD_LINE_SPACING.SINGLE\n            if line == Twips(360):\n                return WD_LINE_SPACING.ONE_POINT_FIVE\n            if line == Twips(480):\n                return WD_LINE_SPACING.DOUBLE\n        return lineRule"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/parfmt.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/parfmt.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/parfmt.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/parfmt.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdColorIndex.html"
    },
    {
        "title": "WD_COLOR_INDEX¶",
        "content": [
            "alias: WD_COLOR",
            "Specifies a standard preset color to apply. Used for font highlighting and\nperhaps other applications.",
            "WD_CELL_VERTICAL_ALIGNMENT",
            "WD_LINE_SPACING"
        ],
        "code": [
            "WD_COLOR_INDEX",
            "WD_CELL_VERTICAL_ALIGNMENT",
            "WD_LINE_SPACING"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdColorIndex.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdColorIndex.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdColorIndex.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdColorIndex.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/run.html"
    },
    {
        "title": "Source code for docx.text.run",
        "content": [],
        "code": [
            "\"\"\"Run-related proxy objects for python-docx, Run in particular.\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import IO, TYPE_CHECKING, Iterator, cast\n\nfrom docx.drawing import Drawing\nfrom docx.enum.style import WD_STYLE_TYPE\nfrom docx.enum.text import WD_BREAK\nfrom docx.oxml.drawing import CT_Drawing\nfrom docx.oxml.text.pagebreak import CT_LastRenderedPageBreak\nfrom docx.shape import InlineShape\nfrom docx.shared import StoryChild\nfrom docx.styles.style import CharacterStyle\nfrom docx.text.font import Font\nfrom docx.text.pagebreak import RenderedPageBreak\n\nif TYPE_CHECKING:\n    import docx.types as t\n    from docx.enum.text import WD_UNDERLINE\n    from docx.oxml.text.run import CT_R, CT_Text\n    from docx.shared import Length\n\n\n[docs]class Run(StoryChild):\n    \"\"\"Proxy object wrapping `<w:r>` element.\n\n    Several of the properties on Run take a tri-state value, |True|, |False|, or |None|.\n    |True| and |False| correspond to on and off respectively. |None| indicates the\n    property is not specified directly on the run and its effective value is taken from\n    the style hierarchy.\n    \"\"\"\n\n    def __init__(self, r: CT_R, parent: t.ProvidesStoryPart):\n        super().__init__(parent)\n        self._r = self._element = self.element = r\n\n[docs]    def add_break(self, break_type: WD_BREAK = WD_BREAK.LINE):\n        \"\"\"Add a break element of `break_type` to this run.\n\n        `break_type` can take the values `WD_BREAK.LINE`, `WD_BREAK.PAGE`, and\n        `WD_BREAK.COLUMN` where `WD_BREAK` is imported from `docx.enum.text`.\n        `break_type` defaults to `WD_BREAK.LINE`.\n        \"\"\"\n        type_, clear = {\n            WD_BREAK.LINE: (None, None),\n            WD_BREAK.PAGE: (\"page\", None),\n            WD_BREAK.COLUMN: (\"column\", None),\n            WD_BREAK.LINE_CLEAR_LEFT: (\"textWrapping\", \"left\"),\n            WD_BREAK.LINE_CLEAR_RIGHT: (\"textWrapping\", \"right\"),\n            WD_BREAK.LINE_CLEAR_ALL: (\"textWrapping\", \"all\"),\n        }[break_type]\n        br = self._r.add_br()\n        if type_ is not None:\n            br.type = type_\n        if clear is not None:\n            br.clear = clear\n\n[docs]    def add_picture(\n        self,\n        image_path_or_stream: str | IO[bytes],\n        width: int | Length | None = None,\n        height: int | Length | None = None,\n    ) -> InlineShape:\n        \"\"\"Return |InlineShape| containing image identified by `image_path_or_stream`.\n\n        The picture is added to the end of this run.\n\n        `image_path_or_stream` can be a path (a string) or a file-like object containing\n        a binary image.\n\n        If neither width nor height is specified, the picture appears at\n        its native size. If only one is specified, it is used to compute a scaling\n        factor that is then applied to the unspecified dimension, preserving the aspect\n        ratio of the image. The native size of the picture is calculated using the dots-\n        per-inch (dpi) value specified in the image file, defaulting to 72 dpi if no\n        value is specified, as is often the case.\n        \"\"\"\n        inline = self.part.new_pic_inline(image_path_or_stream, width, height)\n        self._r.add_drawing(inline)\n        return InlineShape(inline)\n\n[docs]    def add_tab(self) -> None:\n        \"\"\"Add a ``<w:tab/>`` element at the end of the run, which Word interprets as a\n        tab character.\"\"\"\n        self._r.add_tab()\n\n[docs]    def add_text(self, text: str):\n        \"\"\"Returns a newly appended |_Text| object (corresponding to a new ``<w:t>``\n        child element) to the run, containing `text`.\n\n        Compare with the possibly more friendly approach of assigning text to the\n        :attr:`Run.text` property.\n        \"\"\"\n        t = self._r.add_t(text)\n        return _Text(t)\n\n    @property\n    def bold(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the text of the run to appear in bold face. When |False|,\n        the text unconditionally appears non-bold. When |None| the bold setting for this\n        run is inherited from the style hierarchy.\n        \"\"\"\n        return self.font.bold\n\n    @bold.setter\n    def bold(self, value: bool | None):\n        self.font.bold = value\n\n[docs]    def clear(self):\n        \"\"\"Return reference to this run after removing all its content.\n\n        All run formatting is preserved.\n        \"\"\"\n        self._r.clear_content()\n        return self\n\n    @property\n    def contains_page_break(self) -> bool:\n        \"\"\"`True` when one or more rendered page-breaks occur in this run.\n\n        Note that \"hard\" page-breaks inserted by the author are not included. A hard\n        page-break gives rise to a rendered page-break in the right position so if those\n        were included that page-break would be \"double-counted\".\n\n        It would be very rare for multiple rendered page-breaks to occur in a single\n        run, but it is possible.\n        \"\"\"\n        return bool(self._r.lastRenderedPageBreaks)\n\n    @property\n    def font(self) -> Font:\n        \"\"\"The |Font| object providing access to the character formatting properties for\n        this run, such as font name and size.\"\"\"\n        return Font(self._element)\n\n    @property\n    def italic(self) -> bool | None:\n        \"\"\"Read/write tri-state value.\n\n        When |True|, causes the text of the run to appear in italics. When |False|, the\n        text unconditionally appears non-italic. When |None| the italic setting for this\n        run is inherited from the style hierarchy.\n        \"\"\"\n        return self.font.italic\n\n    @italic.setter\n    def italic(self, value: bool | None):\n        self.font.italic = value\n\n[docs]    def iter_inner_content(self) -> Iterator[str | Drawing | RenderedPageBreak]:\n        \"\"\"Generate the content-items in this run in the order they appear.\n\n        NOTE: only content-types currently supported by `python-docx` are generated. In\n        this version, that is text and rendered page-breaks. Drawing is included but\n        currently only provides access to its XML element (CT_Drawing) on its\n        `._drawing` attribute. `Drawing` attributes and methods may be expanded in\n        future releases.\n\n        There are a number of element-types that can appear inside a run, but most of\n        those (w:br, w:cr, w:noBreakHyphen, w:t, w:tab) have a clear plain-text\n        equivalent. Any contiguous range of such elements is generated as a single\n        `str`. Rendered page-break and drawing elements are generated individually. Any\n        other elements are ignored.\n        \"\"\"\n        for item in self._r.inner_content_items:\n            if isinstance(item, str):\n                yield item\n            elif isinstance(item, CT_LastRenderedPageBreak):\n                yield RenderedPageBreak(item, self)\n            elif isinstance(item, CT_Drawing):  # pyright: ignore[reportUnnecessaryIsInstance]\n                yield Drawing(item, self)\n\n    @property\n    def style(self) -> CharacterStyle:\n        \"\"\"Read/write.\n\n        A |CharacterStyle| object representing the character style applied to this run.\n        The default character style for the document (often `Default Character Font`) is\n        returned if the run has no directly-applied character style. Setting this\n        property to |None| removes any directly-applied character style.\n        \"\"\"\n        style_id = self._r.style\n        return cast(CharacterStyle, self.part.get_style(style_id, WD_STYLE_TYPE.CHARACTER))\n\n    @style.setter\n    def style(self, style_or_name: str | CharacterStyle | None):\n        style_id = self.part.get_style_id(style_or_name, WD_STYLE_TYPE.CHARACTER)\n        self._r.style = style_id\n\n    @property\n    def text(self) -> str:\n        \"\"\"String formed by concatenating the text equivalent of each run.\n\n        Each `<w:t>` element adds the text characters it contains. A `<w:tab/>` element\n        adds a `\\\\t` character. A `<w:cr/>` or `<w:br>` element each add a `\\\\n`\n        character. Note that a `<w:br>` element can indicate a page break or column\n        break as well as a line break. Only line-break `<w:br>` elements translate to\n        a `\\\\n` character. Others are ignored. All other content child elements, such as\n        `<w:drawing>`, are ignored.\n\n        Assigning text to this property has the reverse effect, translating each `\\\\t`\n        character to a `<w:tab/>` element and each `\\\\n` or `\\\\r` character to a\n        `<w:cr/>` element. Any existing run content is replaced. Run formatting is\n        preserved.\n        \"\"\"\n        return self._r.text\n\n    @text.setter\n    def text(self, text: str):\n        self._r.text = text\n\n    @property\n    def underline(self) -> bool | WD_UNDERLINE | None:\n        \"\"\"The underline style for this |Run|.\n\n        Value is one of |None|, |True|, |False|, or a member of :ref:`WdUnderline`.\n\n        A value of |None| indicates the run has no directly-applied underline value and\n        so will inherit the underline value of its containing paragraph. Assigning\n        |None| to this property removes any directly-applied underline value.\n\n        A value of |False| indicates a directly-applied setting of no underline,\n        overriding any inherited value.\n\n        A value of |True| indicates single underline.\n\n        The values from :ref:`WdUnderline` are used to specify other outline styles such\n        as double, wavy, and dotted.\n        \"\"\"\n        return self.font.underline\n\n    @underline.setter\n    def underline(self, value: bool):\n        self.font.underline = value\n\n\nclass _Text:\n    \"\"\"Proxy object wrapping `<w:t>` element.\"\"\"\n\n    def __init__(self, t_elm: CT_Text):\n        super(_Text, self).__init__()\n        self._t = t_elm"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/run.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/run.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/run.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/run.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/index.html"
    },
    {
        "title": "Enumerations¶",
        "content": [
            "Documentation for the various enumerations used for python-docx property settings\ncan be found here:",
            "Shared classes",
            "MSO_COLOR_TYPE"
        ],
        "code": [
            "python-docx",
            "MSO_COLOR_TYPE",
            "MSO_THEME_COLOR_INDEX",
            "WD_PARAGRAPH_ALIGNMENT",
            "WD_BUILTIN_STYLE",
            "WD_CELL_VERTICAL_ALIGNMENT",
            "WD_COLOR_INDEX",
            "WD_LINE_SPACING",
            "WD_ORIENTATION",
            "WD_TABLE_ALIGNMENT",
            "WD_ROW_HEIGHT_RULE",
            "WD_SECTION_START",
            "WD_STYLE_TYPE",
            "WD_TAB_ALIGNMENT",
            "WD_TAB_LEADER",
            "WD_TABLE_DIRECTION",
            "WD_UNDERLINE",
            "MSO_COLOR_TYPE"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/index.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/index.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/index.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/index.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "Style-related objects¶",
        "content": [
            "A style is used to collect a set of formatting properties under a single name\nand apply those properties to a content object all at once. This promotes\nformatting consistency throughout a document and across related documents\nand allows formatting changes to be made globally by changing the definition\nin the appropriate style."
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "Styles objects¶",
        "content": [
            "Provides access to the styles defined in a document.",
            "Accessed using the Document.styles property. Supports len(), iteration,\nand dictionary-style access by style name.",
            "Return a newly added style object of style_type and identified by name.",
            "A builtin style can be defined by passing True for the optional builtin\nargument.",
            "Return the default style for style_type or None if no default is defined\nfor that type (not common).",
            "The lxml element proxied by this object.",
            "A LatentStyles object providing access to the default behaviors for latent\nstyles and the collection of _LatentStyle objects that define overrides of\nthose defaults for a particular named latent style."
        ],
        "code": [
            "Styles",
            "docx.styles.styles.",
            "Styles",
            "Document.styles",
            "len()",
            "add_style",
            "default",
            "None",
            "element",
            "latent_styles",
            "LatentStyles",
            "_LatentStyle"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "BaseStyle objects¶",
        "content": [
            "Base class for the various types of style object, paragraph, character, table,\nand numbering.",
            "These properties and methods are inherited by all style objects.",
            "Read-only.",
            "True if this style is a built-in style. False indicates it is a custom\n(user-defined) style. Note this value is based on the presence of a\ncustomStyle attribute in the XML, not on specific knowledge of which styles\nare built into Word.",
            "Remove this style definition from the document.",
            "Note that calling this method does not remove or change the style applied to any\ndocument content. Content items having the deleted style will be rendered using\nthe default style, as is any content with a style not defined in the document.",
            "The lxml element proxied by this object.",
            "True if display of this style in the style gallery and list of recommended\nstyles is suppressed.",
            "False otherwise. In order to be shown in the style gallery, this value must be\nFalse and quick_style must be True.",
            "Read/write Boolean.",
            "True if this style is locked. A locked style does not appear in the styles\npanel or the style gallery and cannot be applied to document content. This\nbehavior is only active when formatting protection is turned on for the document\n(via the Developer menu).",
            "The UI name of this style.",
            "The integer sort key governing display sequence of this style in the Word UI.",
            "None indicates no setting is defined, causing Word to use the default value of\n0. Style name is used as a secondary sort key to resolve ordering of styles\nhaving the same priority value.",
            "True if this style should be displayed in the style gallery when\nhidden is False.",
            "Read/write Boolean.",
            "Member of WD_STYLE_TYPE corresponding to the type of this style, e.g.\nWD_STYLE_TYPE.PARAGRAPH.",
            "True if an application should make this style visible the next time it is\napplied to content.",
            "False otherwise. Note that python-docx does not automatically unhide a style having\nTrue for this attribute when it is applied to content."
        ],
        "code": [
            "BaseStyle",
            "docx.styles.style.",
            "BaseStyle",
            "builtin",
            "True",
            "False",
            "delete",
            "element",
            "hidden",
            "True",
            "False",
            "False",
            "quick_style",
            "True",
            "locked",
            "True",
            "name",
            "priority",
            "None",
            "quick_style",
            "True",
            "hidden",
            "False",
            "type",
            "WD_STYLE_TYPE.PARAGRAPH",
            "unhide_when_used",
            "True",
            "python-docx",
            "True"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "CharacterStyle objects¶",
        "content": [
            "Bases: docx.styles.style.BaseStyle",
            "A character style.",
            "A character style is applied to a Run object and primarily provides character-\nlevel formatting via the Font object in its font property.",
            "Style object this style inherits from or None if this style is not based on\nanother style.",
            "Read-only.",
            "True if this style is a built-in style. False indicates it is a custom\n(user-defined) style. Note this value is based on the presence of a\ncustomStyle attribute in the XML, not on specific knowledge of which styles\nare built into Word.",
            "Remove this style definition from the document.",
            "Note that calling this method does not remove or change the style applied to any\ndocument content. Content items having the deleted style will be rendered using\nthe default style, as is any content with a style not defined in the document.",
            "The Font object providing access to the character formatting properties for\nthis style, such as font name and size.",
            "True if display of this style in the style gallery and list of recommended\nstyles is suppressed.",
            "False otherwise. In order to be shown in the style gallery, this value must be\nFalse and quick_style must be True.",
            "Read/write Boolean.",
            "True if this style is locked. A locked style does not appear in the styles\npanel or the style gallery and cannot be applied to document content. This\nbehavior is only active when formatting protection is turned on for the document\n(via the Developer menu).",
            "The UI name of this style.",
            "The integer sort key governing display sequence of this style in the Word UI.",
            "None indicates no setting is defined, causing Word to use the default value of\n0. Style name is used as a secondary sort key to resolve ordering of styles\nhaving the same priority value.",
            "True if this style should be displayed in the style gallery when\nhidden is False.",
            "Read/write Boolean.",
            "True if an application should make this style visible the next time it is\napplied to content.",
            "False otherwise. Note that python-docx does not automatically unhide a style having\nTrue for this attribute when it is applied to content."
        ],
        "code": [
            "CharacterStyle",
            "docx.styles.style.",
            "CharacterStyle",
            "docx.styles.style.BaseStyle",
            "Run",
            "Font",
            "font",
            "base_style",
            "None",
            "builtin",
            "True",
            "False",
            "delete",
            "font",
            "Font",
            "hidden",
            "True",
            "False",
            "False",
            "quick_style",
            "True",
            "locked",
            "True",
            "name",
            "priority",
            "None",
            "quick_style",
            "True",
            "hidden",
            "False",
            "unhide_when_used",
            "True",
            "python-docx",
            "True"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "ParagraphStyle objects¶",
        "content": [
            "Bases: docx.styles.style.CharacterStyle",
            "A paragraph style.",
            "A paragraph style provides both character formatting and paragraph formatting such\nas indentation and line-spacing.",
            "Style object this style inherits from or None if this style is not based on\nanother style.",
            "Read-only.",
            "True if this style is a built-in style. False indicates it is a custom\n(user-defined) style. Note this value is based on the presence of a\ncustomStyle attribute in the XML, not on specific knowledge of which styles\nare built into Word.",
            "Remove this style definition from the document.",
            "Note that calling this method does not remove or change the style applied to any\ndocument content. Content items having the deleted style will be rendered using\nthe default style, as is any content with a style not defined in the document.",
            "The Font object providing access to the character formatting properties for\nthis style, such as font name and size.",
            "True if display of this style in the style gallery and list of recommended\nstyles is suppressed.",
            "False otherwise. In order to be shown in the style gallery, this value must be\nFalse and quick_style must be True.",
            "Read/write Boolean.",
            "True if this style is locked. A locked style does not appear in the styles\npanel or the style gallery and cannot be applied to document content. This\nbehavior is only active when formatting protection is turned on for the document\n(via the Developer menu).",
            "The UI name of this style.",
            "ParagraphStyle object representing the style to be applied automatically\nto a new paragraph inserted after a paragraph of this style.",
            "Returns self if no next paragraph style is defined. Assigning None or self\nremoves the setting such that new paragraphs are created using this same style.",
            "The ParagraphFormat object providing access to the paragraph formatting\nproperties for this style such as indentation.",
            "The integer sort key governing display sequence of this style in the Word UI.",
            "None indicates no setting is defined, causing Word to use the default value of\n0. Style name is used as a secondary sort key to resolve ordering of styles\nhaving the same priority value.",
            "True if this style should be displayed in the style gallery when\nhidden is False.",
            "Read/write Boolean.",
            "True if an application should make this style visible the next time it is\napplied to content.",
            "False otherwise. Note that python-docx does not automatically unhide a style having\nTrue for this attribute when it is applied to content."
        ],
        "code": [
            "ParagraphStyle",
            "docx.styles.style.",
            "ParagraphStyle",
            "docx.styles.style.CharacterStyle",
            "base_style",
            "None",
            "builtin",
            "True",
            "False",
            "delete",
            "font",
            "Font",
            "hidden",
            "True",
            "False",
            "False",
            "quick_style",
            "True",
            "locked",
            "True",
            "name",
            "next_paragraph_style",
            "ParagraphStyle",
            "None",
            "paragraph_format",
            "ParagraphFormat",
            "priority",
            "None",
            "quick_style",
            "True",
            "hidden",
            "False",
            "unhide_when_used",
            "True",
            "python-docx",
            "True"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "_TableStyle objects¶",
        "content": [
            "Bases: docx.styles.style.ParagraphStyle",
            "A table style.",
            "A table style provides character and paragraph formatting for its contents as well\nas special table formatting properties.",
            "Style object this style inherits from or None if this style is not based on\nanother style.",
            "Read-only.",
            "True if this style is a built-in style. False indicates it is a custom\n(user-defined) style. Note this value is based on the presence of a\ncustomStyle attribute in the XML, not on specific knowledge of which styles\nare built into Word.",
            "Remove this style definition from the document.",
            "Note that calling this method does not remove or change the style applied to any\ndocument content. Content items having the deleted style will be rendered using\nthe default style, as is any content with a style not defined in the document.",
            "The Font object providing access to the character formatting properties for\nthis style, such as font name and size.",
            "True if display of this style in the style gallery and list of recommended\nstyles is suppressed.",
            "False otherwise. In order to be shown in the style gallery, this value must be\nFalse and quick_style must be True.",
            "Read/write Boolean.",
            "True if this style is locked. A locked style does not appear in the styles\npanel or the style gallery and cannot be applied to document content. This\nbehavior is only active when formatting protection is turned on for the document\n(via the Developer menu).",
            "The UI name of this style.",
            "ParagraphStyle object representing the style to be applied automatically\nto a new paragraph inserted after a paragraph of this style.",
            "Returns self if no next paragraph style is defined. Assigning None or self\nremoves the setting such that new paragraphs are created using this same style.",
            "The ParagraphFormat object providing access to the paragraph formatting\nproperties for this style such as indentation.",
            "The integer sort key governing display sequence of this style in the Word UI.",
            "None indicates no setting is defined, causing Word to use the default value of\n0. Style name is used as a secondary sort key to resolve ordering of styles\nhaving the same priority value.",
            "True if this style should be displayed in the style gallery when\nhidden is False.",
            "Read/write Boolean.",
            "True if an application should make this style visible the next time it is\napplied to content.",
            "False otherwise. Note that python-docx does not automatically unhide a style having\nTrue for this attribute when it is applied to content."
        ],
        "code": [
            "_TableStyle",
            "docx.styles.style.",
            "_TableStyle",
            "docx.styles.style.ParagraphStyle",
            "base_style",
            "None",
            "builtin",
            "True",
            "False",
            "delete",
            "font",
            "Font",
            "hidden",
            "True",
            "False",
            "False",
            "quick_style",
            "True",
            "locked",
            "True",
            "name",
            "next_paragraph_style",
            "ParagraphStyle",
            "None",
            "paragraph_format",
            "ParagraphFormat",
            "priority",
            "None",
            "quick_style",
            "True",
            "hidden",
            "False",
            "unhide_when_used",
            "True",
            "python-docx",
            "True"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "_NumberingStyle objects¶",
        "content": [
            "A numbering style.",
            "Not yet implemented."
        ],
        "code": [
            "_NumberingStyle",
            "docx.styles.style.",
            "_NumberingStyle"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "LatentStyles objects¶",
        "content": [
            "Provides access to the default behaviors for latent styles in this document and\nto the collection of _LatentStyle objects that define overrides of those defaults\nfor a particular named latent style.",
            "Return a newly added _LatentStyle object to override the inherited defaults\ndefined in this latent styles object for the built-in style having name.",
            "Integer between 0 and 99 inclusive specifying the default sort order for\nlatent styles in style lists and the style gallery.",
            "None if no value is assigned, which causes Word to use the default value 99.",
            "Boolean specifying whether the default behavior for latent styles is to be\nhidden.",
            "A hidden style does not appear in the recommended list or in the style gallery.",
            "Boolean specifying whether the default behavior for latent styles is to be\nlocked.",
            "A locked style does not appear in the styles panel or the style gallery and\ncannot be applied to document content. This behavior is only active when\nformatting protection is turned on for the document (via the Developer menu).",
            "Boolean specifying whether the default behavior for latent styles is to\nappear in the style gallery when not hidden.",
            "Boolean specifying whether the default behavior for latent styles is to be\nunhidden when first applied to content.",
            "The lxml element proxied by this object.",
            "Integer specifying the number of built-in styles to initialize to the\ndefaults specified in this LatentStyles object.",
            "None if there is no setting in the XML (very uncommon). The default Word 2011\ntemplate sets this value to 276, accounting for the built-in styles in Word\n2010."
        ],
        "code": [
            "LatentStyles",
            "docx.styles.latent.",
            "LatentStyles",
            "_LatentStyle",
            "add_latent_style",
            "_LatentStyle",
            "default_priority",
            "None",
            "default_to_hidden",
            "default_to_locked",
            "default_to_quick_style",
            "default_to_unhide_when_used",
            "element",
            "load_count",
            "LatentStyles",
            "None"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "_LatentStyle objects¶",
        "content": [
            "Proxy for an w:lsdException element, which specifies display behaviors for a\nbuilt-in style when no definition for that style is stored yet in the styles.xml\npart.",
            "The values in this element override the defaults specified in the parent\nw:latentStyles element.",
            "Remove this latent style definition such that the defaults defined in the\ncontaining LatentStyles object provide the effective value for each of its\nattributes.",
            "Attempting to access any attributes on this object after calling this method\nwill raise AttributeError.",
            "The lxml element proxied by this object.",
            "Tri-state value specifying whether this latent style should appear in the\nrecommended list.",
            "None indicates the effective value is inherited from the parent\n<w:latentStyles> element.",
            "Tri-state value specifying whether this latent styles is locked.",
            "A locked style does not appear in the styles panel or the style gallery and\ncannot be applied to document content. This behavior is only active when\nformatting protection is turned on for the document (via the Developer menu).",
            "The name of the built-in style this exception applies to.",
            "The integer sort key for this latent style in the Word UI.",
            "Tri-state value specifying whether this latent style should appear in the\nWord styles gallery when not hidden.",
            "None indicates the effective value should be inherited from the default values\nin its parent LatentStyles object.",
            "Tri-state value specifying whether this style should have its hidden\nattribute set False the next time the style is applied to content.",
            "None indicates the effective value should be inherited from the default\nspecified by its parent LatentStyles object."
        ],
        "code": [
            "_LatentStyle",
            "docx.styles.latent.",
            "_LatentStyle",
            "delete",
            "LatentStyles",
            "AttributeError",
            "element",
            "hidden",
            "None",
            "<w:latentStyles>",
            "locked",
            "name",
            "priority",
            "quick_style",
            "None",
            "LatentStyles",
            "unhide_when_used",
            "hidden",
            "False",
            "None",
            "LatentStyles"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Document Settings objects",
            "Text-related objects"
        ],
        "code": [
            "Styles",
            "BaseStyle",
            "CharacterStyle",
            "ParagraphStyle",
            "_TableStyle",
            "_NumberingStyle",
            "LatentStyles",
            "_LatentStyle",
            "Settings"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/style.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoThemeColorIndex.html"
    },
    {
        "title": "MSO_THEME_COLOR_INDEX¶",
        "content": [
            "Indicates the Office theme color, one of those shown in the color gallery on\nthe formatting ribbon.",
            "Alias: MSO_THEME_COLOR",
            "Example:",
            "MSO_COLOR_TYPE",
            "WD_PARAGRAPH_ALIGNMENT"
        ],
        "code": [
            "MSO_THEME_COLOR_INDEX",
            "MSO_THEME_COLOR",
            "from docx.enum.dml import MSO_THEME_COLOR\n\nfont.color.theme_color = MSO_THEME_COLOR.ACCENT_1",
            "MSO_COLOR_TYPE",
            "WD_PARAGRAPH_ALIGNMENT"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoThemeColorIndex.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoThemeColorIndex.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoThemeColorIndex.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoThemeColorIndex.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/hyperlink.html"
    },
    {
        "title": "Source code for docx.text.hyperlink",
        "content": [],
        "code": [
            "\"\"\"Hyperlink-related proxy objects for python-docx, Hyperlink in particular.\n\nA hyperlink occurs in a paragraph, at the same level as a Run, and a hyperlink itself\ncontains runs, which is where the visible text of the hyperlink is stored. So it's kind\nof in-between, less than a paragraph and more than a run. So it gets its own module.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom docx.shared import Parented\nfrom docx.text.run import Run\n\nif TYPE_CHECKING:\n    import docx.types as t\n    from docx.oxml.text.hyperlink import CT_Hyperlink\n\n\n[docs]class Hyperlink(Parented):\n    \"\"\"Proxy object wrapping a `<w:hyperlink>` element.\n\n    A hyperlink occurs as a child of a paragraph, at the same level as a Run. A\n    hyperlink itself contains runs, which is where the visible text of the hyperlink is\n    stored.\n    \"\"\"\n\n    def __init__(self, hyperlink: CT_Hyperlink, parent: t.ProvidesStoryPart):\n        super().__init__(parent)\n        self._parent = parent\n        self._hyperlink = self._element = hyperlink\n\n    @property\n    def address(self) -> str:\n        \"\"\"The \"URL\" of the hyperlink (but not necessarily a web link).\n\n        While commonly a web link like \"https://google.com\" the hyperlink address can\n        take a variety of forms including \"internal links\" to bookmarked locations\n        within the document. When this hyperlink is an internal \"jump\" to for example a\n        heading from the table-of-contents (TOC), the address is blank. The bookmark\n        reference (like \"_Toc147925734\") is stored in the `.fragment` property.\n        \"\"\"\n        rId = self._hyperlink.rId\n        return self._parent.part.rels[rId].target_ref if rId else \"\"\n\n    @property\n    def contains_page_break(self) -> bool:\n        \"\"\"True when the text of this hyperlink is broken across page boundaries.\n\n        This is not uncommon and can happen for example when the hyperlink text is\n        multiple words and occurs in the last line of a page. Theoretically, a hyperlink\n        can contain more than one page break but that would be extremely uncommon in\n        practice. Still, this value should be understood to mean that \"one-or-more\"\n        rendered page breaks are present.\n        \"\"\"\n        return bool(self._hyperlink.lastRenderedPageBreaks)\n\n    @property\n    def fragment(self) -> str:\n        \"\"\"Reference like `#glossary` at end of URL that refers to a sub-resource.\n\n        Note that this value does not include the fragment-separator character (\"#\").\n\n        This value is known as a \"named anchor\" in an HTML context and \"anchor\" in the\n        MS API, but an \"anchor\" element (`<a>`) represents a full hyperlink in HTML so\n        we avoid confusion by using the more precise RFC 3986 naming \"URI fragment\".\n\n        These are also used to refer to bookmarks within the same document, in which\n        case the `.address` value with be blank (\"\") and this property will hold a\n        value like \"_Toc147925734\".\n\n        To reliably get an entire web URL you will need to concatenate this with the\n        `.address` value, separated by \"#\" when both are present. Consider using the\n        `.url` property for that purpose.\n\n        Word sometimes stores a fragment in this property (an XML attribute) and\n        sometimes with the address, depending on how the URL is inserted, so don't\n        depend on this field being empty to indicate no fragment is present.\n        \"\"\"\n        return self._hyperlink.anchor or \"\"\n\n    @property\n    def runs(self) -> list[Run]:\n        \"\"\"List of |Run| instances in this hyperlink.\n\n        Together these define the visible text of the hyperlink. The text of a hyperlink\n        is typically contained in a single run will be broken into multiple runs if for\n        example part of the hyperlink is bold or the text was changed after the document\n        was saved.\n        \"\"\"\n        return [Run(r, self._parent) for r in self._hyperlink.r_lst]\n\n    @property\n    def text(self) -> str:\n        \"\"\"String formed by concatenating the text of each run in the hyperlink.\n\n        Tabs and line breaks in the XML are mapped to ``\\\\t`` and ``\\\\n`` characters\n        respectively. Note that rendered page-breaks can occur within a hyperlink but\n        they are not reflected in this text.\n        \"\"\"\n        return self._hyperlink.text\n\n    @property\n    def url(self) -> str:\n        \"\"\"Convenience property to get web URLs from hyperlinks that contain them.\n\n        This value is the empty string (\"\") when there is no address portion, so its\n        boolean value can also be used to distinguish external URIs from internal \"jump\"\n        hyperlinks like those found in a table-of-contents.\n\n        Note that this value may also be a link to a file, so if you only want web-urls\n        you'll need to check for a protocol prefix like `https://`.\n\n        When both an address and fragment are present, the return value joins the two\n        separated by the fragment-separator hash (\"#\"). Otherwise this value is the same\n        as that of the `.address` property.\n        \"\"\"\n        address, fragment = self.address, self.fragment\n        if not address:\n            return \"\"\n        return f\"{address}#{fragment}\" if fragment else address"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/hyperlink.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/hyperlink.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/hyperlink.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/text/hyperlink.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoColorType.html"
    },
    {
        "title": "MSO_COLOR_TYPE¶",
        "content": [
            "Specifies the color specification scheme",
            "Example:",
            "Enumerations",
            "MSO_THEME_COLOR_INDEX"
        ],
        "code": [
            "MSO_COLOR_TYPE",
            "from docx.enum.dml import MSO_COLOR_TYPE\n\nassert font.color.type == MSO_COLOR_TYPE.THEME",
            "RGBColor",
            "MSO_THEME_COLOR_INDEX"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoColorType.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoColorType.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoColorType.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/MsoColorType.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/document.html"
    },
    {
        "title": "Document objects¶",
        "content": [
            "The main Document and related objects."
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/document.html"
    },
    {
        "title": "Document constructor¶",
        "content": [
            "Return a Document object loaded from docx, where docx can be either a path\nto a .docx file (a string) or a file-like object.",
            "If docx is missing or None, the built-in default document “template” is\nloaded."
        ],
        "code": [
            "Document",
            "docx.",
            "Document",
            "Document",
            ".docx",
            "None"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/document.html"
    },
    {
        "title": "Document objects¶",
        "content": [
            "WordprocessingML (WML) document.",
            "Not intended to be constructed directly. Use docx.Document() to open or create\na document.",
            "Return a heading paragraph newly added to the end of the document.",
            "The heading paragraph will contain text and have its paragraph style\ndetermined by level. If level is 0, the style is set to Title. If level\nis 1 (or omitted), Heading 1 is used. Otherwise the style is set to Heading\n{level}. Raises ValueError if level is outside the range 0-9.",
            "Return newly Paragraph object containing only a page break.",
            "Return paragraph newly added to the end of the document.",
            "The paragraph is populated with text and having paragraph style style.",
            "text can contain tab (\\t) characters, which are converted to the\nappropriate XML form for a tab. text can also include newline (\\n) or\ncarriage return (\\r) characters, each of which is converted to a line\nbreak.",
            "Return new picture shape added in its own paragraph at end of the document.",
            "The picture contains the image at image_path_or_stream, scaled based on\nwidth and height. If neither width nor height is specified, the picture\nappears at its native size. If only one is specified, it is used to compute a\nscaling factor that is then applied to the unspecified dimension, preserving the\naspect ratio of the image. The native size of the picture is calculated using\nthe dots-per-inch (dpi) value specified in the image file, defaulting to 72 dpi\nif no value is specified, as is often the case.",
            "Return a Section object newly added at the end of the document.",
            "The optional start_type argument must be a member of the WD_SECTION_START\nenumeration, and defaults to WD_SECTION.NEW_PAGE if not provided.",
            "Add a table having row and column counts of rows and cols respectively.",
            "style may be a table style object or a table style name. If style is None,\nthe table inherits the default table style of the document.",
            "A CoreProperties object providing Dublin Core properties of document.",
            "The InlineShapes collection for this document.",
            "An inline shape is a graphical object, such as a picture, contained in a run of\ntext and behaving like a character glyph, being flowed like other text in a\nparagraph.",
            "Generate each Paragraph or Table in this document in document order.",
            "The Paragraph instances in the document, in document order.",
            "Note that paragraphs within revision marks such as <w:ins> or <w:del> do\nnot appear in this list.",
            "The DocumentPart object of this document.",
            "Save this document to path_or_stream.",
            "path_or_stream can be either a path to a filesystem location (a string) or a\nfile-like object.",
            "Sections object providing access to each section in this document.",
            "A Settings object providing access to the document-level settings.",
            "A Styles object providing access to the styles in this document.",
            "All Table instances in the document, in document order.",
            "Note that only tables appearing at the top level of the document appear in this\nlist; a table nested inside a table cell does not appear. A table within\nrevision marks such as <w:ins> or <w:del> will also not appear in the\nlist."
        ],
        "code": [
            "Document",
            "docx.document.",
            "Document",
            "docx.Document()",
            "add_heading",
            "ValueError",
            "add_page_break",
            "Paragraph",
            "add_paragraph",
            "\\t",
            "\\n",
            "\\r",
            "add_picture",
            "add_section",
            "Section",
            "WD_SECTION.NEW_PAGE",
            "add_table",
            "None",
            "core_properties",
            "CoreProperties",
            "inline_shapes",
            "InlineShapes",
            "iter_inner_content",
            "paragraphs",
            "Paragraph",
            "<w:ins>",
            "<w:del>",
            "part",
            "DocumentPart",
            "save",
            "sections",
            "Sections",
            "settings",
            "Settings",
            "styles",
            "Styles",
            "tables",
            "Table",
            "<w:ins>",
            "<w:del>"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/document.html"
    },
    {
        "title": "CoreProperties objects¶",
        "content": [
            "Each Document object provides access to its CoreProperties object via its\ncore_properties attribute. A CoreProperties object provides\nread/write access to the so-called core properties for the document. The\ncore properties are author, category, comments, content_status, created,\nidentifier, keywords, language, last_modified_by, last_printed, modified,\nrevision, subject, title, and version.",
            "Each property is one of three types, str, datetime.datetime, or int. String\nproperties are limited in length to 255 characters and return an empty string\n(‘’) if not set. Date properties are assigned and returned as datetime.datetime\nobjects without timezone, i.e. in UTC. Any timezone conversions are the\nresponsibility of the client. Date properties return None if not set.",
            "python-docx does not automatically set any of the document core properties other\nthan to add a core properties part to a presentation that doesn’t have one\n(very uncommon). If python-docx adds a core properties part, it contains default\nvalues for the title, last_modified_by, revision, and modified properties.\nClient code should update properties like revision and last_modified_by\nif that behavior is desired.",
            "string – An entity primarily responsible for making the content of the\nresource.",
            "string – A categorization of the content of this package. Example\nvalues might include: Resume, Letter, Financial Forecast, Proposal,\nor Technical Presentation.",
            "string – An account of the content of the resource.",
            "string – completion status of the document, e.g. ‘draft’",
            "datetime – time of intial creation of the document",
            "string – An unambiguous reference to the resource within a given\ncontext, e.g. ISBN.",
            "string – descriptive words or short phrases likely to be used as\nsearch terms for this document",
            "string – language the document is written in",
            "string – name or other identifier (such as email address) of person\nwho last modified the document",
            "datetime – time the document was last printed",
            "datetime – time the document was last modified",
            "int – number of this revision, incremented by Word each time the\ndocument is saved. Note however python-docx does not automatically increment\nthe revision number when it saves a document.",
            "string – The topic of the content of the resource.",
            "string – The name given to the resource.",
            "string – free-form version string"
        ],
        "code": [
            "CoreProperties",
            "Document",
            "CoreProperties",
            "core_properties",
            "CoreProperties",
            "str",
            "datetime.datetime",
            "int",
            "datetime.datetime",
            "None",
            "python-docx",
            "python-docx",
            "docx.opc.coreprops.",
            "CoreProperties",
            "author",
            "category",
            "comments",
            "content_status",
            "created",
            "identifier",
            "keywords",
            "language",
            "last_modified_by",
            "last_printed",
            "modified",
            "revision",
            "python-docx",
            "subject",
            "title",
            "version"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/document.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Understanding pictures and other shapes",
            "Document Settings objects"
        ],
        "code": [
            "Document",
            "Document",
            "CoreProperties",
            "Settings"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/document.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/document.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/document.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/document.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/api.html"
    },
    {
        "title": "Source code for docx.api",
        "content": [],
        "code": [
            "\"\"\"Directly exposed API functions and classes, :func:`Document` for now.\n\nProvides a syntactically more convenient API for interacting with the OpcPackage graph.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nfrom typing import IO, TYPE_CHECKING, cast\n\nfrom docx.opc.constants import CONTENT_TYPE as CT\nfrom docx.package import Package\n\nif TYPE_CHECKING:\n    from docx.document import Document as DocumentObject\n    from docx.parts.document import DocumentPart\n\n\n[docs]def Document(docx: str | IO[bytes] | None = None) -> DocumentObject:\n    \"\"\"Return a |Document| object loaded from `docx`, where `docx` can be either a path\n    to a ``.docx`` file (a string) or a file-like object.\n\n    If `docx` is missing or ``None``, the built-in default document \"template\" is\n    loaded.\n    \"\"\"\n    docx = _default_docx_path() if docx is None else docx\n    document_part = cast(\"DocumentPart\", Package.open(docx).main_document_part)\n    if document_part.content_type != CT.WML_DOCUMENT_MAIN:\n        tmpl = \"file '%s' is not a Word file, content type is '%s'\"\n        raise ValueError(tmpl % (docx, document_part.content_type))\n    return document_part.document\n\n\ndef _default_docx_path():\n    \"\"\"Return the path to the built-in default .docx package.\"\"\"\n    _thisdir = os.path.split(__file__)[0]\n    return os.path.join(_thisdir, \"templates\", \"default.docx\")"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/api.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/api.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/api.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/_modules/docx/api.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Text-related objects¶",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Paragraph objects¶",
        "content": [
            "Proxy object wrapping a <w:p> element.",
            "Append run containing text and having character-style style.",
            "text can contain tab (\\t) characters, which are converted to the\nappropriate XML form for a tab. text can also include newline (\\n) or\ncarriage return (\\r) characters, each of which is converted to a line\nbreak. When text is None, the new run is empty.",
            "A member of the WD_PARAGRAPH_ALIGNMENT enumeration specifying the\njustification setting for this paragraph.",
            "A value of None indicates the paragraph has no directly-applied alignment\nvalue and will inherit its alignment value from its style hierarchy. Assigning\nNone to this property removes any directly-applied alignment value.",
            "Return this same paragraph after removing all its content.",
            "Paragraph-level formatting, such as style, is preserved.",
            "True when one or more rendered page-breaks occur in this paragraph.",
            "A Hyperlink instance for each hyperlink in this paragraph.",
            "Return a newly created paragraph, inserted directly before this paragraph.",
            "If text is supplied, the new paragraph contains that text in a single run. If\nstyle is provided, that style is assigned to the new paragraph.",
            "Generate the runs and hyperlinks in this paragraph, in the order they appear.",
            "The content in a paragraph consists of both runs and hyperlinks. This method\nallows accessing each of those separately, in document order, for when the\nprecise position of the hyperlink within the paragraph text is important. Note\nthat a hyperlink itself contains runs.",
            "The ParagraphFormat object providing access to the formatting properties\nfor this paragraph, such as line spacing and indentation.",
            "All rendered page-breaks in this paragraph.",
            "Most often an empty list, sometimes contains one page-break, but can contain\nmore than one is rare or contrived cases.",
            "Sequence of Run instances corresponding to the <w:r> elements in this\nparagraph.",
            "Read/Write.",
            "ParagraphStyle object representing the style assigned to this paragraph. If\nno explicit style is assigned to this paragraph, its value is the default\nparagraph style for the document. A paragraph style name can be assigned in lieu\nof a paragraph style object. Assigning None removes any applied style, making\nits effective value the default paragraph style for the document.",
            "The textual content of this paragraph.",
            "The text includes the visible-text portion of any hyperlinks in the paragraph.\nTabs and line breaks in the XML are mapped to \\t and \\n characters\nrespectively.",
            "Assigning text to this property causes all existing paragraph content to be\nreplaced with a single run containing the assigned text. A \\t character in\nthe text is mapped to a <w:tab/> element and each \\n or \\r\ncharacter is mapped to a line break. Paragraph-level formatting, such as style,\nis preserved. All run-level formatting, such as bold or italic, is removed."
        ],
        "code": [
            "Paragraph",
            "docx.text.paragraph.",
            "Paragraph",
            "add_run",
            "\\t",
            "\\n",
            "\\r",
            "alignment",
            "None",
            "None",
            "clear",
            "contains_page_break",
            "hyperlinks",
            "Hyperlink",
            "insert_paragraph_before",
            "iter_inner_content",
            "paragraph_format",
            "ParagraphFormat",
            "rendered_page_breaks",
            "runs",
            "Run",
            "style",
            "ParagraphStyle",
            "None",
            "text",
            "\\t",
            "\\n",
            "\\t",
            "<w:tab/>",
            "\\n",
            "\\r"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "ParagraphFormat objects¶",
        "content": [
            "Provides access to paragraph formatting such as justification, indentation, line\nspacing, space before and after, and widow/orphan control.",
            "A member of the WD_PARAGRAPH_ALIGNMENT enumeration specifying the\njustification setting for this paragraph.",
            "A value of None indicates paragraph alignment is inherited from the style\nhierarchy.",
            "Length value specifying the relative difference in indentation for the\nfirst line of the paragraph.",
            "A positive value causes the first line to be indented. A negative value produces\na hanging indent. None indicates first line indentation is inherited from the\nstyle hierarchy.",
            "True if the paragraph should be kept “in one piece” and not broken across a\npage boundary when the document is rendered.",
            "None indicates its effective value is inherited from the style hierarchy.",
            "True if the paragraph should be kept on the same page as the subsequent\nparagraph when the document is rendered.",
            "For example, this property could be used to keep a section heading on the same\npage as its first paragraph. None indicates its effective value is inherited\nfrom the style hierarchy.",
            "Length value specifying the space between the left margin and the left side\nof the paragraph.",
            "None indicates the left indent value is inherited from the style hierarchy.\nUse an Inches value object as a convenient way to apply indentation in units\nof inches.",
            "float or Length value specifying the space between baselines in\nsuccessive lines of the paragraph.",
            "A value of None indicates line spacing is inherited from the style hierarchy.\nA float value, e.g. 2.0 or 1.75, indicates spacing is applied in\nmultiples of line heights. A Length value such as Pt(12) indicates spacing\nis a fixed height. The Pt value class is a convenient way to apply line\nspacing in units of points. Assigning None resets line spacing to inherit from\nthe style hierarchy.",
            "A member of the WD_LINE_SPACING enumeration indicating how the value of\nline_spacing should be interpreted.",
            "Assigning any of the WD_LINE_SPACING members SINGLE,\nDOUBLE, or ONE_POINT_FIVE will cause the value of\nline_spacing to be updated to produce the corresponding line spacing.",
            "True if the paragraph should appear at the top of the page following the\nprior paragraph.",
            "None indicates its effective value is inherited from the style hierarchy.",
            "Length value specifying the space between the right margin and the right\nside of the paragraph.",
            "None indicates the right indent value is inherited from the style hierarchy.\nUse a Cm value object as a convenient way to apply indentation in units of\ncentimeters.",
            "Length value specifying the spacing to appear between this paragraph and\nthe subsequent paragraph.",
            "None indicates this value is inherited from the style hierarchy. Length\nobjects provide convenience properties, such as pt and\ninches, that allow easy conversion to various length units.",
            "Length value specifying the spacing to appear between this paragraph and\nthe prior paragraph.",
            "None indicates this value is inherited from the style hierarchy. Length\nobjects provide convenience properties, such as pt and\ncm, that allow easy conversion to various length units.",
            "TabStops object providing access to the tab stops defined for this\nparagraph format.",
            "True if the first and last lines in the paragraph remain on the same page\nas the rest of the paragraph when Word repaginates the document.",
            "None indicates its effective value is inherited from the style hierarchy."
        ],
        "code": [
            "ParagraphFormat",
            "docx.text.parfmt.",
            "ParagraphFormat",
            "alignment",
            "None",
            "first_line_indent",
            "Length",
            "None",
            "keep_together",
            "True",
            "None",
            "keep_with_next",
            "True",
            "None",
            "left_indent",
            "Length",
            "None",
            "Inches",
            "line_spacing",
            "float",
            "Length",
            "None",
            "2.0",
            "1.75",
            "Length",
            "Pt(12)",
            "Pt",
            "None",
            "line_spacing_rule",
            "line_spacing",
            "SINGLE",
            "DOUBLE",
            "ONE_POINT_FIVE",
            "line_spacing",
            "page_break_before",
            "True",
            "None",
            "right_indent",
            "Length",
            "None",
            "Cm",
            "space_after",
            "Length",
            "None",
            "Length",
            "pt",
            "inches",
            "space_before",
            "Length",
            "None",
            "Length",
            "pt",
            "cm",
            "tab_stops",
            "TabStops",
            "widow_control",
            "True",
            "None"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Hyperlink objects¶",
        "content": [
            "Proxy object wrapping a <w:hyperlink> element.",
            "A hyperlink occurs as a child of a paragraph, at the same level as a Run. A\nhyperlink itself contains runs, which is where the visible text of the hyperlink is\nstored.",
            "The “URL” of the hyperlink (but not necessarily a web link).",
            "While commonly a web link like “https://google.com” the hyperlink address can\ntake a variety of forms including “internal links” to bookmarked locations\nwithin the document. When this hyperlink is an internal “jump” to for example a\nheading from the table-of-contents (TOC), the address is blank. The bookmark\nreference (like “_Toc147925734”) is stored in the .fragment property.",
            "True when the text of this hyperlink is broken across page boundaries.",
            "This is not uncommon and can happen for example when the hyperlink text is\nmultiple words and occurs in the last line of a page. Theoretically, a hyperlink\ncan contain more than one page break but that would be extremely uncommon in\npractice. Still, this value should be understood to mean that “one-or-more”\nrendered page breaks are present.",
            "Reference like #glossary at end of URL that refers to a sub-resource.",
            "Note that this value does not include the fragment-separator character (“#”).",
            "This value is known as a “named anchor” in an HTML context and “anchor” in the\nMS API, but an “anchor” element (<a>) represents a full hyperlink in HTML so\nwe avoid confusion by using the more precise RFC 3986 naming “URI fragment”.",
            "These are also used to refer to bookmarks within the same document, in which\ncase the .address value with be blank (“”) and this property will hold a\nvalue like “_Toc147925734”.",
            "To reliably get an entire web URL you will need to concatenate this with the\n.address value, separated by “#” when both are present. Consider using the\n.url property for that purpose.",
            "Word sometimes stores a fragment in this property (an XML attribute) and\nsometimes with the address, depending on how the URL is inserted, so don’t\ndepend on this field being empty to indicate no fragment is present.",
            "List of Run instances in this hyperlink.",
            "Together these define the visible text of the hyperlink. The text of a hyperlink\nis typically contained in a single run will be broken into multiple runs if for\nexample part of the hyperlink is bold or the text was changed after the document\nwas saved.",
            "String formed by concatenating the text of each run in the hyperlink.",
            "Tabs and line breaks in the XML are mapped to \\t and \\n characters\nrespectively. Note that rendered page-breaks can occur within a hyperlink but\nthey are not reflected in this text.",
            "Convenience property to get web URLs from hyperlinks that contain them.",
            "This value is the empty string (“”) when there is no address portion, so its\nboolean value can also be used to distinguish external URIs from internal “jump”\nhyperlinks like those found in a table-of-contents.",
            "Note that this value may also be a link to a file, so if you only want web-urls\nyou’ll need to check for a protocol prefix like https://.",
            "When both an address and fragment are present, the return value joins the two\nseparated by the fragment-separator hash (“#”). Otherwise this value is the same\nas that of the .address property."
        ],
        "code": [
            "Hyperlink",
            "docx.text.hyperlink.",
            "Hyperlink",
            "address",
            "contains_page_break",
            "fragment",
            "runs",
            "Run",
            "text",
            "\\t",
            "\\n",
            "url"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Run objects¶",
        "content": [
            "Proxy object wrapping <w:r> element.",
            "Several of the properties on Run take a tri-state value, True, False, or None.\nTrue and False correspond to on and off respectively. None indicates the\nproperty is not specified directly on the run and its effective value is taken from\nthe style hierarchy.",
            "Add a break element of break_type to this run.",
            "break_type can take the values WD_BREAK.LINE, WD_BREAK.PAGE, and\nWD_BREAK.COLUMN where WD_BREAK is imported from docx.enum.text.\nbreak_type defaults to WD_BREAK.LINE.",
            "Return InlineShape containing image identified by image_path_or_stream.",
            "The picture is added to the end of this run.",
            "image_path_or_stream can be a path (a string) or a file-like object containing\na binary image.",
            "If neither width nor height is specified, the picture appears at\nits native size. If only one is specified, it is used to compute a scaling\nfactor that is then applied to the unspecified dimension, preserving the aspect\nratio of the image. The native size of the picture is calculated using the dots-\nper-inch (dpi) value specified in the image file, defaulting to 72 dpi if no\nvalue is specified, as is often the case.",
            "Add a <w:tab/> element at the end of the run, which Word interprets as a\ntab character.",
            "Returns a newly appended _Text object (corresponding to a new <w:t>\nchild element) to the run, containing text.",
            "Compare with the possibly more friendly approach of assigning text to the\nRun.text property.",
            "Read/write tri-state value.",
            "When True, causes the text of the run to appear in bold face. When False,\nthe text unconditionally appears non-bold. When None the bold setting for this\nrun is inherited from the style hierarchy.",
            "Return reference to this run after removing all its content.",
            "All run formatting is preserved.",
            "True when one or more rendered page-breaks occur in this run.",
            "Note that “hard” page-breaks inserted by the author are not included. A hard\npage-break gives rise to a rendered page-break in the right position so if those\nwere included that page-break would be “double-counted”.",
            "It would be very rare for multiple rendered page-breaks to occur in a single\nrun, but it is possible.",
            "The Font object providing access to the character formatting properties for\nthis run, such as font name and size.",
            "Read/write tri-state value.",
            "When True, causes the text of the run to appear in italics. When False, the\ntext unconditionally appears non-italic. When None the italic setting for this\nrun is inherited from the style hierarchy.",
            "Generate the content-items in this run in the order they appear.",
            "NOTE: only content-types currently supported by python-docx are generated. In\nthis version, that is text and rendered page-breaks. Drawing is included but\ncurrently only provides access to its XML element (CT_Drawing) on its\n._drawing attribute. Drawing attributes and methods may be expanded in\nfuture releases.",
            "There are a number of element-types that can appear inside a run, but most of\nthose (w:br, w:cr, w:noBreakHyphen, w:t, w:tab) have a clear plain-text\nequivalent. Any contiguous range of such elements is generated as a single\nstr. Rendered page-break and drawing elements are generated individually. Any\nother elements are ignored.",
            "Read/write.",
            "A CharacterStyle object representing the character style applied to this run.\nThe default character style for the document (often Default Character Font) is\nreturned if the run has no directly-applied character style. Setting this\nproperty to None removes any directly-applied character style.",
            "String formed by concatenating the text equivalent of each run.",
            "Each <w:t> element adds the text characters it contains. A <w:tab/> element\nadds a t character. A <w:cr/> or <w:br> element each add a n\ncharacter. Note that a <w:br> element can indicate a page break or column\nbreak as well as a line break. Only line-break <w:br> elements translate to\na n character. Others are ignored. All other content child elements, such as\n<w:drawing>, are ignored.",
            "Assigning text to this property has the reverse effect, translating each t\ncharacter to a <w:tab/> element and each n or r character to a\n<w:cr/> element. Any existing run content is replaced. Run formatting is\npreserved.",
            "The underline style for this Run.",
            "Value is one of None, True, False, or a member of WD_UNDERLINE.",
            "A value of None indicates the run has no directly-applied underline value and\nso will inherit the underline value of its containing paragraph. Assigning\nNone to this property removes any directly-applied underline value.",
            "A value of False indicates a directly-applied setting of no underline,\noverriding any inherited value.",
            "A value of True indicates single underline.",
            "The values from WD_UNDERLINE are used to specify other outline styles such\nas double, wavy, and dotted."
        ],
        "code": [
            "Run",
            "docx.text.run.",
            "Run",
            "True",
            "False",
            "None",
            "True",
            "False",
            "None",
            "add_break",
            "add_picture",
            "InlineShape",
            "add_tab",
            "<w:tab/>",
            "add_text",
            "_Text",
            "<w:t>",
            "Run.text",
            "bold",
            "True",
            "False",
            "None",
            "clear",
            "contains_page_break",
            "font",
            "Font",
            "italic",
            "True",
            "False",
            "None",
            "iter_inner_content",
            "style",
            "CharacterStyle",
            "None",
            "text",
            "underline",
            "Run",
            "None",
            "True",
            "False",
            "None",
            "None",
            "False",
            "True"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Font objects¶",
        "content": [
            "Proxy object for parent of a <w:rPr> element and providing access to\ncharacter properties such as font name, font size, bold, and subscript.",
            "Read/write.",
            "Causes text in this font to appear in capital letters.",
            "Read/write.",
            "Causes text in this font to appear in bold.",
            "A ColorFormat object providing a way to get and set the text color for this\nfont.",
            "Read/write tri-state value.",
            "When True, causes the characters in the run to be treated as complex script\nregardless of their Unicode values.",
            "Read/write tri-state value.",
            "When True, causes the complex script characters in the run to be displayed in\nbold typeface.",
            "Read/write tri-state value.",
            "When True, causes the complex script characters in the run to be displayed in\nitalic typeface.",
            "Read/write tri-state value.",
            "When True, causes the text in the run to appear with double strikethrough.",
            "Read/write tri-state value.",
            "When True, causes the text in the run to appear as if raised off the page in\nrelief.",
            "Read/write tri-state value.",
            "When True, causes the text in the run to be hidden from display, unless\napplications settings force hidden text to be shown.",
            "Color of highlighing applied or None if not highlighted.",
            "Read/write tri-state value.",
            "When True, causes the text in the run to appear as if pressed into the page.",
            "Read/write tri-state value.",
            "When True, causes the text of the run to appear in italics. None indicates\nthe effective value is inherited from the style hierarchy.",
            "Read/write tri-state value.",
            "When True, specifies this run contains WML that should be handled as though it\nwas Office Open XML Math.",
            "The typeface name for this Font.",
            "Causes the text it controls to appear in the named font, if a matching font is\nfound. None indicates the typeface is inherited from the style hierarchy.",
            "Read/write tri-state value.",
            "When True, specifies that the contents of this run should not report any\nerrors when the document is scanned for spelling and grammar.",
            "Read/write tri-state value.",
            "When True causes the characters in the run to appear as if they have an\noutline, by drawing a one pixel wide border around the inside and outside\nborders of each character glyph.",
            "Read/write tri-state value.",
            "When True causes the text in the run to have right-to-left characteristics.",
            "Read/write tri-state value.",
            "When True causes the text in the run to appear as if each character has a\nshadow.",
            "Font height in English Metric Units (EMU).",
            "None indicates the font size should be inherited from the style hierarchy.\nLength is a subclass of int having properties for convenient conversion into\npoints or other length units. The docx.shared.Pt class allows\nconvenient specification of point values:",
            "Read/write tri-state value.",
            "When True causes the lowercase characters in the run to appear as capital\nletters two points smaller than the font size specified for the run.",
            "Read/write tri-state value.",
            "When True causes the run to use the document grid characters per line settings\ndefined in the docGrid element when laying out the characters in this run.",
            "Read/write tri-state value.",
            "When True, specifies that the given run shall always behave as if it is\nhidden, even when hidden text is being displayed in the current document. The\nproperty has a very narrow, specialized use related to the table of contents.\nConsult the spec (§17.3.2.36) for more details.",
            "Read/write tri-state value.",
            "When True causes the text in the run to appear with a single horizontal line\nthrough the center of the line.",
            "Boolean indicating whether the characters in this Font appear as subscript.",
            "None indicates the subscript/subscript value is inherited from the style\nhierarchy.",
            "Boolean indicating whether the characters in this Font appear as\nsuperscript.",
            "None indicates the subscript/superscript value is inherited from the style\nhierarchy.",
            "The underline style for this Font.",
            "The value is one of None, True, False, or a member of WD_UNDERLINE.",
            "None indicates the font inherits its underline value from the style hierarchy.\nFalse indicates no underline. True indicates single underline. The values\nfrom WD_UNDERLINE are used to specify other outline styles such as double,\nwavy, and dotted.",
            "Read/write tri-state value.",
            "When True, specifies that the contents of this run shall be hidden when the\ndocument is displayed in web page view."
        ],
        "code": [
            "Font",
            "docx.text.run.",
            "Font",
            "all_caps",
            "bold",
            "color",
            "ColorFormat",
            "complex_script",
            "True",
            "cs_bold",
            "True",
            "cs_italic",
            "True",
            "double_strike",
            "True",
            "emboss",
            "True",
            "hidden",
            "True",
            "highlight_color",
            "None",
            "imprint",
            "True",
            "italic",
            "True",
            "None",
            "math",
            "True",
            "name",
            "Font",
            "None",
            "no_proof",
            "True",
            "outline",
            "True",
            "rtl",
            "True",
            "shadow",
            "True",
            "size",
            "None",
            "Length",
            "int",
            "docx.shared.Pt",
            ">>> font.size = Pt(24)\n>>> font.size\n304800\n>>> font.size.pt\n24.0",
            "small_caps",
            "True",
            "snap_to_grid",
            "True",
            "spec_vanish",
            "True",
            "strike",
            "True",
            "subscript",
            "Font",
            "None",
            "superscript",
            "Font",
            "None",
            "underline",
            "Font",
            "None",
            "True",
            "False",
            "None",
            "False",
            "True",
            "web_hidden",
            "True"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "RenderedPageBreak objects¶",
        "content": [
            "A page-break inserted by Word during page-layout for print or display purposes.",
            "This usually does not correspond to a “hard” page-break inserted by the document\nauthor, rather just that Word ran out of room on one page and needed to start\nanother. The position of these can change depending on the printer and page-size, as\nwell as margins, etc. They also will change in response to edits, but not until Word\nloads and saves the document.",
            "Note these are never inserted by python-docx because it has no rendering function.\nThese are generally only useful for text-extraction of existing documents when\npython-docx is being used solely as a document “reader”.",
            "NOTE: a rendered page-break can occur within a hyperlink; consider a multi-word\nhyperlink like “excellent Wikipedia article on LLMs” that happens to fall close to\nthe end of the last line on a page such that the page breaks between “Wikipedia” and\n“article”. In such a “page-breaks-in-hyperlink” case, THESE METHODS WILL “MOVE” THE\nPAGE-BREAK to occur after the hyperlink, such that the entire hyperlink appears in\nthe paragraph returned by .preceding_paragraph_fragment. While this places the\n“tail” text of the hyperlink on the “wrong” page, it avoids having two hyperlinks\neach with a fragment of the actual text and pointing to the same address.",
            "A “loose” paragraph containing the content following this page-break.",
            "HAS POTENTIALLY SURPRISING BEHAVIORS so read carefully to be sure this is what\nyou want. This is primarily targeted toward text-extraction use-cases for which\nprecisely associating text with the page it occurs on is important.",
            "Compare .preceding_paragraph_fragment as these two are intended to be used\ntogether.",
            "This value is None when no content follows this page-break. This case is\nunlikely to occur in practice because Word places even-paragraph-boundary\npage-breaks on the paragraph following the page-break. Still, it is possible\nand must be checked for. Returning None for this case avoids “inserting” an\nextra, non-existent paragraph into the content stream. Note that content can\ninclude DrawingML items like images or charts, not just text.",
            "The returned paragraph is divorced from the document body. Any changes made to\nit will not be reflected in the document. It is intended to provide a container\n(Paragraph) with familiar properties and methods that can be used to\ncharacterize the paragraph content following a mid-paragraph page-break.",
            "Contains no portion of the hyperlink when this break occurs within a hyperlink.",
            "A “loose” paragraph containing the content preceding this page-break.",
            "Compare .following_paragraph_fragment as these two are intended to be used\ntogether.",
            "This value is None when no content precedes this page-break. This case is\ncommon and occurs whenever a page breaks on an even paragraph boundary.\nReturning None for this case avoids “inserting” a non-existent paragraph into\nthe content stream. Note that content can include DrawingML items like images or\ncharts.",
            "Note the returned paragraph is divorced from the document body. Any changes\nmade to it will not be reflected in the document. It is intended to provide a\nfamiliar container (Paragraph) to interrogate for the content preceding this\npage-break in the paragraph in which it occured.",
            "Contains the entire hyperlink when this break occurs within a hyperlink."
        ],
        "code": [
            "RenderedPageBreak",
            "docx.text.pagebreak.",
            "RenderedPageBreak",
            "following_paragraph_fragment",
            "preceding_paragraph_fragment"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "TabStop objects¶",
        "content": [
            "An individual tab stop applying to a paragraph or style.",
            "Accessed using list semantics on its containing TabStops object.",
            "A member of WD_TAB_ALIGNMENT specifying the alignment setting for this\ntab stop.",
            "Read/write.",
            "A member of WD_TAB_LEADER specifying a repeating character used as a\n“leader”, filling in the space spanned by this tab.",
            "Assigning None produces the same result as assigning WD_TAB_LEADER.SPACES.\nRead/write.",
            "A Length object representing the distance of this tab stop from the inside\nedge of the paragraph.",
            "May be positive or negative. Read/write."
        ],
        "code": [
            "TabStop",
            "docx.text.tabstops.",
            "TabStop",
            "TabStops",
            "alignment",
            "leader",
            "None",
            "position",
            "Length"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "TabStops objects¶",
        "content": [
            "A sequence of TabStop objects providing access to the tab stops of a paragraph\nor paragraph style.",
            "Supports iteration, indexed access, del, and len(). It is accesed using the\ntab_stops property of ParagraphFormat; it is not intended\nto be constructed directly.",
            "Add a new tab stop at position, a Length object specifying the location\nof the tab stop relative to the paragraph edge.",
            "A negative position value is valid and appears in hanging indentation. Tab\nalignment defaults to left, but may be specified by passing a member of the\nWD_TAB_ALIGNMENT enumeration as alignment. An optional leader character\ncan be specified by passing a member of the WD_TAB_LEADER enumeration as\nleader.",
            "Remove all custom tab stops."
        ],
        "code": [
            "TabStops",
            "docx.text.tabstops.",
            "TabStops",
            "TabStop",
            "tab_stops",
            "add_tab_stop",
            "Length",
            "clear_all"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Style-related objects",
            "Table objects"
        ],
        "code": [
            "Paragraph",
            "ParagraphFormat",
            "Hyperlink",
            "Run",
            "Font",
            "RenderedPageBreak",
            "TabStop",
            "TabStops"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/text.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/dml.html"
    },
    {
        "title": "DrawingML objects¶",
        "content": [
            "Low-level drawing elements like color that appear in various document\ncontexts."
        ],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/dml.html"
    },
    {
        "title": "ColorFormat objects¶",
        "content": [
            "Provides access to color settings such as RGB color, theme color, and luminance\nadjustments.",
            "An RGBColor value or None if no RGB color is specified.",
            "When type is MSO_COLOR_TYPE.RGB, the value of this property will\nalways be an RGBColor value. It may also be an RGBColor value if\ntype is MSO_COLOR_TYPE.THEME, as Word writes the current value of a\ntheme color when one is assigned. In that case, the RGB value should be\ninterpreted as no more than a good guess however, as the theme color takes\nprecedence at rendering time. Its value is None whenever type is\neither None or MSO_COLOR_TYPE.AUTO.",
            "Assigning an RGBColor value causes type to become MSO_COLOR_TYPE.RGB\nand any theme color is removed. Assigning None causes any color to be removed\nsuch that the effective color is inherited from the style hierarchy.",
            "Member of MSO_THEME_COLOR_INDEX or None if no theme color is specified.",
            "When type is MSO_COLOR_TYPE.THEME, the value of this property will\nalways be a member of MSO_THEME_COLOR_INDEX. When type has any other\nvalue, the value of this property is None.",
            "Assigning a member of MSO_THEME_COLOR_INDEX causes type to become\nMSO_COLOR_TYPE.THEME. Any existing RGB value is retained but ignored by Word.\nAssigning None causes any color specification to be removed such that the\neffective color is inherited from the style hierarchy.",
            "Read-only.",
            "A member of MSO_COLOR_TYPE, one of RGB, THEME, or AUTO, corresponding to\nthe way this color is defined. Its value is None if no color is applied at\nthis level, which causes the effective color to be inherited from the style\nhierarchy."
        ],
        "code": [
            "ColorFormat",
            "docx.dml.color.",
            "ColorFormat",
            "rgb",
            "RGBColor",
            "None",
            "type",
            "RGBColor",
            "RGBColor",
            "type",
            "None",
            "type",
            "None",
            "RGBColor",
            "type",
            "None",
            "theme_color",
            "None",
            "type",
            "type",
            "None",
            "type",
            "None",
            "type",
            "None"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/dml.html"
    },
    {
        "title": "Table of Contents",
        "content": [
            "Shape-related objects",
            "Shared classes"
        ],
        "code": [
            "ColorFormat"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/dml.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/dml.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/dml.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/dml.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdSectionStart.html"
    },
    {
        "title": "WD_SECTION_START¶",
        "content": [
            "alias: WD_SECTION",
            "Specifies the start type of a section break.",
            "Example:",
            "WD_ROW_HEIGHT_RULE",
            "WD_STYLE_TYPE"
        ],
        "code": [
            "WD_SECTION_START",
            "from docx.enum.section import WD_SECTION\n\nsection = document.sections[0]\nsection.start_type = WD_SECTION.NEW_PAGE",
            "WD_ROW_HEIGHT_RULE",
            "WD_STYLE_TYPE"
        ],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdSectionStart.html"
    },
    {
        "title": "Useful Links",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdSectionStart.html"
    },
    {
        "title": "Quick search",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdSectionStart.html"
    },
    {
        "title": "Navigation",
        "content": [],
        "code": [],
        "url": "https://python-docx.readthedocs.io/en/latest/api/enum/WdSectionStart.html"
    }
]